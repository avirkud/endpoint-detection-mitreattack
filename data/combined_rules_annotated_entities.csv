rule_index,name,description,rule,severity,mitre_attack_id,annotations,cluster,keywords
e0,Web Application Suspicious Activity: POST Request Declined,"A POST request to a web application returned a 403 response, which indicates the web application declined to process the
request because the action requested was not allowed.
","http.response.status_code:403 and http.request.method:post
",medium,,,180.0,"['403', 'declined', 'response', 'request', 'post']"
e1,Web Application Suspicious Activity: Unauthorized Method,"A request to a web application returned a 405 response, which indicates the web application declined to process the
request because the HTTP method is not allowed for the resource.
","http.response.status_code:405
",medium,,,180.0,"['405', 'http', 'response', 'request', 'declined']"
e2,Web Application Suspicious Activity: sqlmap User Agent,"This is an example of how to detect an unwanted web client user agent. This search matches the user agent for sqlmap
1.3.11, which is a popular FOSS tool for testing web applications for SQL injection vulnerabilities.
","user_agent.original:""sqlmap/1.3.11#stable (http://sqlmap.org)""
",medium,,{'sqlmap'},,"['sqlmap', 'detect', 'sql', 'injection', 'testing']"
e3,Potential Cookies Theft via Browser Debugging,"Identifies the execution of a Chromium based browser with the debugging process argument, which may indicate an attempt
to steal authentication cookies. An adversary may steal web application or service session cookies and use them to gain
access web applications or Internet services as an authenticated user without needing credentials.
","process where event.type in (""start"", ""process_started"", ""info"") and
  process.name in (
             ""Microsoft Edge"",
             ""chrome.exe"",
             ""Google Chrome"",
             ""google-chrome-stable"",
             ""google-chrome-beta"",
             ""google-chrome"",
             ""msedge.exe"") and
   process.args : (""--remote-debugging-port=*"",
                   ""--remote-debugging-targets=*"",
                   ""--remote-debugging-pipe=*"") and
   process.args : ""--user-data-dir=*"" and not process.args:""--remote-debugging-port=0""
",medium,['T1539'],{'browser'},181.0,"['chromium', 'browser', 'authentication', 'cookies', 'debugging']"
e4,Agent Spoofing - Mismatched Agent ID,"Detects events that have a mismatch on the expected event agent ID. The status ""agent_id_mismatch""
occurs when the expected agent ID associated with the API key does not match the actual agent ID in an event. This could
indicate attempts to spoof events in order to masquerade actual activity to evade detection.
","event.agent_id_status:agent_id_mismatch
",high,['T1036'],{'agent spoofing'},182.0,"['agent_id_mismatch', 'agent', 'spoof', 'api', 'mismatch']"
e5,Agent Spoofing - Multiple Hosts Using Same Agent,"Detects when multiple hosts are using the same agent ID. This could occur in the event of an agent
being taken over and used to inject illegitimate documents into an instance as an attempt to spoof events in order to
masquerade actual activity to evade detection.
","event.agent_id_status:*
",high,['T1036'],{'agent spoofing'},182.0,"['hosts', 'spoof', 'agent', 'detection', 'detects']"
e6,WebServer Access Logs Deleted,"Identifies the deletion of WebServer access logs. This may indicate an attempt to evade detection or destroy forensic
evidence on a system.
","file where event.type == ""deletion"" and
  file.path : (""C:\\inetpub\\logs\\LogFiles\\*.log"",
               ""/var/log/apache*/access.log"",
               ""/etc/httpd/logs/access_log"",
               ""/var/log/httpd/access_log"",
               ""/var/www/*/logs/access.log"")
",medium,['T1070'],{'forensic'},85.0,"['logs', 'webserver', 'forensic', 'detection', 'deletion']"
e7,Tampering of Bash Command-Line History,"Adversaries may attempt to clear or disable the Bash command-line history in an attempt to evade detection or forensic
investigations.
","process where event.type in (""start"", ""process_started"") and
 (
  ((process.args : (""rm"", ""echo"") or
    (process.args : ""ln"" and process.args : ""-sf"" and process.args : ""/dev/null"") or
    (process.args : ""truncate"" and process.args : ""-s0""))
    and process.args : ("".bash_history"", ""/root/.bash_history"", ""/home/*/.bash_history"",""/Users/.bash_history"", ""/Users/*/.bash_history"",
                        "".zsh_history"", ""/root/.zsh_history"", ""/home/*/.zsh_history"", ""/Users/.zsh_history"", ""/Users/*/.zsh_history"")) or
  (process.name : ""history"" and process.args : ""-c"") or
  (process.args : ""export"" and process.args : (""HISTFILE=/dev/null"", ""HISTFILESIZE=0"")) or
  (process.args : ""unset"" and process.args : ""HISTFILE"") or
  (process.args : ""set"" and process.args : ""history"" and process.args : ""+o"")
 )
",medium,['T1070'],{'forensic'},183.0,"['bash', 'adversaries', 'command', 'investigations', 'forensic']"
e8,Elastic Agent Service Terminated,"Identifies the Elastic endpoint agent has stopped and is no longer running on the host. Adversaries may attempt to
disable security monitoring tools in an attempt to evade detection or prevention capabilities during an intrusion. This
may also indicate an issue with the agent itself and should be addressed to ensure defensive measures are back in a
stable state.
","process where
/* net, sc or wmic stopping or deleting Elastic Agent on Windows */
(event.type == ""start"" and
  process.name : (""net.exe"", ""sc.exe"", ""wmic.exe"",""powershell.exe"",""taskkill.exe"",""PsKill.exe"",""ProcessHacker.exe"") and
  process.args : (""stopservice"",""uninstall"", ""stop"", ""disabled"",""Stop-Process"",""terminate"",""suspend"") and
  process.args : (""elasticendpoint"", ""Elastic Agent"",""elastic-agent"",""elastic-endpoint""))
or
/* service or systemctl used to stop Elastic Agent on Linux */
(event.type == ""end"" and
  (process.name : (""systemctl"", ""service"") and
    process.args : ""elastic-agent"" and
    process.args : ""stop"")
  or
  /* Unload Elastic Agent extension on MacOS */
  (process.name : ""kextunload"" and
    process.args : ""com.apple.iokit.EndpointSecurity"" and
    event.action : ""end""))
",medium,['T1562'],"{'net.exe', 'stop'}",2.0,"['adversaries', 'elastic', 'intrusion', 'endpoint', 'agent']"
e9,Timestomping using Touch Command,"Timestomping is an anti-forensics technique which is used to modify the timestamps of a file, often to mimic files that
are in the same folder.
","process where event.type == ""start"" and
 process.name : ""touch"" and user.id != ""0"" and
 process.args : (""-r"", ""-t"", ""-a*"",""-m*"") and
 not process.args : (""/usr/lib/go-*/bin/go"", ""/usr/lib/dracut/dracut-functions.sh"", ""/tmp/KSInstallAction.*/m/.patch/*"")
",medium,['T1070'],"{'forensic', 'timestomping'}",121.0,"['timestomping', 'timestamps', 'forensics', 'files', 'file']"
e10,Security Software Discovery via Grep,"Identifies the use of the grep command to discover known third-party macOS and Linux security tools, such as Antivirus
or Host Firewall details.
","process where event.type == ""start"" and
process.name : ""grep"" and user.id != ""0"" and
 not process.parent.executable : ""/Library/Application Support/*"" and
   process.args :
         (""Little Snitch*"",
          ""Avast*"",
          ""Avira*"",
          ""ESET*"",
          ""BlockBlock*"",
          ""360Sec*"",
          ""LuLu*"",
          ""KnockKnock*"",
          ""kav"",
          ""KIS"",
          ""RTProtectionDaemon*"",
          ""Malware*"",
          ""VShieldScanner*"",
          ""WebProtection*"",
          ""webinspectord*"",
          ""McAfee*"",
          ""isecespd*"",
          ""macmnsvc*"",
          ""masvc*"",
          ""kesl*"",
          ""avscan*"",
          ""guard*"",
          ""rtvscand*"",
          ""symcfgd*"",
          ""scmdaemon*"",
          ""symantec*"",
          ""sophos*"",
          ""osquery*"",
          ""elastic-endpoint*""
          ) and
   not (process.args : ""Avast"" and process.args : ""Passwords"")
",medium,['T1518'],{'guard'},184.0,"['grep', 'macos', 'antivirus', 'command', 'firewall']"
e11,Virtual Machine Fingerprinting via Grep,"An adversary may attempt to get detailed information about the operating system and hardware. This rule identifies
common locations used to discover virtual machine hardware by a non-root user. This technique has been used by the Pupy
RAT and other malware.
","process where event.type == ""start"" and
 process.name in (""grep"", ""egrep"") and user.id != ""0"" and
 process.args : (""parallels*"", ""vmware*"", ""virtualbox*"") and process.args : ""Manufacturer*"" and
 not process.parent.executable in (""/Applications/Docker.app/Contents/MacOS/Docker"", ""/usr/libexec/kcare/virt-what"")
",medium,['T1082'],"{'root', 'hardware', 'malware', 'pupy'}",,"['malware', 'virtual', 'adversary', 'hardware', 'root']"
e12,EggShell Backdoor Execution,Identifies the execution of and EggShell Backdoor. EggShell is a known post exploitation tool for macOS and Linux.,"event.category:process and event.type:(start or process_started) and process.name:espl and process.args:eyJkZWJ1ZyI6*
",high,['T1059'],{'eggshell'},185.0,"['eggshell', 'backdoor', 'execution', 'tool', 'exploitation']"
e14,Potential Reverse Shell Activity via Terminal,Identifies the execution of a shell process with suspicious arguments which may be indicative of reverse shell activity.,"process where event.type in (""start"", ""process_started"") and
  process.name in (""sh"", ""bash"", ""zsh"", ""dash"", ""zmodload"") and
  process.args : (""*/dev/tcp/*"", ""*/dev/udp/*"", ""*zsh/net/tcp*"", ""*zsh/net/udp*"") and

  /* noisy FPs */
  not (process.parent.name : ""timeout"" and process.executable : ""/var/lib/docker/overlay*"") and
  not process.command_line : (""*/dev/tcp/sirh_db/*"", ""*/dev/tcp/remoteiot.com/*"", ""*dev/tcp/elk.stag.one/*"", ""*dev/tcp/kafka/*"", ""*/dev/tcp/$0/$1*"", ""*/dev/tcp/127.*"", ""*/dev/udp/127.*"", ""*/dev/tcp/localhost/*"") and
  not process.parent.command_line : ""runc init""
",high,['T1059'],{'shell'},186.0,"['shell', 'execution', 'process', 'suspicious', 'arguments']"
e15,Suspicious JAVA Child Process,"Identifies suspicious child processes of the Java interpreter process. This may indicate an attempt to execute a
malicious JAR file or an exploitation attempt via a JAVA specific vulnerability.
","process where event.type in (""start"", ""process_started"") and
  process.parent.name : ""java"" and
  process.name : (""sh"", ""bash"", ""dash"", ""ksh"", ""tcsh"", ""zsh"", ""curl"", ""wget"")
",medium,['T1059'],,46.0,"['java', 'jar', 'interpreter', 'malicious', 'suspicious']"
e16,Potential JAVA/JNDI Exploitation Attempt,"Identifies an outbound network connection by JAVA to LDAP, RMI or DNS standard ports followed by a suspicious JAVA child
processes. This may indicate an attempt to exploit a JAVA/NDI (Java Naming and Directory Interface) injection vulnerability.
","sequence by host.id with maxspan=1m
 [network where event.action == ""connection_attempted"" and
  process.name : ""java"" and
  /*
     outbound connection attempt to
     LDAP, RMI or DNS standard ports
     by JAVA process
   */
  destination.port in (1389, 389, 1099, 53, 5353)] by process.pid
 [process where event.type == ""start"" and

  /* Suspicious JAVA child process */
  process.parent.name : ""java"" and
   process.name : (""sh"",
                   ""bash"",
                   ""dash"",
                   ""ksh"",
                   ""tcsh"",
                   ""zsh"",
                   ""curl"",
                   ""perl*"",
                   ""python*"",
                   ""ruby*"",
                   ""php*"",
                   ""wget"")] by process.parent.pid
",high,"['T1059', 'T1203']",,126.0,"['java', 'vulnerability', 'ldap', 'ports', 'exploit']"
e17,Hosts File Modified,"The hosts file on endpoints is used to control manual IP address to hostname resolutions. The hosts file is the first
point of lookup for DNS hostname resolution so if adversaries can modify the endpoint hosts file, they can route traffic
to malicious infrastructure. This rule detects modifications to the hosts file on Microsoft Windows, Linux (Ubuntu or
RHEL) and macOS systems.
","any where

  /* file events for creation; file change events are not captured by some of the included sources for linux and so may
     miss this, which is the purpose of the process + command line args logic below */
  (
   event.category == ""file"" and event.type in (""change"", ""creation"") and
     file.path : (""/private/etc/hosts"", ""/etc/hosts"", ""?:\\Windows\\System32\\drivers\\etc\\hosts"")
  )
  or

  /* process events for change targeting linux only */
  (
   event.category == ""process"" and event.type in (""start"") and
     process.name in (""nano"", ""vim"", ""vi"", ""emacs"", ""echo"", ""sed"") and
     process.args : (""/etc/hosts"")
  )
",medium,['T1565'],"{'route', 'dns'}",,"['hosts', 'hostname', 'dns', 'ip', 'endpoints']"
e18,Zoom Meeting with no Passcode,"This rule identifies Zoom meetings that are created without a passcode. Meetings without a passcode are susceptible to
Zoombombing. Zoombombing is carried out by taking advantage of Zoom sessions that are not protected with a passcode.
Zoombombing refers to the unwanted, disruptive intrusion, generally by Internet trolls and hackers, into a video
conference call. In a typical Zoombombing incident, a teleconferencing session is hijacked by the insertion of material
that is lewd, obscene, racist, or antisemitic in nature, typically resulting of the shutdown of the session.
","event.type:creation and event.module:zoom and event.dataset:zoom.webhook and
  event.action:meeting.created and not zoom.meeting.password:*
",medium,['T1190'],"{'zoom', 'obscene'}",187.0,"['zoombombing', 'zoom', 'disruptive', 'teleconferencing', 'meetings']"
e19,Modification of Standard Authentication Module or Configuration,"Adversaries may modify the standard authentication module for persistence via patching the normal authorization process
or modifying the login configuration to allow unauthorized access or elevate privileges.
","event.category:file and event.type:change and
  (file.name:pam_*.so or file.path:(/etc/pam.d/* or /private/etc/pam.d/*)) and
  process.executable:
    (* and
      not
      (
        /bin/yum or
        ""/usr/sbin/pam-auth-update"" or
        /usr/libexec/packagekitd or
        /usr/bin/dpkg or
        /usr/bin/vim or
        /usr/libexec/xpcproxy or
        /usr/bin/bsdtar or
        /usr/local/bin/brew or
        /usr/bin/rsync or
        /usr/bin/yum or
        /var/lib/docker/*/bin/yum or
        /var/lib/docker/*/bin/dpkg or
        ./merged/var/lib/docker/*/bin/dpkg or
        ""/System/Library/PrivateFrameworks/PackageKit.framework/Versions/A/XPCServices/package_script_service.xpc/Contents/MacOS/package_script_service""
      )
    ) and
  not file.path:
         (
           /tmp/snap.rootfs_*/pam_*.so or
           /tmp/newroot/lib/*/pam_*.so or
           /private/var/folders/*/T/com.apple.fileprovider.ArchiveService/TemporaryItems/*/lib/security/pam_*.so or
           /tmp/newroot/usr/lib64/security/pam_*.so
         )
",medium,"['T1543', 'T1556']","{'skidmap', 'privilege'}",188.0,"['authentication', 'authorization', 'persistence', 'unauthorized', 'privileges']"
e20,Bash Shell Profile Modification,"Both ~/.bash_profile and ~/.bashrc are files containing shell commands that are run when Bash is invoked. These files
are executed in a user's context, either interactively or non-interactively, when a user logs in so that their
environment is set correctly. Adversaries may abuse this to establish persistence by executing malicious content
triggered by a user’s shell.
","event.category:file and event.type:change and
  process.name:(* and not (sudo or
                           vim or
                           zsh or
                           env or
                           nano or
                           bash or
                           Terminal or
                           xpcproxy or
                           login or
                           cat or
                           cp or
                           launchctl or
                           java)) and
  not process.executable:(/Applications/* or /private/var/folders/* or /usr/local/*) and
  file.path:(/private/etc/rc.local or
             /etc/rc.local or
             /home/*/.profile or
             /home/*/.profile1 or
             /home/*/.bash_profile or
             /home/*/.bash_profile1 or
             /home/*/.bashrc or
             /Users/*/.bash_profile or
             /Users/*/.zshenv)
",medium,['T1546'],"{'shell', 'sudo'}",159.0,"['bash_profile', 'bashrc', 'bash', 'shell', 'commands']"
e21,SSH Authorized Keys File Modification,"The Secure Shell (SSH) authorized_keys file specifies which users are allowed to log into a server using public key
authentication. Adversaries may modify it to maintain persistence on a victim host by adding their own public key(s).
","event.category:file and event.type:(change or creation) and
 file.name:(""authorized_keys"" or ""authorized_keys2"") and
 not process.executable:
             (/Library/Developer/CommandLineTools/usr/bin/git or
              /usr/local/Cellar/maven/*/libexec/bin/mvn or
              /Library/Java/JavaVirtualMachines/jdk*.jdk/Contents/Home/bin/java or
              /usr/bin/vim or
              /usr/local/Cellar/coreutils/*/bin/gcat or
              /usr/bin/bsdtar or
              /usr/bin/nautilus or
              /usr/bin/scp or
              /usr/bin/touch or
              /var/lib/docker/* or
              /usr/bin/google_guest_agent)
",medium,['T1098'],"{'ssh', 'shell', 'nautilus'}",119.0,"['authorized_keys', 'authentication', 'ssh', 'secure', 'shell']"
e22,Potential Privilege Escalation via Sudoers File Modification,"A sudoers file specifies the commands users or groups can run and from which terminals. Adversaries can take advantage
of these configurations to execute commands as other users or spawn processes with higher privileges.
","event.category:process and event.type:start and process.args:(echo and *NOPASSWD*ALL*)
",high,['T1548'],"{'privilege', 'terminal', 'sudoers', 'sudo'}",127.0,"['sudoers', 'privileges', 'commands', 'adversaries', 'terminals']"
e23,Setuid / Setgid Bit Set via chmod,"An adversary may add the setuid or setgid bit to a file or directory in order to run a file with the privileges of the
owning user or group. An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in
an application with the setuid or setgid bit to get code running in a different user’s context. Additionally,
adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the
future.
","event.category:process AND event.type:(start OR process_started) AND
 process.name:chmod AND process.args:(""+s"" OR ""u+s"" OR /4[0-9]{3}/ OR g+s OR /2[0-9]{3}/) AND
 NOT process.args:
           (
             /.*\/Applications\/VirtualBox.app\/.+/ OR
             /\/usr\/local\/lib\/python.+/ OR
             /\/var\/folders\/.+\/FP.*nstallHelper/ OR
             /\/Library\/Filesystems\/.+/ OR
             /\/usr\/lib\/virtualbox\/.+/ OR
             /\/Library\/Application.*/ OR
             ""/run/postgresql"" OR
             ""/var/crash"" OR
             ""/var/run/postgresql"" OR
             /\/usr\/bin\/.+/ OR /\/usr\/local\/share\/.+/ OR
             /\/Applications\/.+/ OR /\/usr\/libexec\/.+/ OR
             ""/var/metrics"" OR /\/var\/lib\/dpkg\/.+/ OR
             /\/run\/log\/journal\/.*/ OR
             \/Users\/*\/.minikube\/bin\/docker-machine-driver-hyperkit
           ) AND
 NOT process.parent.executable:
           (
             /\/var\/lib\/docker\/.+/ OR
             ""/System/Library/PrivateFrameworks/PackageKit.framework/Versions/A/XPCServices/package_script_service.xpc/Contents/MacOS/package_script_service"" OR
             ""/var/lib/dpkg/info/whoopsie.postinst""
           )
",low,['T1548'],{'privilege'},189.0,"['setuid', 'privileges', 'exploit', 'setgid', 'vulnerability']"
e24,Sudoers File Modification,"A sudoers file specifies the commands that users or groups can run and from which terminals. Adversaries can take
advantage of these configurations to execute commands as other users or spawn processes with higher privileges.
","event.category:file and event.type:change and file.path:(/etc/sudoers* or /private/etc/sudoers*)
",medium,['T1548'],"{'privilege', 'terminal', 'sudoers', 'sudo'}",127.0,"['sudoers', 'privileges', 'commands', 'adversaries', 'terminals']"
e25,Sudo Heap-Based Buffer Overflow Attempt,"Identifies the attempted use of a heap-based buffer overflow vulnerability for the Sudo binary in Unix-like systems
(CVE-2021-3156). Successful exploitation allows an unprivileged user to escalate to the root user.
","event.category:process and event.type:start and
  process.name:(sudo or sudoedit) and
  process.args:(*\\ and (""-i"" or ""-s""))
",high,['T1068'],"{'root', 'cve-2021-3156', 'sudo'}",,"['vulnerability', 'sudo', 'heap', 'unix', 'root']"
e26,Threat Intel Filebeat Module (v8.x) Indicator Match,"This rule is triggered when indicators from the Threat Intel Filebeat module (v8.x) has a match against local file or network observations.
","file.hash.*:* or file.pe.imphash:* or source.ip:* or destination.ip:* or url.full:* or registry.path:*
",critical,,"{'adfind', 'dridex', 'psexec'}",,"['filebeat', 'indicators', 'rule', 'file', 'observations']"
e27,Threat Intel Indicator Match,"This rule is triggered when indicators from the Threat Intel integrations have a match against local file or network observations.
","file.hash.*:* or file.pe.imphash:* or source.ip:* or destination.ip:* or url.full:* or registry.path:*
",critical,,"{'adfind', 'dridex', 'psexec'}",,"['indicators', 'intel', 'rule', 'observations', 'threat']"
e28,Suspicious Network Connection Attempt by Root,"Identifies an outbound network connection attempt followed by a session id change as the root user by the same process
entity. This particular instantiation of a network connection is abnormal and should be investigated as it may indicate
a potential reverse shell activity via a privileged process.
","sequence by process.entity_id with maxspan=1m
[network where event.type == ""start"" and event.action == ""connection_attempted"" and user.id == ""0"" and
    not process.executable : (""/bin/ssh"", ""/sbin/ssh"", ""/usr/lib/systemd/systemd"", ""/usr/sbin/sshd"")]
[process where event.action == ""session_id_change"" and user.id == ""0"" and
    not process.executable : (""/bin/ssh"", ""/sbin/ssh"", ""/usr/lib/systemd/systemd"", ""/usr/sbin/sshd"")]
",medium,"['T1095', 'T1548']","{'netstat', 'sudo', 'network', 'systemd'}",,"['session', 'connection', 'process', 'investigated', 'network']"
e29,Potential DNS Tunneling via Iodine,"Iodine is a tool for tunneling Internet protocol version 4 (IPV4) traffic over the DNS protocol to circumvent firewalls,
network security groups, and network access lists while evading detection.
","event.category:process and event.type:(start or process_started) and process.name:(iodine or iodined)
",high,['T1572'],"{'iodine', 'dns'}",190.0,"['iodine', 'ipv4', 'firewalls', 'tunneling', 'protocol']"
e30,Potential Protocol Tunneling via EarthWorm,"Identifies the execution of the EarthWorm tunneler. Adversaries may tunnel network communications to and from a victim
system within a separate protocol to avoid detection and network filtering, or to enable access to otherwise unreachable
systems.
","process where event.type == ""start"" and
 process.args : ""-s"" and process.args : ""-d"" and process.args : ""rssocks""
",medium,['T1572'],{'earthworm'},191.0,"['tunneler', 'tunnel', 'earthworm', 'adversaries', 'protocol']"
e31,Potential SSH Password Guessing,"Identifies multiple SSH login failures followed by a successful one from the same source address. Adversaries can attempt
to login into multiple users with a common or known password to gain access to accounts.
","sequence by host.id, source.ip, user.name with maxspan=3s
  [authentication where event.action  in (""ssh_login"", ""user_login"") and
   event.outcome == ""failure"" and source.ip != null and source.ip != ""0.0.0.0"" and source.ip != ""::"" ] with runs=2

  [authentication where event.action  in (""ssh_login"", ""user_login"") and
   event.outcome == ""success"" and source.ip != null and source.ip != ""0.0.0.0"" and source.ip != ""::"" ]
",medium,['T1110'],"{'ssh', 'password'}",193.0,"['ssh', 'adversaries', 'login', 'failures', 'password']"
e32,Sensitive Files Compression,"Identifies the use of a compression utility to collect known files containing sensitive information, such as credentials
and system configurations.
","event.category:process and event.type:start and
  process.name:(zip or tar or gzip or hdiutil or 7z) and
  process.args:
    (
      /root/.ssh/id_rsa or
      /root/.ssh/id_rsa.pub or
      /root/.ssh/id_ed25519 or
      /root/.ssh/id_ed25519.pub or
      /root/.ssh/authorized_keys or
      /root/.ssh/authorized_keys2 or
      /root/.ssh/known_hosts or
      /root/.bash_history or
      /etc/hosts or
      /home/*/.ssh/id_rsa or
      /home/*/.ssh/id_rsa.pub or
      /home/*/.ssh/id_ed25519 or
      /home/*/.ssh/id_ed25519.pub or
      /home/*/.ssh/authorized_keys or
      /home/*/.ssh/authorized_keys2 or
      /home/*/.ssh/known_hosts or
      /home/*/.bash_history or
      /root/.aws/credentials or
      /root/.aws/config or
      /home/*/.aws/credentials or
      /home/*/.aws/config or
      /root/.docker/config.json or
      /home/*/.docker/config.json or
      /etc/group or
      /etc/passwd or
      /etc/shadow or
      /etc/gshadow
    )
",medium,"['T1552', 'T1560']","{'tntbotinger', 'teamtnt'}",18.0,"['compression', 'files', 'utility', 'credentials', 'information']"
e33,Potential Linux SSH Brute Force Detected,"Identifies multiple consecutive login failures targeting an user account from the same source address and within a
short time interval. Adversaries will often brute force login attempts across multiple users with a common or known
password, in an attempt to gain access to accounts.
","sequence by host.id, source.ip, user.name with maxspan=10s
  [authentication where event.action  in (""ssh_login"", ""user_login"") and
   event.outcome == ""failure"" and source.ip != null and source.ip != ""0.0.0.0"" and source.ip != ""::"" ] with runs=10
",medium,['T1110'],,192.0,"['brute', 'attempts', 'login', 'adversaries', 'failures']"
e34,Potential SSH Brute Force Detected on Privileged Account,"Identifies multiple consecutive login failures targeting a root user account from the same source address and within a
short time interval. Adversaries will often brute force login attempts on privileged accounts with a common or known
password, in an attempt to gain privileged access to systems.
","sequence by host.id, source.ip with maxspan=10s
  [authentication where event.action  in (""ssh_login"", ""user_login"") and
   event.outcome == ""failure"" and source.ip != null and source.ip != ""0.0.0.0"" and
   source.ip != ""::"" and  user.name in (""*root*"" , ""*admin*"")] with runs=3
",high,['T1110'],{'root'},192.0,"['brute', 'attempts', 'failures', 'root', 'login']"
e35,Potential OpenSSH Backdoor Logging Activity,"Identifies a Secure Shell (SSH) client or server process creating or writing to a known SSH backdoor log file.
Adversaries may modify SSH related binaries for persistence or credential access via patching sensitive functions to
enable unauthorized access or to log SSH credentials for exfiltration.
","file where event.type == ""change"" and process.executable : (""/usr/sbin/sshd"", ""/usr/bin/ssh"") and
  (
    (file.name : ("".*"", ""~*"", ""*~"") and not file.name : ("".cache"", "".viminfo"", "".bash_history"")) or
    file.extension : (""in"", ""out"", ""ini"", ""h"", ""gz"", ""so"", ""sock"", ""sync"", ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"") or
    file.path :
    (
      ""/private/etc/*--"",
      ""/usr/share/*"",
      ""/usr/include/*"",
      ""/usr/local/include/*"",
      ""/private/tmp/*"",
      ""/private/var/tmp/*"",
      ""/usr/tmp/*"",
      ""/usr/share/man/*"",
      ""/usr/local/share/*"",
      ""/usr/lib/*.so.*"",
      ""/private/etc/ssh/.sshd_auth"",
      ""/usr/bin/ssd"",
      ""/private/var/opt/power"",
      ""/private/etc/ssh/ssh_known_hosts"",
      ""/private/var/html/lol"",
      ""/private/var/log/utmp"",
      ""/private/var/lib"",
      ""/var/run/sshd/sshd.pid"",
      ""/var/run/nscd/ns.pid"",
      ""/var/run/udev/ud.pid"",
      ""/var/run/udevd.pid""
    )
  )
",high,"['T1554', 'T1556']","{'ssh', 'shell', 'sshdoor'}",193.0,"['ssh', 'backdoor', 'shell', 'secure', 'unauthorized']"
e36,Attempt to Disable Syslog Service,"Adversaries may attempt to disable the syslog service in an attempt to an attempt to disrupt event logging and evade
detection by security controls.
","event.category:process and event.type:(start or process_started) and
  ((process.name:service and process.args:stop) or
     (process.name:chkconfig and process.args:off) or
     (process.name:systemctl and process.args:(disable or stop or kill)))
  and process.args:(syslog or rsyslog or ""syslog-ng"")
",medium,['T1562'],{'stop'},194.0,"['syslog', 'logging', 'adversaries', 'disable', 'security']"
e37,Base16 or Base32 Encoding/Decoding Activity,Adversaries may encode/decode data in an attempt to evade detection by host- or network-based security controls.,"event.category:process and event.type:(start or process_started) and
  process.name:(base16 or base32 or base32plain or base32hex)
",low,"['T1140', 'T1027']",,195.0,"['security', 'adversaries', 'decode', 'encode', 'evade']"
e38,File made Immutable by Chattr,"Detects a file being made immutable using the chattr binary. Making a file immutable means it cannot be deleted or renamed, no link can be created to this file, most of the file's metadata can not be modified, and the file can not be opened in write mode. Threat actors will commonly utilize this to prevent tampering or modification of their malicious files or any system files they have modified for purposes of persistence (e.g .ssh, /etc/passwd, etc.).
","process where event.type == ""start"" and user.name == ""root"" and process.executable : ""/usr/bin/chattr"" and process.args : (""-*i*"", ""+*i*"") and not process.parent.executable: ""/lib/systemd/systemd""
",medium,['T1222'],{'systemd'},,"['immutable', 'file', 'files', 'tampering', 'malicious']"
e39,Potential Disabling of SELinux,"Identifies potential attempts to disable Security-Enhanced Linux (SELinux), which is a Linux kernel security feature to
support access control policies. Adversaries may disable security tools to avoid possible detection of their tools and
activities.
","event.category:process and event.type:(start or process_started) and process.name:setenforce and process.args:0
",medium,['T1562'],,196.0,"['selinux', 'security', 'linux', 'disable', 'kernel']"
e40,File Deletion via Shred,"Malware or other files dropped or created on a system by an adversary may leave traces behind as to what was done within
a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or
remove them at the end as part of the post-intrusion cleanup process.
","event.category:process and event.type:(start or process_started) and process.name:shred and
  process.args:(""-u"" or ""--remove"" or ""-z"" or ""--zero"")
",low,['T1070'],{'malware'},36.0,"['malware', 'files', 'cleanup', 'traces', 'intrusion']"
e41,File Permission Modification in Writable Directory,"Identifies file permission modifications in common writable directories by a non-root user. Adversaries often drop files
or payloads into a writable directory and change permissions prior to execution.
","event.category:process and event.type:(start or process_started) and
  process.name:(chmod or chown or chattr or chgrp) and
  process.working_directory:(/tmp or /var/tmp or /dev/shm) and
  not user.name:root
",low,['T1222'],{'permission'},2.0,"['permissions', 'permission', 'files', 'directories', 'writable']"
e42,Creation of Hidden Files and Directories via CommandLine,"Users can mark specific files as hidden simply by putting a ""."" as the first character in the file or folder name.
Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion.
This rule looks for hidden files or folders in common writable directories.
","process where event.type in (""start"", ""process_started"") and
  process.working_directory in (""/tmp"", ""/var/tmp"", ""/dev/shm"") and
  process.args regex~ """"""\.[a-z0-9_\-][a-z0-9_\-\.]{1,254}"""""" and
  not process.name in (""ls"", ""find"", ""grep"")
",medium,['T1564'],{'hidden'},197.0,"['hidden', 'hide', 'files', 'folders', 'folder']"
e43,Creation of Hidden Shared Object File,"Identifies the creation of a hidden shared object (.so) file. Users can mark specific files as hidden simply by putting a ""."" as the first character in the file or folder name.
Adversaries can use this to their advantage to hide files and folders on the system for persistence and defense evasion.
","file where event.action : ""creation"" and file.extension == ""so"" and file.name : "".*.so""
",medium,['T1564'],{'hidden'},197.0,"['files', 'file', 'hidden', 'folders', 'folder']"
e44,Kernel Module Removal,"Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the
functionality of the kernel without the need to reboot the system. This rule identifies attempts to remove a kernel
module.
","event.category:process and event.type:(start or process_started) and
  process.args:((rmmod and sudo) or (modprobe and sudo and (""--remove"" or ""-r"")))
",high,"['T1547', 'T1562']",{'sudo'},124.0,"['modules', 'kernel', 'module', 'remove', 'reboot']"
e45,System Log File Deletion,"Identifies the deletion of sensitive Linux system logs. This may indicate an attempt to evade detection or destroy
forensic evidence on a system.
","file where event.type == ""deletion"" and
  file.path :
    (
    ""/var/run/utmp"",
    ""/var/log/wtmp"",
    ""/var/log/btmp"",
    ""/var/log/lastlog"",
    ""/var/log/faillog"",
    ""/var/log/syslog"",
    ""/var/log/messages"",
    ""/var/log/secure"",
    ""/var/log/auth.log""
    ) and
    not process.name : (""gzip"")
",medium,['T1070'],{'forensic'},85.0,"['logs', 'forensic', 'detection', 'linux', 'deletion']"
e46,Enumeration of Kernel Modules,"Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They
extend the functionality of the kernel without the need to reboot the system. This identifies attempts to enumerate
information about a kernel module.
","event.category:process and event.type:(start or process_started) and
  process.args:(kmod and list and sudo or sudo and (depmod or lsmod or modinfo))
",medium,['T1082'],{'sudo'},124.0,"['lkms', 'modules', 'kernel', 'module', 'loadable']"
e47,Hping Process Activity,"Hping ran on a Linux host. Hping is a FOSS command-line packet analyzer and has the ability to construct network packets
for a wide variety of network security testing applications, including scanning and firewall auditing.
","event.category:process and event.type:(start or process_started) and process.name:(hping or hping2 or hping3)
",high,['T1082'],,198.0,"['hping', 'scanning', 'linux', 'analyzer', 'packets']"
e48,Nping Process Activity,"Nping ran on a Linux host. Nping is part of the Nmap tool suite and has the ability to construct raw packets for a wide
variety of security testing applications, including denial of service testing.
","event.category:process and event.type:(start or process_started) and process.name:nping
",medium,['T1046'],"{'nmap', 'nping'}",123.0,"['nping', 'nmap', 'packets', 'linux', 'testing']"
e49,Virtual Machine Fingerprinting,"An adversary may attempt to get detailed information about the operating system and hardware. This rule identifies
common locations used to discover virtual machine hardware by a non-root user. This technique has been used by the Pupy
RAT and other malware.
","event.category:process and event.type:(start or process_started) and
  process.args:(""/sys/class/dmi/id/bios_version"" or
                ""/sys/class/dmi/id/product_name"" or
                ""/sys/class/dmi/id/chassis_vendor"" or
                ""/proc/scsi/scsi"" or
                ""/proc/ide/hd0/model"") and
  not user.name:root
",high,['T1082'],"{'root', 'hardware', 'malware', 'pupy'}",,"['malware', 'virtual', 'adversary', 'hardware', 'root']"
e50,Abnormal Process ID or Lock File Created,"Identifies the creation of a Process ID (PID), lock or reboot file created in temporary file storage paradigm (tmpfs)
directory /var/run. On Linux, the PID files typically hold the process ID to track previous copies running and manage
other tasks. Certain Linux malware use the /var/run directory for holding data, executables and other tasks, disguising
itself or these files as legitimate PID files.
","/* add file size filters when data is available */
file where event.type == ""creation"" and user.id == ""0"" and
    file.path regex~ """"""/var/run/\w+\.(pid|lock|reboot)"""""" and file.extension in (""pid"",""lock"",""reboot"") and

    /* handle common legitimate files */

    not file.name in (
    ""auditd.pid"",
    ""python*"",
    ""apport.pid"",
    ""apport.lock"",
    ""kworker*"",
    ""gdm3.pid"",
    ""sshd.pid"",
    ""acpid.pid"",
    ""unattended-upgrades.lock"",
    ""unattended-upgrades.pid"",
    ""cmd.pid"",
    ""cron*.pid"",
    ""yum.pid"",
    ""netconfig.pid"",
    ""docker.pid"",
    ""atd.pid"",
    ""lfd.pid"",
    ""atop.pid"",
    ""nginx.pid"",
    ""dhclient.pid"",
    ""smtpd.pid"",
    ""stunnel.pid""
    )
",medium,['T1106'],"{'malware', 'bpfdoor', 'entropy'}",,"['tmpfs', 'process', 'malware', 'pid', 'executables']"
e51,Netcat Network Activity,"A netcat process is engaging in network activity on a Linux host. Netcat is often used as a persistence mechanism by
exporting a reverse shell or by serving a shell on a listening port. Netcat is also sometimes used for data
exfiltration.
","sequence by process.entity_id
  [process where (process.name == ""nc"" or process.name == ""ncat"" or process.name == ""netcat"" or
                  process.name == ""netcat.openbsd"" or process.name == ""netcat.traditional"") and
     event.type == ""start""]
  [network where (process.name == ""nc"" or process.name == ""ncat"" or process.name == ""netcat"" or
                  process.name == ""netcat.openbsd"" or process.name == ""netcat.traditional"")]
",medium,['T1059'],{'shell'},199.0,"['netcat', 'shell', 'process', 'linux', 'port']"
e52,Interactive Terminal Spawned via Perl,"Identifies when a terminal (tty) is spawned via Perl. Attackers may upgrade a simple reverse shell to a fully
interactive tty after obtaining initial access to a host.
","event.category:process and event.type:(start or process_started) and process.name:perl and
  process.args:(""exec \""/bin/sh\"";"" or ""exec \""/bin/dash\"";"" or ""exec \""/bin/bash\"";"")
",high,['T1059'],"{'shell', 'terminal'}",110.0,"['perl', 'tty', 'terminal', 'shell', 'spawned']"
e53,Process Started from Process ID (PID) File,"Identifies a new process starting from a process ID (PID), lock or reboot file within the temporary file storage
paradigm (tmpfs) directory /var/run directory. On Linux, the PID files typically hold the process ID to track previous
copies running and manage other tasks. Certain Linux malware use the /var/run directory for holding data, executables
and other tasks, disguising itself or these files as legitimate PID files.
","process where event.type == ""start"" and user.id == ""0"" and process.executable regex~ """"""/var/run/\w+\.(pid|lock|reboot)""""""
",high,['T1059'],"{'malware', 'bpfdoor'}",,"['tmpfs', 'process', 'malware', 'pid', 'executables']"
e54,Binary Executed from Shared Memory Directory,"Identifies the execution of a binary by root in Linux shared memory directories: (/dev/shm/, /run/shm/, /var/run/,
/var/lock/). This activity is to be considered highly abnormal and should be investigated. Threat actors have placed
executables used for persistence on high-uptime servers in these directories as system backdoors.
","process where event.type == ""start"" and
    event.action == ""exec"" and user.name == ""root"" and
    process.executable : (
        ""/dev/shm/*"",
        ""/run/shm/*"",
        ""/var/run/*"",
        ""/var/lock/*""
    ) and
    not process.executable : ( ""/var/run/docker/*"")
",high,['T1059'],"{'root', 'bpfdoor'}",,"['executables', 'execution', 'backdoors', 'root', 'binary']"
e55,Interactive Terminal Spawned via Python,"Identifies when a terminal (tty) is spawned via Python. Attackers may upgrade a simple reverse shell to a fully
interactive tty after obtaining initial access to a host.
","event.category:process and event.type:(start or process_started) and
  process.name:python* and
  process.args:(""import pty; pty.spawn(\""/bin/sh\"")"" or
                ""import pty; pty.spawn(\""/bin/dash\"")"" or
                ""import pty; pty.spawn(\""/bin/bash\"")"")
",high,['T1059'],"{'shell', 'terminal'}",110.0,"['tty', 'terminal', 'shell', 'python', 'spawned']"
e56,Linux Restricted Shell Breakout via  Linux Binary(s),"Identifies Linux binary(s) abuse to breakout of restricted shells or environments by spawning an interactive system
shell. The linux utility(s) activity of spawning shell is not a standard use of the binary for a user or system
administrator. It may indicates an attempt to improve the capabilities or stability of an adversary access.
","process where event.type == ""start"" and

    /* launch shells from unusual process */
    (process.name == ""capsh"" and process.args == ""--"") or

    /* launching shells from unusual parents or parent+arg combos */
    (process.name in (""bash"", ""sh"", ""dash"",""ash"") and
        (process.parent.name in (""byebug"",""git"",""ftp"",""strace"")) or

        /* shells specified in parent args */
        /* nice rule is broken in 8.2 */
        (process.parent.args in (""/bin/sh"", ""/bin/bash"", ""/bin/dash"", ""/bin/ash"", ""sh"", ""bash"", ""dash"", ""ash"") and
            (
             (process.parent.name == ""nice"") or
             (process.parent.name == ""cpulimit"" and process.parent.args == ""-f"") or
             (process.parent.name == ""find"" and process.parent.args == ""-exec"" and process.parent.args == "";"") or
             (process.parent.name == ""flock"" and process.parent.args == ""-u"" and process.parent.args == ""/"")
            )
        ) or

         /* shells specified in args */
         (process.args in (""/bin/sh"", ""/bin/bash"", ""/bin/dash"", ""/bin/ash"", ""sh"", ""bash"", ""dash"", ""ash"") and
            (process.parent.name == ""crash"" and process.parent.args == ""-h"") or
            (process.name == ""sensible-pager"" and process.parent.name in (""apt"", ""apt-get"") and process.parent.args == ""changelog"")
            /* scope to include more sensible-pager invoked shells with different parent process to reduce noise and remove false positives */
          )
    ) or
    (process.name == ""busybox"" and process.args_count == 2 and process.args in (""/bin/sh"", ""/bin/bash"", ""/bin/dash"", ""/bin/ash"", ""sh"", ""bash"", ""dash"", ""ash"") )or
    (process.name == ""env"" and process.args_count == 2 and process.args in (""/bin/sh"", ""/bin/bash"", ""/bin/dash"", ""/bin/ash"", ""sh"", ""bash"", ""dash"", ""ash"")) or
    (process.parent.name in (""vi"", ""vim"") and process.parent.args == ""-c"" and process.parent.args in ("":!/bin/bash"", "":!/bin/sh"", "":!bash"", "":!sh"")) or
    (process.parent.name in (""c89"",""c99"", ""gcc"") and process.parent.args in (""sh,-s"", ""bash,-s"", ""dash,-s"", ""ash,-s"", ""/bin/sh,-s"", ""/bin/bash,-s"", ""/bin/dash,-s"", ""/bin/ash,-s"") and process.parent.args == ""-wrapper"") or
    (process.parent.name == ""expect"" and process.parent.args == ""-c"" and process.parent.args in (""spawn /bin/sh;interact"", ""spawn /bin/bash;interact"", ""spawn /bin/dash;interact"", ""spawn sh;interact"", ""spawn bash;interact"", ""spawn dash;interact"")) or
    (process.parent.name == ""mysql"" and process.parent.args == ""-e"" and process.parent.args in (""\\!*sh"", ""\\!*bash"", ""\\!*dash"", ""\\!*/bin/sh"", ""\\!*/bin/bash"", ""\\!*/bin/dash"")) or
    (process.parent.name == ""ssh"" and process.parent.args == ""-o"" and process.parent.args in (""ProxyCommand=;sh 0<&2 1>&2"", ""ProxyCommand=;bash 0<&2 1>&2"", ""ProxyCommand=;dash 0<&2 1>&2"", ""ProxyCommand=;/bin/sh 0<&2 1>&2"", ""ProxyCommand=;/bin/bash 0<&2 1>&2"", ""ProxyCommand=;/bin/dash 0<&2 1>&2"")) or
    (process.parent.name in (""nawk"", ""mawk"", ""awk"", ""gawk"") and process.parent.args : ""BEGIN {system(*)}"")
",medium,['T1059'],"{'combos', 'shell', 'stop', 'guard', 'ftp'}",,"['shell', 'shells', 'linux', 'binary', 'spawning']"
e57,BPF filter applied using TC,"Detects when the tc (transmission control) binary is utilized to set a BPF (Berkeley Packet Filter) on a network interface. Tc is used to configure Traffic Control in the Linux kernel. It can shape, schedule, police and drop traffic. A threat actor can utilize tc to set a bpf filter on an interface for the purpose of manipulating the incoming traffic. This technique is not at all common and should indicate abnormal, suspicious or malicious activity.
","process where event.type != ""end"" and process.executable : ""/usr/sbin/tc"" and process.args : ""filter"" and process.args : ""add"" and process.args : ""bpf"" and not process.parent.executable: ""/usr/sbin/libvirtd""
",high,['T1059'],,200.0,"['tc', 'packet', 'bpf', 'traffic', 'transmission']"
e58,High Number of Process Terminations,"This rule identifies a high number (10) of process terminations via pkill from the same host within a
short time period.
","event.category:process and event.type:start and process.name:""pkill"" and process.args:""-f""
",medium,['T1489'],{'stop'},201.0,"['pkill', 'terminations', 'process', 'rule', 'short']"
e59,Connection to External Network via Telnet,"Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet
network connections to publicly routable IP addresses.
","sequence by process.entity_id
  [process where process.name == ""telnet"" and event.type == ""start""]
  [network where process.name == ""telnet"" and
    not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
                                  ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"",
                                  ""192.0.0.171/32"", ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"",
                                  ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"", ""192.175.48.0/24"",
                                  ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
                                  ""FE80::/10"", ""FF00::/8"")]
",medium,['T1021'],{'network'},202.0,"['telnet', 'ip', 'command', 'remote', 'network']"
e60,Connection to Internal Network via Telnet,"Telnet provides a command line interface for communication with a remote device or server. This rule identifies Telnet
network connections to non-publicly routable IP addresses.
","sequence by process.entity_id
  [process where process.name == ""telnet"" and event.type == ""start""]
  [network where process.name == ""telnet"" and
    cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
                              ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"",
                              ""192.0.0.171/32"", ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"",
                              ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"", ""192.175.48.0/24"",
                              ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
                              ""FE80::/10"", ""FF00::/8"")]
",medium,['T1021'],{'network'},202.0,"['telnet', 'ip', 'remote', 'command', 'network']"
e61,Chkconfig Service Add,"Detects the use of the chkconfig binary to manually add a service for management by chkconfig. Threat actors may utilize this technique to maintain persistence on a system. When a new service is added, chkconfig ensures that the service has either a start or a kill entry in every runlevel and when the system is rebooted the service file added will run providing long-term persistence.
","process where event.type == ""start"" and
   (process.executable : ""/usr/sbin/chkconfig"" and process.args : ""--add"") or
   (process.args : ""*chkconfig"" and process.args : ""--add"")
",medium,['T1037'],{'lightning framework'},,"['chkconfig', 'persistence', 'maintain', 'service', 'threat']"
e62,Modification of OpenSSH Binaries,"Adversaries may modify SSH related binaries for persistence or credential access by patching sensitive functions to
enable unauthorized access or by logging SSH credentials for exfiltration.
","event.category:file and event.type:change and
 process.name:* and
 (file.path:(/usr/sbin/sshd or /usr/bin/ssh or /usr/bin/sftp or /usr/bin/scp) or file.name:libkeyutils.so) and
 not process.name:(""dpkg"" or ""yum"" or ""dnf"" or ""dnf-automatic"")
",medium,"['T1543', 'T1556']",{'ssh'},193.0,"['ssh', 'binaries', 'unauthorized', 'adversaries', 'credentials']"
e63,Dynamic Linker Copy,"Detects the copying of the Linux dynamic loader binary and subsequent file creation for the purpose of creating a backup copy. This technique was seen recently being utilized by Linux malware prior to patching the dynamic loader in order to inject and preload a malicious shared object file. This activity should never occur and if it does then it should be considered highly suspicious or malicious.
","sequence by process.entity_id with maxspan=1m
[process where event.type == ""start"" and process.name : (""cp"", ""rsync"") and process.args : (""/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2"", ""/etc/ld.so.preload"")]
[file where event.action == ""creation"" and file.extension == ""so""]
",high,['T1574'],"{'malware', 'orbit'}",54.0,"['malware', 'loader', 'malicious', 'preload', 'suspicious']"
e64,Suspicious File Creation in /etc for Persistence,"Detects the manual creation of files in specific etc directories, via user root, used by Linux malware to persist and elevate privileges on compromised systems. File creation in these directories should not be entirely common and could indicate a malicious binary or script installing persistence for long term access.
","file where event.action == ""creation"" and user.name == ""root"" and file.path : (""/etc/ld.so.conf.d/*"", ""/etc/cron.d/*"", ""/etc/sudoers.d/*"", ""/etc/rc.d/init.d/*"", ""/etc/systemd/system/*"") and not process.executable : (""*/dpkg"", ""*/yum"", ""*/apt"", ""*/dnf"", ""*/systemd"")
",medium,"['T1053', 'T1574', 'T1543', 'T1548', 'T1037']","{'lightning framework', 'sudo', 'orbit', 'systemd', 'malware'}",,"['malware', 'directories', 'files', 'file', 'malicious']"
e65,Kernel module load via insmod,"Detects the use of the insmod binary to load a Linux kernel object file. Threat actors can use this binary, given they have root privileges, to load a rootkit on a system providing them with complete control and the ability to hide from security products. Manually loading a kernel module in this manner should not be at all common and can indicate suspcious or malicious behavior.
","process where event.type == ""start"" and process.executable : ""/usr/sbin/insmod"" and process.args : ""*.ko""
",medium,['T1547'],{'rootkit'},320.0,"['rootkit', 'insmod', 'kernel', 'malicious', 'module']"
e66,Persistence via KDE AutoStart Script or Desktop File Modification,"Identifies the creation or modification of a K Desktop Environment (KDE) AutoStart script or desktop file that will
execute upon each user logon. Adversaries may abuse this method for persistence.
","file where event.type != ""deletion"" and
  file.extension in (""sh"", ""desktop"") and
  file.path :
    (
      ""/home/*/.config/autostart/*"", ""/root/.config/autostart/*"",
      ""/home/*/.kde/Autostart/*"", ""/root/.kde/Autostart/*"",
      ""/home/*/.kde4/Autostart/*"", ""/root/.kde4/Autostart/*"",
      ""/home/*/.kde/share/autostart/*"", ""/root/.kde/share/autostart/*"",
      ""/home/*/.kde4/share/autostart/*"", ""/root/.kde4/share/autostart/*"",
      ""/home/*/.local/share/autostart/*"", ""/root/.local/share/autostart/*"",
      ""/home/*/.config/autostart-scripts/*"", ""/root/.config/autostart-scripts/*"",
      ""/etc/xdg/autostart/*"", ""/usr/share/autostart/*""
    ) and
    not process.name in (""yum"", ""dpkg"", ""install"", ""dnf"", ""teams"", ""yum-cron"", ""dnf-automatic"")
",medium,['T1547'],"{'electrorat', 'finspy'}",203.0,"['kde', 'autostart', 'persistence', 'desktop', 'logon']"
e67,Potential Shell via Web Server,"Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access.","event.category:process and event.type:(start or process_started) and
process.name:(bash or dash or ash or zsh or ""python*"" or ""perl*"" or ""php*"") and
process.parent.name:(""apache"" or ""nginx"" or ""www"" or ""apache2"" or ""httpd"" or ""www-data"")
",medium,['T1505'],"{'shell', 'stop'}",186.0,"['vulnerability', 'shell', 'suspicious', 'commands', 'server']"
e68,Modification of Dynamic Linker Preload Shared Object,"Identifies modification of the dynamic linker preload shared object (ld.so.preload). Adversaries may execute malicious
payloads by hijacking the dynamic linker used to load libraries.
","event.category:file and not event.type:deletion and file.path:/etc/ld.so.preload
",medium,['T1574'],{'rocke'},164.0,"['preload', 'malicious', 'linker', 'ld', 'libraries']"
e69,Potential Privilege Escalation via PKEXEC,"Identifies an attempt to exploit a local privilege escalation in polkit pkexec (CVE-2021-4034) via unsecure environment
variable injection. Successful exploitation allows an unprivileged user to escalate to the root user.
","file where file.path : ""/*GCONV_PATH*""
",high,"['T1574', 'T1068']","{'interception', 'cve-2021-4034', 'privilege'}",,"['pkexec', 'polkit', 'exploit', 'privilege', 'unsecure']"
e70,Shadow File Read via Command Line Utilities,"Identifies the manual reading of the /etc/shadow file via the commandline using standard system utilities.
Threat actors will attempt to read this file, after elevating their privileges to root,
in order to gain valid credentials they can utilize to move laterally undetected and access additional resources.
","process where event.type == ""start"" and event.action == ""exec"" and user.name == ""root"" and
process.args : ""/etc/shadow"" and
not process.executable: (""/usr/bin/find"", ""/usr/bin/cmp"", ""/bin/ls"", ""/usr/sbin/restorecon"", ""/usr/bin/uniq"") and
not process.parent.executable: ""/bin/dracut""
",medium,['T1068'],"{'root', 'privilege'}",74.0,"['shadow', 'file', 'privileges', 'root', 'threat']"
e71,Namespace Manipulation Using Unshare,"Identifies  suspicious usage of unshare to manipulate system namespaces. Unshare can be utilized to escalate privileges
or escape container security boundaries. Threat actors have utilized this binary to allow themselves to escape to the
host and access other resources or escalate privileges.
","process where event.type == ""start"" and event.action == ""exec"" and
process.executable: ""/usr/bin/unshare"" and
not process.parent.executable: (""/usr/bin/udevadm"", ""*/lib/systemd/systemd-udevd"", ""/usr/bin/unshare"") and
not process.args : ""/usr/bin/snap""
",medium,['T1543'],"{'cve-2022-0185', 'privilege', 'kubernetes', 'systemd'}",,"['unshare', 'security', 'namespaces', 'threat', 'privileges']"
e72,Access of Stored Browser Credentials,"Identifies the execution of a process with arguments pointing to known browser files that store passwords and cookies.
Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
","process where event.type in (""start"", ""process_started"") and
  process.args :
    (
      ""/Users/*/Library/Application Support/Google/Chrome/Default/Login Data"",
      ""/Users/*/Library/Application Support/Google/Chrome/Default/Cookies"",
      ""/Users/*/Library/Application Support/Google/Chrome/Profile*/Cookies"",
      ""/Users/*/Library/Cookies*"",
      ""/Users/*/Library/Application Support/Firefox/Profiles/*.default/cookies.sqlite"",
      ""/Users/*/Library/Application Support/Firefox/Profiles/*.default/key*.db"",
      ""/Users/*/Library/Application Support/Firefox/Profiles/*.default/logins.json"",
      ""Login Data"",
      ""Cookies.binarycookies"",
      ""key4.db"",
      ""key3.db"",
      ""logins.json"",
      ""cookies.sqlite""
    )
",high,"['T1539', 'T1555']","{'calisto', 'browser'}",95.0,"['browsers', 'credentials', 'browser', 'execution', 'adversaries']"
e73,Access to Keychain Credentials Directories,"Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way
for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords,
websites, secure notes and certificates.
","process where event.type in (""start"", ""process_started"") and
  process.args :
    (
      ""/Users/*/Library/Keychains/*"",
      ""/Library/Keychains/*"",
      ""/Network/Library/Keychains/*"",
      ""System.keychain"",
      ""login.keychain-db"",
      ""login.keychain""
    ) and
    not process.args : (""find-certificate"",
                      ""add-trusted-cert"",
                      ""set-keychain-settings"",
                      ""delete-certificate"",
                      ""/Users/*/Library/Keychains/openvpn.keychain-db"",
                      ""show-keychain-info"",
                      ""lock-keychain"",
                      ""set-key-partition-list"",
                      ""import"",
                      ""find-identity"") and
    not process.parent.executable :
      (
        ""/Applications/OpenVPN Connect/OpenVPN Connect.app/Contents/MacOS/OpenVPN Connect"",
        ""/Applications/Microsoft Defender.app/Contents/MacOS/wdavdaemon_enterprise.app/Contents/MacOS/wdavdaemon_enterprise"",
        ""/opt/jc/bin/jumpcloud-agent""
      ) and
    not process.executable : ""/opt/jc/bin/jumpcloud-agent""
",high,['T1555'],"{'calisto', 'password'}",204.0,"['keychains', 'keychain', 'passwords', 'credentials', 'macos']"
e74,Dumping Account Hashes via Built-In Commands,"Identifies the execution of macOS built-in commands used to dump user account hashes. Adversaries may attempt to dump
credentials to obtain account login information in the form of a hash. These hashes can be cracked or leveraged for
lateral movement.
","event.category:process and event.type:start and
 process.name:(defaults or mkpassdb) and process.args:(ShadowHashData or ""-dump"")
",high,['T1003'],,205.0,"['hashes', 'hash', 'macos', 'dump', 'credentials']"
e75,Dumping of Keychain Content via Security Command,"Adversaries may dump the content of the keychain storage data from a system to acquire credentials. Keychains are the
built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi
and website passwords, secure notes, certificates, and Kerberos.
","process where event.type in (""start"", ""process_started"") and process.args : ""dump-keychain"" and process.args : ""-d""
",high,['T1555'],"{'kerberos', 'password'}",204.0,"['keychains', 'keychain', 'passwords', 'credentials', 'kerberos']"
e76,Kerberos Cached Credentials Dumping,"Identifies the use of the Kerberos credential cache (kcc) utility to dump locally cached Kerberos tickets. Adversaries
may attempt to dump credential material in the form of tickets that can be leveraged for lateral movement.
","event.category:process and event.type:(start or process_started) and
  process.name:kcc and
  process.args:copy_cred_cache
",high,"['T1558', 'T1003']","{'kerberos', 'empyre'}",,"['kerberos', 'kcc', 'credential', 'cache', 'cached']"
e77,Keychain Password Retrieval via Command Line,"Adversaries may collect keychain storage data from a system to in order to acquire credentials. Keychains are the
built-in way for macOS to keep track of users' passwords and credentials for many services and features, including Wi-Fi
and website passwords, secure notes, certificates, and Kerberos.
","process where event.type == ""start"" and
 process.name : ""security"" and process.args : ""-wa"" and process.args : (""find-generic-password"", ""find-internet-password"") and
 process.args : (""Chrome*"", ""Chromium"", ""Opera"", ""Safari*"", ""Brave"", ""Microsoft Edge"", ""Edge"", ""Firefox*"") and
 not process.parent.executable : ""/Applications/Keeper Password Manager.app/Contents/Frameworks/Keeper Password Manager Helper*/Contents/MacOS/Keeper Password Manager Helper*""
",high,['T1555'],"{'kerberos', 'electrorat', 'password'}",204.0,"['keychains', 'keychain', 'passwords', 'kerberos', 'credentials']"
e78,WebProxy Settings Modification,"Identifies the use of the built-in networksetup command to configure webproxy settings. This may indicate an attempt to
hijack web browser traffic for credential access via traffic sniffing or redirection.
","event.category : process and event.type : start and
 process.name : networksetup and process.args : ((""-setwebproxy"" or ""-setsecurewebproxy"" or ""-setautoproxyurl"") and not (Bluetooth or off)) and
 not process.parent.executable : (""/Library/PrivilegedHelperTools/com.80pct.FreedomHelper"" or
                                  ""/Applications/Fiddler Everywhere.app/Contents/Resources/app/out/WebServer/Fiddler.WebUi"" or
                                  ""/usr/libexec/xpcproxy"")
",medium,['T1539'],"{'network', 'browser'}",206.0,"['webproxy', 'networksetup', 'browser', 'traffic', 'web']"
e79,Potential macOS SSH Brute Force Detected,"Identifies a high number (20) of macOS SSH KeyGen process executions from the same host. An adversary may attempt a
brute force attack to obtain unauthorized access to user accounts.
","event.category:process and event.type:start and process.name:""sshd-keygen-wrapper"" and process.parent.name:launchd
",medium,['T1110'],{'ssh'},193.0,"['keygen', 'ssh', 'macos', 'unauthorized', 'attack']"
e80,Prompt for Credentials with OSASCRIPT,"Identifies the use of osascript to execute scripts via standard input that may prompt a user with a rogue dialog for
credentials.
","process where event.type in (""start"", ""process_started"") and process.name : ""osascript"" and
 process.command_line : ""osascript*display dialog*password*""
",high,['T1056'],"{'osascript', 'empyre', 'rogue'}",,"['osascript', 'scripts', 'dialog', 'prompt', 'credentials']"
e81,SystemKey Access via Command Line,"Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and
features, including Wi-Fi and website passwords, secure notes, certificates, and Kerberos. Adversaries may collect the
keychain storage data from a system to acquire credentials.
","event.category:process and event.type:(start or process_started) and
  process.args:(""/private/var/db/SystemKey"" or ""/var/db/SystemKey"")
",high,['T1555'],"{'kerberos', 'password', 'lazagne'}",,"['keychains', 'keychain', 'passwords', 'kerberos', 'macos']"
e82,SoftwareUpdate Preferences Modification,"Identifies changes to the SoftwareUpdate preferences using the built-in defaults command. Adversaries may abuse this in
an attempt to disable security updates.
","event.category:process and event.type:(start or process_started) and
 process.name:defaults and
 process.args:(write and ""-bool"" and (com.apple.SoftwareUpdate or /Library/Preferences/com.apple.SoftwareUpdate.plist) and not (TRUE or true))
",medium,['T1562'],,207.0,"['softwareupdate', 'updates', 'preferences', 'defaults', 'changes']"
e83,Attempt to Remove File Quarantine Attribute,"Identifies a potential Gatekeeper bypass. In macOS, when applications or programs are downloaded from the internet,
there is a quarantine flag set on the file. This attribute is read by Apple's Gatekeeper defense program at execution
time. An adversary may disable this attribute to evade defenses.
","process where event.type in (""start"", ""process_started"") and
  process.name : ""xattr"" and
  (
    (process.args : ""com.apple.quarantine"" and process.args : (""-d"", ""-w"")) or
    (process.args : ""-c"") or
    (process.command_line : (""/bin/bash -c xattr -c *"", ""/bin/zsh -c xattr -c *"", ""/bin/sh -c xattr -c *""))
  ) and not process.args_count > 12
",medium,['T1562'],{'oceanlotus'},168.0,"['quarantine', 'macos', 'gatekeeper', 'file', 'adversary']"
e84,Attempt to Disable Gatekeeper,"Detects attempts to disable Gatekeeper on macOS. Gatekeeper is a security feature that's designed to ensure that only
trusted software is run. Adversaries may attempt to disable Gatekeeper before executing malicious code.
","event.category:process and event.type:(start or process_started) and
  process.args:(spctl and ""--master-disable"")
",medium,['T1553'],{'shlayer'},,"['gatekeeper', 'macos', 'security', 'malicious', 'adversaries']"
e85,Attempt to Install Root Certificate,"Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to their command
and control servers. Root certificates are used in public key cryptography to identify a root certificate authority
(CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of
trust that have been signed by the root certificate.
","event.category:process and event.type:(start or process_started) and
  process.name:security and process.args:""add-trusted-cert"" and
  not process.parent.executable:(""/Library/Bitdefender/AVP/product/bin/BDCoreIssues"" or ""/Applications/Bitdefender/SecurityNetworkInstallerApp.app/Contents/MacOS/SecurityNetworkInstallerApp""
)
",medium,['T1553'],{'root'},138.0,"['certificates', 'root', 'certificate', 'trust', 'adversaries']"
e86,Modification of Environment Variable via Launchctl,"Identifies modifications to an environment variable using the built-in launchctl command. Adversaries may execute their
own malicious payloads by hijacking certain environment variables to load arbitrary libraries or bypass certain
restrictions.
","event.category:process and event.type:start and
  process.name:launchctl and
  process.args:(setenv and not (JAVA*_HOME or
                                RUNTIME_JAVA_HOME or
                                DBUS_LAUNCHD_SESSION_BUS_SOCKET or
                                ANT_HOME or
                                LG_WEBOS_TV_SDK_HOME or
                                WEBOS_CLI_TV or
                                EDEN_ENV)
                ) and
  not process.parent.executable:(""/Applications/NoMachine.app/Contents/Frameworks/bin/nxserver.bin"" or
                                 ""/usr/local/bin/kr"" or
                                 ""/Applications/NoMachine.app/Contents/Frameworks/bin/nxserver.bin"" or
                                 ""/Applications/IntelliJ IDEA CE.app/Contents/jbr/Contents/Home/lib/jspawnhelper"") and
  not process.args : ""*.vmoptions""
",medium,['T1574'],{'interception'},,"['launchctl', 'malicious', 'adversaries', 'environment', 'payloads']"
e87,Potential Privacy Control Bypass via TCCDB Modification,"Identifies the use of sqlite3 to directly modify the Transparency, Consent, and Control (TCC) SQLite database. This may
indicate an attempt to bypass macOS privacy controls, including access to sensitive resources like the system camera,
microphone, address book, and calendar.
","process where event.type in (""start"", ""process_started"") and process.name : ""sqlite*"" and
 process.args : ""/*/Application Support/com.apple.TCC/TCC.db"" and
 not process.parent.executable : ""/Library/Bitdefender/AVP/product/bin/*""
",medium,['T1562'],"{'cve-2020-9934', 'calendar'}",208.0,"['sqlite3', 'sqlite', 'tcc', 'database', 'privacy']"
e88,Potential Privacy Control Bypass via Localhost Secure Copy,"Identifies use of the Secure Copy Protocol (SCP) to copy files locally by abusing the auto addition of the Secure Shell
Daemon (sshd) to the authorized application list for Full Disk Access. This may indicate attempts to bypass macOS
privacy controls to access sensitive files.
","process where event.type in (""start"", ""process_started"") and
 process.name:""scp"" and
 process.args:""StrictHostKeyChecking=no"" and
 process.command_line:(""scp *localhost:/*"", ""scp *127.0.0.1:/*"") and
 not process.args:""vagrant@*127.0.0.1*""
",high,['T1548'],"{'ssh', 'xcsset'}",168.0,"['scp', 'sshd', 'macos', 'secure', 'privacy']"
e89,Modification of Safari Settings via Defaults Command,"Identifies changes to the Safari configuration using the built-in defaults command. Adversaries may attempt to enable or
disable certain Safari settings, such as enabling JavaScript from Apple Events to ease in the hijacking of the users
browser.
","event.category:process and event.type:start and
  process.name:defaults and process.args:
    (com.apple.Safari and write and not
      (
      UniversalSearchEnabled or
      SuppressSearchSuggestions or
      WebKitTabToLinksPreferenceKey or
      ShowFullURLInSmartSearchField or
      com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks
      )
    )
",medium,['T1562'],{'browser'},209.0,"['safari', 'browser', 'defaults', 'settings', 'disable']"
e90,Potential Microsoft Office Sandbox Evasion,"Identifies the creation of a suspicious zip file prepended with special characters. Sandboxed Microsoft Office
applications on macOS are allowed to write files that start with special characters, which can be combined with an
AutoStart location to achieve sandbox evasion.
","event.category:file and not event.type:deletion and file.name:~$*.zip and host.os.type:macos
",high,['T1497'],,18.0,"['sandboxed', 'zip', 'sandbox', 'files', 'file']"
e91,TCC Bypass via Mounted APFS Snapshot Access,"Identifies the use of the mount_apfs command to mount the entire file system through Apple File System (APFS) snapshots
as read-only and with the noowners flag set. This action enables the adversary to access almost any file in the file
system, including all user data and files protected by Apple’s privacy framework (TCC).
","event.category : process and event.type : (start or process_started) and process.name : mount_apfs and
  process.args : (/System/Volumes/Data and noowners)
",high,['T1006'],{'cve_2020_9771'},,"['mount_apfs', 'apfs', 'files', 'mount', 'privacy']"
e92,Attempt to Unload Elastic Endpoint Security Kernel Extension,Identifies attempts to unload the Elastic Endpoint Security kernel extension via the kextunload command.,"event.category:process and event.type:(start or process_started) and
 process.name:kextunload and process.args:(""/System/Library/Extensions/EndpointSecurity.kext"" or ""EndpointSecurity.kext"")
",high,"['T1547', 'T1562']",,15.0,"['kextunload', 'endpoint', 'elastic', 'unload', 'extension']"
e93,Enumeration of Users or Groups via Built-in Commands,"Identifies the execution of macOS built-in commands related to account or group enumeration. Adversaries may use
account and group information to orient themselves before deciding how to act.
","process where event.type in (""start"", ""process_started"") and
  (
    process.name : (""ldapsearch"", ""dsmemberutil"") or
    (process.name : ""dscl"" and
      process.args : (""read"", ""-read"", ""list"", ""-list"", ""ls"", ""search"", ""-search"") and
      process.args : (""/Active Directory/*"", ""/Users*"", ""/Groups*""))
	) and
  not process.parent.executable : (""/Applications/NoMAD.app/Contents/MacOS/NoMAD"",
     ""/Applications/ZoomPresence.app/Contents/MacOS/ZoomPresence"",
     ""/Applications/Sourcetree.app/Contents/MacOS/Sourcetree"",
     ""/Library/Application Support/JAMF/Jamf.app/Contents/MacOS/JamfDaemon.app/Contents/MacOS/JamfDaemon"",
     ""/Applications/Jamf Connect.app/Contents/MacOS/Jamf Connect"",
     ""/usr/local/jamf/bin/jamf"",
     ""/Library/Application Support/AirWatch/hubd"",
     ""/opt/jc/bin/jumpcloud-agent"",
     ""/Applications/ESET Endpoint Antivirus.app/Contents/MacOS/esets_daemon"",
     ""/Applications/ESET Endpoint Security.app/Contents/MacOS/esets_daemon"",
     ""/Library/PrivilegedHelperTools/com.fortinet.forticlient.uninstall_helper""
    )
",low,"['T1087', 'T1069']",,168.0,"['macos', 'execution', 'commands', 'adversaries', 'group']"
e94,Execution via Electron Child Process Node.js Module,"Identifies attempts to execute a child process from within the context of an Electron application using the
child_process Node.js module. Adversaries may abuse this technique to inherit permissions from parent processes.
","event.category:process and event.type:(start or process_started) and process.args:(""-e"" and const*require*child_process*)
",medium,"['T1548', 'T1059']",{'permission'},139.0,"['child_process', 'processes', 'process', 'electron', 'permissions']"
e95,Suspicious Browser Child Process,"Identifies the execution of a suspicious browser child process. Adversaries may gain access to a system through a user
visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted
for exploitation.
","process where event.type in (""start"", ""process_started"") and
  process.parent.name : (""Google Chrome"", ""Google Chrome Helper*"", ""firefox"", ""Opera"", ""Safari"", ""com.apple.WebKit.WebContent"", ""Microsoft Edge"") and
  process.name : (""sh"", ""bash"", ""dash"", ""ksh"", ""tcsh"", ""zsh"", ""curl"", ""wget"", ""python*"", ""perl*"", ""php*"", ""osascript"", ""pwsh"") and
  process.command_line != null and
  not process.command_line : ""*/Library/Application Support/Microsoft/MAU*/Microsoft AutoUpdate.app/Contents/MacOS/msupdate*"" and
  not process.args :
    (
      ""hw.model"",
      ""IOPlatformExpertDevice"",
      ""/Volumes/Google Chrome/Google Chrome.app/Contents/Frameworks/*/Resources/install.sh"",
      ""--defaults-torrc"",
      ""*Chrome.app"",
      ""Framework.framework/Versions/*/Resources/keystone_promote_preflight.sh"",
      ""/Users/*/Library/Application Support/Google/Chrome/recovery/*/ChromeRecovery"",
      ""$DISPLAY"",
      ""*GIO_LAUNCHED_DESKTOP_FILE_PID=$$*"",
      ""/opt/homebrew/*"",
      ""/usr/local/*brew*""
    )
",high,"['T1189', 'T1203']",{'browser'},210.0,"['browser', 'exploitation', 'browsing', 'suspicious', 'adversaries']"
e96,MacOS Installer Package Spawns Network Event,"Detects the execution of a MacOS installer package with an abnormal child process (e.g bash) followed immediately by a network connection via a suspicious process (e.g curl).
Threat actors will build and distribute malicious MacOS installer packages, which have a .pkg extension, many times imitating valid software in order to persuade and infect their victims often using the package files (e.g pre/post install scripts etc.) to download additional tools or malicious software.
If this rule fires it should indicate the installation of a malicious or suspicious package.
","sequence by host.id, user.id with maxspan=30s
[process where event.type == ""start"" and event.action == ""exec"" and process.parent.name : (""installer"", ""package_script_service"") and process.name : (""bash"", ""sh"", ""zsh"", ""python"", ""osascript"", ""tclsh*"")]
[network where event.type == ""start"" and process.name : (""curl"", ""osascript"", ""wget"", ""python"")]
",medium,"['T1071', 'T1059']",,46.0,"['malicious', 'installer', 'suspicious', 'macos', 'packages']"
e97,Apple Script Execution followed by Network Connection,"Detects execution via the Apple script interpreter (osascript) followed by a network connection from the same process
within a short time period. Adversaries may use malicious scripts for execution and command and control.
","sequence by host.id, process.entity_id with maxspan=30s
 [process where event.type == ""start"" and process.name == ""osascript""]
 [network where event.type != ""end"" and process.name == ""osascript"" and destination.ip != ""::1"" and
  not cidrmatch(destination.ip,
    ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"", ""192.0.0.0/29"", ""192.0.0.8/32"",
    ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"", ""192.0.2.0/24"", ""192.31.196.0/24"",
    ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"", ""192.175.48.0/24"",
    ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"", ""FE80::/10"", ""FF00::/8"")]
",medium,"['T1059', 'T1105']",{'osascript'},219.0,"['osascript', 'scripts', 'execution', 'script', 'malicious']"
e98,Suspicious Automator Workflows Execution,"Identifies the execution of the Automator Workflows process followed by a network connection from it's XPC service.
Adversaries may drop a custom workflow template that hosts malicious JavaScript for Automation (JXA) code as an
alternative to using osascript.
","sequence by host.id with maxspan=30s
 [process where event.type in (""start"", ""process_started"") and process.name == ""automator""]
 [network where process.name:""com.apple.automator.runner""]
",medium,['T1059'],{'osascript'},211.0,"['osascript', 'automation', 'automator', 'workflows', 'jxa']"
e99,Shell Execution via Apple Scripting,"Identifies the execution of the shell process (sh) via scripting (JXA or AppleScript). Adversaries may use the
doShellScript functionality in JXA or do shell script in AppleScript to execute system commands.
","sequence by host.id with maxspan=5s
 [process where event.type in (""start"", ""process_started"", ""info"") and process.name == ""osascript""] by process.pid
 [process where event.type in (""start"", ""process_started"") and process.name == ""sh"" and process.args == ""-c""] by process.parent.pid
",medium,['T1059'],{'shell'},95.0,"['doshellscript', 'shell', 'execute', 'execution', 'scripting']"
e100,Suspicious macOS MS Office Child Process,"Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, and
Excel). These child processes are often launched during exploitation of Office applications or by documents with
malicious macros.
","process where event.type in (""start"", ""process_started"") and
 process.parent.name:(""Microsoft Word"", ""Microsoft PowerPoint"", ""Microsoft Excel"") and
 process.name:
 (
   ""bash"",
   ""dash"",
   ""sh"",
   ""tcsh"",
   ""csh"",
   ""zsh"",
   ""ksh"",
   ""fish"",
   ""python*"",
   ""perl*"",
   ""php*"",
   ""osascript"",
   ""pwsh"",
   ""curl"",
   ""wget"",
   ""cp"",
   ""mv"",
   ""base64"",
   ""launchctl""
  ) and
  /* noisy false positives related to product version discovery and office errors reporting */
  not process.args:
    (
      ""ProductVersion"",
      ""hw.model"",
      ""ioreg"",
      ""ProductName"",
      ""ProductUserVisibleVersion"",
      ""ProductBuildVersion"",
      ""/Library/Application Support/Microsoft/MERP*/Microsoft Error Reporting.app/Contents/MacOS/Microsoft Error Reporting""
    )
",medium,['T1566'],{'microsoft office'},96.0,"['microsoft', 'processes', 'malicious', 'applications', 'office']"
e101,Potential Kerberos Attack via Bifrost,"Identifies use of Bifrost, a known macOS Kerberos pentesting tool, which can be used to dump cached Kerberos tickets or
attempt unauthorized authentication techniques such as pass-the-ticket/hash and kerberoasting.
","event.category:process and event.type:start and
 process.args:(""-action"" and (""-kerberoast"" or askhash or asktgs or asktgt or s4u or (""-ticket"" and ptt) or (dump and (tickets or keytab))))
",high,"['T1558', 'T1550']","{'kerberos', 'bifrost'}",,"['bifrost', 'kerberos', 'kerberoasting', 'macos', 'authentication']"
e102,Attempt to Mount SMB Share via Command Line,"Identifies the execution of macOS built-in commands to mount a Server Message Block (SMB) network share. Adversaries may
use valid accounts to interact with a remote network share using SMB.
","process where event.type in (""start"", ""process_started"") and
  (
    process.name : ""mount_smbfs"" or
    (process.name : ""open"" and process.args : ""smb://*"") or
    (process.name : ""mount"" and process.args : ""smbfs"") or
    (process.name : ""osascript"" and process.command_line : ""osascript*mount volume*smb://*"")
  ) and
  not process.parent.executable : ""/Applications/Google Drive.app/Contents/MacOS/Google Drive""
",low,['T1021'],{'network'},32.0,"['smb', 'macos', 'mount', 'network', 'share']"
e103,Remote SSH Login Enabled via systemsetup Command,Detects use of the systemsetup command to enable remote SSH Login.,"event.category:process and event.type:(start or process_started) and
 process.name:systemsetup and
 process.args:(""-setremotelogin"" and on) and
 not process.parent.executable : /usr/local/jamf/bin/jamf
",medium,['T1021'],{'ssh'},193.0,"['systemsetup', 'ssh', 'remote', 'enable', 'login']"
e104,Virtual Private Network Connection Attempt,"Identifies the execution of macOS built-in commands to connect to an existing Virtual Private Network (VPN).
Adversaries may use VPN connections to laterally move and control remote systems on a network.
","process where event.type in (""start"", ""process_started"") and
  (
    (process.name : ""networksetup"" and process.args : ""-connectpppoeservice"") or
    (process.name : ""scutil"" and process.args : ""--nc"" and process.args : ""start"") or
    (process.name : ""osascript"" and process.command_line : ""osascript*set VPN to service*"")
  )
",low,['T1021'],"{'vpn', 'page', 'network'}",212.0,"['vpn', 'macos', 'adversaries', 'connections', 'network']"
e105,Potential Hidden Local User Account Creation,"Identifies attempts to create a local account that will be hidden from the macOS logon window. This may indicate an
attempt to evade user attention while maintaining persistence using a separate local account.
","event.category:process and event.type:(start or process_started) and
 process.name:dscl and process.args:(IsHidden and create and (true or 1 or yes))
",medium,['T1078'],,168.0,"['logon', 'macos', 'account', 'local', 'persistence']"
e106,Launch Agent Creation or Modification and Immediate Loading,"An adversary can establish persistence by installing a new launch agent that executes at login by using launchd or
launchctl to load a plist into the appropriate directories.
","sequence by host.id with maxspan=1m
 [file where event.type != ""deletion"" and
  file.path : (""/System/Library/LaunchAgents/*"", ""/Library/LaunchAgents/*"", ""/Users/*/Library/LaunchAgents/*"")
 ]
 [process where event.type in (""start"", ""process_started"") and process.name == ""launchctl"" and process.args == ""load""]
",low,['T1543'],{'launchd'},47.0,"['persistence', 'launchctl', 'launchd', 'launch', 'adversary']"
e107,Creation of Hidden Login Item via Apple Script,"Identifies the execution of osascript to create a hidden login item. This may indicate an attempt to persist a malicious
program while concealing its presence.
","process where event.type in (""start"", ""process_started"") and process.name : ""osascript"" and
 process.command_line : ""osascript*login item*hidden:true*""
",medium,"['T1547', 'T1059']",{'osascript'},211.0,"['osascript', 'malicious', 'login', 'execution', 'program']"
e108,LaunchDaemon Creation or Modification and Immediate Loading,"Indicates the creation or modification of a launch daemon, which adversaries may use to repeatedly execute malicious
payloads as part of persistence.
","sequence by host.id with maxspan=1m
 [file where event.type != ""deletion"" and file.path : (""/System/Library/LaunchDaemons/*"", ""/Library/LaunchDaemons/*"")]
 [process where event.type in (""start"", ""process_started"") and process.name == ""launchctl"" and process.args == ""load""]
",low,['T1543'],,213.0,"['daemon', 'persistence', 'malicious', 'launch', 'adversaries']"
e109,Authorization Plugin Modification,"Authorization plugins are used to extend the authorization services API and implement mechanisms that are not natively
supported by the OS, such as multi-factor authentication with third party software. Adversaries may abuse this feature
to persist and/or collect clear text credentials as they traverse the registered plugins during user logon.
","event.category:file and not event.type:deletion and
  file.path:(/Library/Security/SecurityAgentPlugins/* and
  not /Library/Security/SecurityAgentPlugins/TeamViewerAuthPlugin.bundle/*) and
  not process.name:shove and process.code_signature.trusted:true
",medium,['T1547'],,188.0,"['authorization', 'authentication', 'plugins', 'credentials', 'api']"
e110,Suspicious CronTab Creation or Modification,"Identifies attempts to create or modify a crontab via a process that is not crontab (i.e python, osascript, etc.). This
activity should not be highly prevalent and could indicate the use of cron as a persistence mechanism by a threat actor.
","file where event.type != ""deletion"" and process.name != null and
  file.path : ""/private/var/at/tabs/*"" and not process.executable == ""/usr/bin/crontab""
",medium,['T1053'],,131.0,"['crontab', 'cron', 'process', 'persistence', 'threat']"
e111,Suspicious Hidden Child Process of Launchd,"Identifies the execution of a launchd child process with a hidden file. An adversary can establish persistence by
installing a new logon item, launch agent, or daemon that executes upon login.
","event.category:process and event.type:(start or process_started) and
 process.name:.* and process.parent.executable:/sbin/launchd
",medium,"['T1543', 'T1564']","{'launchd', 'electrorat'}",213.0,"['launchd', 'daemon', 'launch', 'process', 'persistence']"
e112,Persistence via DirectoryService Plugin Modification,"Identifies the creation or modification of a DirectoryService PlugIns (dsplug) file. The DirectoryService daemon launches
on each system boot and automatically reloads after crash. It scans and executes bundles that are located in the
DirectoryServices PlugIns folder and can be abused by adversaries to maintain persistence.
","event.category:file and not event.type:deletion and
  file.path:/Library/DirectoryServices/PlugIns/*.dsplug
",medium,['T1547'],,214.0,"['directoryservices', 'directoryservice', 'dsplug', 'daemon', 'plugins']"
e113,Persistence via Docker Shortcut Modification,"An adversary can establish persistence by modifying an existing macOS dock property list in order to execute a malicious
application instead of the intended one when invoked.
","event.category : file and event.action : modification and
 file.path : /Users/*/Library/Preferences/com.apple.dock.plist and
 not process.name : (xpcproxy or cfprefsd or plutil or jamf or PlistBuddy or InstallerRemotePluginService)
",medium,['T1543'],,213.0,"['dock', 'persistence', 'macos', 'adversary', 'malicious']"
e114,Emond Rules Creation or Modification,"Identifies the creation or modification of the Event Monitor Daemon (emond) rules. Adversaries may abuse this service by
writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.
","file where event.type != ""deletion"" and
 file.path : (""/private/etc/emond.d/rules/*.plist"", ""/etc/emon.d/rules/*.plist"", ""/private/var/db/emondClients/*"")
",medium,['T1546'],{'emond'},215.0,"['emond', 'daemon', 'event', 'service', 'authentication']"
e115,Suspicious Emond Child Process,"Identifies the execution of a suspicious child process of the Event Monitor Daemon (emond). Adversaries may abuse this
service by writing a rule to execute commands when a defined event occurs, such as system start up or user
authentication.
","process where event.type in (""start"", ""process_started"") and
 process.parent.name : ""emond"" and
 process.name : (
   ""bash"",
   ""dash"",
   ""sh"",
   ""tcsh"",
   ""csh"",
   ""zsh"",
   ""ksh"",
   ""fish"",
   ""Python"",
   ""python*"",
   ""perl*"",
   ""php*"",
   ""osascript"",
   ""pwsh"",
   ""curl"",
   ""wget"",
   ""cp"",
   ""mv"",
   ""touch"",
   ""echo"",
   ""base64"",
   ""launchctl"")
",medium,['T1546'],{'emond'},215.0,"['emond', 'daemon', 'process', 'event', 'execution']"
e116,Attempt to Enable the Root Account,"Identifies attempts to enable the root account using the dsenableroot command. This command may be abused by adversaries
for persistence, as the root account is disabled by default.
","event.category:process and event.type:(start or process_started) and
 process.name:dsenableroot and not process.args:""-d""
",medium,['T1078'],{'root'},216.0,"['root', 'dsenableroot', 'disabled', 'persistence', 'enable']"
e117,Creation of Hidden Launch Agent or Daemon,"Identifies the creation of a hidden launch agent or daemon. An adversary may establish persistence by installing a new
launch agent or daemon which executes at login.
","file where event.type != ""deletion"" and
  file.path :
  (
    ""/System/Library/LaunchAgents/.*.plist"",
    ""/Library/LaunchAgents/.*.plist"",
    ""/Users/*/Library/LaunchAgents/.*.plist"",
    ""/System/Library/LaunchDaemons/.*.plist"",
    ""/Library/LaunchDaemons/.*.plist""
  )
",medium,"['T1543', 'T1564']",,213.0,"['daemon', 'persistence', 'launch', 'adversary', 'agent']"
e118,Finder Sync Plugin Registered and Enabled,"Finder Sync plugins enable users to extend Finder’s functionality by modifying the user interface. Adversaries may abuse
this feature by adding a rogue Finder Plugin to repeatedly execute malicious payloads for persistence.
","process where event.type in (""start"", ""process_started"") and process.name : ""pluginkit"" and
  process.args : ""-e"" and process.args : ""use"" and process.args : ""-i"" and
  not process.args :
  (
    ""com.google.GoogleDrive.FinderSyncAPIExtension"",
    ""com.google.drivefs.findersync"",
    ""com.boxcryptor.osx.Rednif"",
    ""com.adobe.accmac.ACCFinderSync"",
    ""com.microsoft.OneDrive.FinderSync"",
    ""com.insynchq.Insync.Insync-Finder-Integration"",
    ""com.box.desktop.findersyncext""
  ) and
  not process.parent.executable : (
    ""/Library/Application Support/IDriveforMac/IDriveHelperTools/FinderPluginApp.app/Contents/MacOS/FinderPluginApp""
  )
",medium,['T1543'],{'rogue'},217.0,"['finder', 'sync', 'plugins', 'persistence', 'plugin']"
e119,Persistence via Folder Action Script,"Detects modification of a Folder Action script. A Folder Action script is executed when the folder to which it is attached has items added or removed, or when its
window is opened, closed, moved, or resized. Adversaries may abuse this feature to establish persistence by utilizing a
malicious script.
","sequence by host.id with maxspan=5s
 [process where event.type in (""start"", ""process_started"", ""info"") and process.name == ""com.apple.foundation.UserScriptService""] by process.pid
 [process where event.type in (""start"", ""process_started"") and process.name in (""osascript"", ""python"", ""tcl"", ""node"", ""perl"", ""ruby"", ""php"", ""bash"", ""csh"", ""zsh"", ""sh"") and
  not process.args : ""/Users/*/Library/Application Support/iTerm2/Scripts/AutoLaunch/*.scpt""
 ] by process.parent.pid
",medium,"['T1037', 'T1059']",,7.0,"['action', 'script', 'folder', 'detects', 'executed']"
e120,Potential Persistence via Login Hook,"Identifies the creation or modification of the login window property list (plist). Adversaries may modify plist files to
run a program during system boot or user login for persistence.
","event.category:""file"" and not event.type:""deletion"" and
 file.name:""com.apple.loginwindow.plist"" and
 process.name:(* and not (systemmigrationd or DesktopServicesHelper or diskmanagementd or rsync or launchd or cfprefsd or xpcproxy or ManagedClient or MCXCompositor or backupd or ""iMazing Profile Editor""
))
",medium,['T1547'],{'hook'},,"['plist', 'program', 'login', 'window', 'persistence']"
e121,Persistence via Login or Logout Hook,"Identifies use of the Defaults command to install a login or logoff hook in MacOS. An adversary may abuse this
capability to establish persistence in an environment by inserting code to be executed at login or logout.
","process where event.type == ""start"" and
 process.name == ""defaults"" and process.args == ""write"" and process.args in (""LoginHook"", ""LogoutHook"") and
 not process.args :
       (
         ""Support/JAMF/ManagementFrameworkScripts/logouthook.sh"",
         ""Support/JAMF/ManagementFrameworkScripts/loginhook.sh"",
         ""/Library/Application Support/JAMF/ManagementFrameworkScripts/logouthook.sh"",
         ""/Library/Application Support/JAMF/ManagementFrameworkScripts/loginhook.sh""
       )
",medium,['T1037'],{'hook'},,"['logout', 'macos', 'logoff', 'login', 'defaults']"
e122,Sublime Plugin or Application Script Modification,"Adversaries may create or modify the Sublime application plugins or scripts to execute a malicious payload each time the
Sublime application is started.
","file where event.type in (""change"", ""creation"") and file.extension : ""py"" and
  file.path :
    (
      ""/Users/*/Library/Application Support/Sublime Text*/Packages/*.py"",
      ""/Applications/Sublime Text.app/Contents/MacOS/sublime.py""
    ) and
  not process.executable :
    (
      ""/Applications/Sublime Text*.app/Contents/*"",
      ""/usr/local/Cellar/git/*/bin/git"",
      ""/Library/Developer/CommandLineTools/usr/bin/git"",
      ""/usr/libexec/xpcproxy"",
      ""/System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/Resources/DesktopServicesHelper""
    )
",low,['T1554'],,213.0,"['sublime', 'malicious', 'plugins', 'adversaries', 'execute']"
e123,Potential Persistence via Periodic Tasks,"Identifies the creation or modification of the default configuration for periodic tasks. Adversaries may abuse periodic
tasks to execute malicious code or maintain persistence.
","event.category:""file"" and not event.type:""deletion"" and
 file.path:(/private/etc/periodic/* or /private/etc/defaults/periodic.conf or /private/etc/periodic.conf)
",low,['T1053'],,213.0,"['tasks', 'persistence', 'adversaries', 'malicious', 'maintain']"
e124,Unexpected Child Process of macOS Screensaver Engine,"Identifies when a child process is spawned by the screensaver engine process, which is consistent with an attacker's
malicious payload being executed after the screensaver activated on the endpoint. An adversary can maintain persistence
on a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to
execute code each time the screensaver is activated.
","process where event.type == ""start"" and process.parent.name == ""ScreenSaverEngine""
",medium,['T1546'],{'screensaver'},218.0,"['screensaver', 'persistence', 'macos', 'malicious', 'executed']"
e125,Screensaver Plist File Modified by Unexpected Process,"Identifies when a screensaver plist file is modified by an unexpected process. An adversary can maintain persistence on
a macOS endpoint by creating a malicious screensaver (.saver) file and configuring the screensaver plist file to execute
code each time the screensaver is activated.
","file where event.type != ""deletion"" and
  file.name: ""com.apple.screensaver.*.plist"" and
  file.path : (
    ""/Users/*/Library/Preferences/ByHost/*"",
    ""/Library/Managed Preferences/*"",
    ""/System/Library/Preferences/*""
    ) and
  /* Filter OS processes modifying screensaver plist files */
  not process.executable : (
    ""/usr/sbin/cfprefsd"",
    ""/usr/libexec/xpcproxy"",
    ""/System/Library/CoreServices/ManagedClient.app/Contents/Resources/MCXCompositor"",
    ""/System/Library/CoreServices/ManagedClient.app/Contents/MacOS/ManagedClient""
    )
",medium,['T1546'],{'screensaver'},218.0,"['screensaver', 'plist', 'macos', 'saver', 'persistence']"
e126,Suspicious Calendar File Modification,"Identifies suspicious modifications of the calendar file by an unusual process. Adversaries may create a custom calendar
notification procedure to execute a malicious program at a recurring interval to establish persistence.
","event.category:file and event.action:modification and
  file.path:/Users/*/Library/Calendars/*.calendar/Events/*.ics and
  process.executable:
  (* and not
    (
      /System/Library/* or
      /System/Applications/Calendar.app/Contents/MacOS/* or
      /System/Applications/Mail.app/Contents/MacOS/Mail or
      /usr/libexec/xpcproxy or
      /sbin/launchd or
      /Applications/*
    )
  )
",medium,['T1546'],{'calendar'},46.0,"['calendar', 'malicious', 'suspicious', 'recurring', 'notification']"
e127,Potential Persistence via Atom Init Script Modification,"Identifies modifications to the Atom desktop text editor Init File. Adversaries may add malicious JavaScript code to the
init.coffee file that will be executed upon the Atom application opening.
","event.category:""file"" and not event.type:""deletion"" and
 file.path:/Users/*/.atom/init.coffee and not process.name:(Atom or xpcproxy) and not user.name:root
",low,['T1037'],,62.0,"['atom', 'init', 'editor', 'application', 'modifications']"
e128,Apple Scripting Execution with Administrator Privileges,"Identifies execution of the Apple script interpreter (osascript) without a password prompt and with administrator
privileges.
","process where event.type in (""start"", ""process_started"") and process.name : ""osascript"" and
  process.command_line : ""osascript*with administrator privileges""
",medium,"['T1078', 'T1059']","{'osascript', 'privilege'}",219.0,"['osascript', 'script', 'interpreter', 'execution', 'privileges']"
e129,Execution with Explicit Credentials via Scripting,"Identifies execution of the security_authtrampoline process via a scripting interpreter. This occurs when programs use
AuthorizationExecute-WithPrivileges from the Security.framework to run another program with root privileges. It should
not be run by itself, as this is a sign of execution with explicit logon credentials.
","event.category:process and event.type:(start or process_started) and
 process.name:""security_authtrampoline"" and
 process.parent.name:(osascript or com.apple.automator.runner or sh or bash or dash or zsh or python* or Python or perl* or php* or ruby or pwsh)
",medium,"['T1078', 'T1548', 'T1059']",,220.0,"['security_authtrampoline', 'authorizationexecute', 'credentials', 'logon', 'execution']"
e130,Suspicious Child Process of Adobe Acrobat Reader Update Service,"Detects attempts to exploit privilege escalation vulnerabilities related to the Adobe Acrobat Reader
PrivilegedHelperTool responsible for installing updates. For more information, refer to CVE-2020-9615, CVE-2020-9614 and
CVE-2020-9613 and verify that the impacted system is patched.
","event.category:process and event.type:(start or process_started) and
  process.parent.name:com.adobe.ARMDC.SMJobBlessHelper and
  user.name:root and
  not process.executable: (/Library/PrivilegedHelperTools/com.adobe.ARMDC.SMJobBlessHelper or
                           /usr/bin/codesign or
                           /private/var/folders/zz/*/T/download/ARMDCHammer or
                           /usr/sbin/pkgutil or
                           /usr/bin/shasum or
                           /usr/bin/perl* or
                           /usr/sbin/spctl or
                           /usr/sbin/installer or
                           /usr/bin/csrutil)
",high,['T1068'],"{'cve-2020-9615', 'privilege'}",,"['privilegedhelpertool', 'acrobat', 'adobe', 'vulnerabilities', 'cve']"
e131,Potential Admin Group Account Addition,"Identifies attempts to add an account to the admin group via the command line. This could be an indication of privilege
escalation activity.
","event.category:process and event.type:(start or process_started) and
 process.name:(dscl or dseditgroup) and process.args:((""/Groups/admin"" or admin) and (""-a"" or ""-append""))
",medium,['T1078'],{'privilege'},7.0,"['admin', 'account', 'privilege', 'attempts', 'group']"
e132,Privilege Escalation via Root Crontab File Modification,"Identifies modifications to the root crontab file. Adversaries may overwrite this file to gain code execution with root
privileges by exploiting privileged file write or move related vulnerabilities.
","event.category:file and not event.type:deletion and
 file.path:/private/var/at/tabs/root and not process.executable:/usr/bin/crontab
",high,['T1053'],"{'root', 'privilege'}",221.0,"['crontab', 'exploiting', 'vulnerabilities', 'root', 'privileges']"
e133,DNS Tunneling,"A machine learning job detected unusually large numbers of DNS queries for a single top-level DNS domain, which is often
used for DNS tunneling. DNS tunneling can be used for command-and-control, persistence, or data exfiltration activity.
For example, dnscat tends to generate many DNS questions for a top-level domain as it uses the DNS protocol to tunnel
data.
",,low,['T1572'],{'dns'},222.0,"['dns', 'dnscat', 'tunneling', 'tunnel', 'domain']"
e134,Unusual DNS Activity,"A machine learning job detected a rare and unusual DNS query that indicate network activity with unusual DNS domains.
This can be due to initial access, persistence, command-and-control, or exfiltration activity. For example, when a user
clicks on a link in a phishing email or opens a malicious document, a request may be sent to download and run a payload
from an uncommon domain. When malware is already running, it may send requests to an uncommon DNS domain the malware
uses for command-and-control communication.
",,low,['T1071'],"{'malware', 'dns'}",223.0,"['malware', 'dns', 'domains', 'phishing', 'domain']"
e135,Unusual Web Request,"A machine learning job detected a rare and unusual URL that indicates unusual web browsing activity. This can be due to
initial access, persistence, command-and-control, or exfiltration activity. For example, in a strategic web compromise
or watering hole attack, when a trusted website is compromised to target a particular sector or organization, targeted
users may receive emails with uncommon URLs for trusted websites. These URLs can be used to download and run a payload.
When malware is already running, it may send requests to uncommon URLs on trusted websites the malware uses for
command-and-control communication. When rare URLs are observed being requested for a local web server by a remote
source, these can be due to web scanning, enumeration or attack traffic, or they can be due to bots and web scrapers
which are part of common Internet background traffic.
",,low,['T1071'],{'malware'},224.0,"['malware', 'urls', 'requests', 'scrapers', 'web']"
e136,Unusual Web User Agent,"A machine learning job detected a rare and unusual user agent indicating web browsing activity by an unusual process
other than a web browser. This can be due to persistence, command-and-control, or exfiltration activity. Uncommon user
agents coming from remote sources to local destinations are often the result of scanners, bots, and web scrapers, which
are part of common Internet background traffic. Much of this is noise, but more targeted attacks on websites using tools
like Burp or SQLmap can sometimes be discovered by spotting uncommon user agents. Uncommon user agents in traffic from
local sources to remote destinations can be any number of things, including harmless programs like weather monitoring or
stock-trading programs. However, uncommon user agents from local sources can also be due to malware or scanning
activity.
",,low,['T1071'],"{'malware', 'sqlmap', 'browser'}",210.0,"['malware', 'agent', 'bots', 'browser', 'browsing']"
e137,Spike in Failed Logon Events,"A machine learning job found an unusually large spike in authentication failure events. This can be due to password
spraying, user enumeration or brute force activity and may be a precursor to account takeover or credentialed access.
",,low,['T1110'],{'password'},156.0,"['authentication', 'password', 'credentialed', 'brute', 'account']"
e138,Spike in Logon Events,"A machine learning job found an unusually large spike in successful authentication events. This can be due to password
spraying, user enumeration or brute force activity.
",,low,['T1110'],{'password'},156.0,"['authentication', 'password', 'brute', 'spike', 'spraying']"
e139,Spike in Logon Events from a Source IP,"A machine learning job found an unusually large spike in successful authentication events from a particular
source IP address. This can be due to password spraying, user enumeration or brute force activity.
",,low,['T1110'],{'password'},156.0,"['authentication', 'ip', 'brute', 'password', 'spraying']"
e140,Unusual Linux Process Calling the Metadata Service,"Looks for anomalous access to the metadata service by an unusual process. The metadata service may be targeted in order
to harvest credentials or user data scripts containing secrets.
",,low,['T1552'],,116.0,"['credentials', 'metadata', 'anomalous', 'unusual', 'secrets']"
e141,Unusual Linux User Calling the Metadata Service,"Looks for anomalous access to the cloud platform metadata service by an unusual user. The metadata service may be
targeted in order to harvest credentials or user data scripts containing secrets.
",,low,['T1552'],{'cloud computing'},116.0,"['credentials', 'cloud', 'anomalous', 'unusual', 'secrets']"
e142,Unusual Login Activity,Identifies an unusually high number of authentication attempts.,,low,['T1110'],,225.0,"['authentication', 'attempts', 'identifies', 'unusually', 'number']"
e143,Unusual Windows Process Calling the Metadata Service,"Looks for anomalous access to the metadata service by an unusual process. The metadata service may be targeted in order
to harvest credentials or user data scripts containing secrets.
",,low,['T1552'],,116.0,"['credentials', 'metadata', 'anomalous', 'unusual', 'secrets']"
e144,Unusual Windows User Calling the Metadata Service,"Looks for anomalous access to the cloud platform metadata service by an unusual user. The metadata service may be
targeted in order to harvest credentials or user data scripts containing secrets.
",,low,['T1552'],{'cloud computing'},116.0,"['credentials', 'cloud', 'anomalous', 'unusual', 'secrets']"
e145,Unusual Linux System Information Discovery Activity,"Looks for commands related to system information discovery from an unusual user context. This can be due to uncommon
troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system
information discovery in order to gather detailed information about system configuration and software versions. This may
be a precursor to selection of a persistence mechanism or a method of privilege elevation.
",,low,['T1082'],{'privilege'},226.0,"['compromised', 'commands', 'privilege', 'software', 'persistence']"
e146,Unusual Linux System Network Configuration Discovery,"Looks for commands related to system network configuration discovery from an unusual user context. This can be due to
uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor
to engage in system network configuration discovery in order to increase their understanding of connected networks and
hosts. This information may be used to shape follow-up behaviors such as lateral movement or additional discovery.
",,low,['T1016'],{'network'},138.0,"['compromised', 'configuration', 'network', 'commands', 'behaviors']"
e147,Unusual Linux Network Connection Discovery,"Looks for commands related to system network connection discovery from an unusual user context. This can be due to
uncommon troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor
to engage in system network connection discovery in order to increase their understanding of connected services and
systems. This information may be used to shape follow-up behaviors such as lateral movement or additional discovery.
",,low,['T1049'],{'network'},138.0,"['compromised', 'connection', 'network', 'commands', 'behaviors']"
e148,Unusual Linux Process Discovery Activity,"Looks for commands related to system process discovery from an unusual user context. This can be due to uncommon
troubleshooting activity or due to a compromised account. A compromised account may be used by a threat actor to engage
in system process discovery in order to increase their understanding of software applications running on a target host
or network. This may be a precursor to selection of a persistence mechanism or a method of privilege elevation.
",,low,['T1057'],{'privilege'},226.0,"['process', 'compromised', 'privilege', 'commands', 'applications']"
e149,Unusual Linux System Owner or User Discovery Activity,"Looks for commands related to system user or owner discovery from an unusual user context. This can be due to uncommon
troubleshooting activity or due to a compromised account. A compromised account may be used to engage in system owner or
user discovery in order to identify currently active or primary users of a system. This may be a precursor to additional
discovery, credential dumping or privilege elevation activity.
",,low,['T1033'],{'privilege'},226.0,"['compromised', 'commands', 'users', 'privilege', 'user']"
e150,Suspicious Powershell Script,"A machine learning job detected a PowerShell script with unusual data characteristics, such as obfuscation, that may be
a characteristic of malicious PowerShell script text blocks.
",,low,['T1059'],{'powershell'},227.0,"['obfuscation', 'powershell', 'script', 'malicious', 'detected']"
e151,Unusual Hour for a User to Logon,"A machine learning job detected a user logging in at a time of day that is unusual for the user. This can be due to
credentialed access via a compromised account when the user and the threat actor are in different time zones. In
addition, unauthorized user activity often takes place during non-business hours.
",,low,['T1078'],,228.0,"['unauthorized', 'credentialed', 'compromised', 'logging', 'unusual']"
e152,Unusual Source IP for a User to Logon from,"A machine learning job detected a user logging in from an IP address that is unusual for the user. This can be due to
credentialed access via a compromised account when the user and the threat actor are in different locations. An unusual
source IP address for a username could also be due to lateral movement when a compromised account is used to pivot
between hosts.
",,low,['T1078'],,228.0,"['ip', 'compromised', 'unusual', 'credentialed', 'account']"
e153,Rare User Logon,"A machine learning job found an unusual user name in the authentication logs. An unusual user name is one way of
detecting credentialed access by means of a new or dormant user account. An inactive user account (because the user
has left the organization) that becomes active may be due to credentialed access using a compromised account password.
Threat actors will sometimes also create new users as a means of persisting in a compromised web application.
",,low,['T1078'],,228.0,"['authentication', 'credentialed', 'users', 'account', 'compromised']"
e154,Unusual Linux Username,"A machine learning job detected activity for a username that is not normally active, which can indicate unauthorized
changes, activity by unauthorized users, lateral movement, or compromised credentials. In many organizations, new
usernames are not often created apart from specific types of system activities, such as creating new accounts for new
employees. These user accounts quickly become active and routine. Events from rarely used usernames can point to
suspicious activity. Additionally, automated Linux fleets tend to see activity from rarely used usernames only when
personnel log in to make authorized or unauthorized changes, or threat actors have acquired credentials and log in for
malicious purposes. Unusual usernames can also indicate pivoting, where compromised credentials are used to try and move
laterally from one host to another.
",,low,['T1078'],,134.0,"['accounts', 'users', 'credentials', 'compromised', 'unauthorized']"
e155,Unusual Windows Username,"A machine learning job detected activity for a username that is not normally active, which can indicate unauthorized
changes, activity by unauthorized users, lateral movement, or compromised credentials. In many organizations, new
usernames are not often created apart from specific types of system activities, such as creating new accounts for new
employees. These user accounts quickly become active and routine. Events from rarely used usernames can point to
suspicious activity. Additionally, automated Linux fleets tend to see activity from rarely used usernames only when
personnel log in to make authorized or unauthorized changes, or threat actors have acquired credentials and log in for
malicious purposes. Unusual usernames can also indicate pivoting, where compromised credentials are used to try and move
laterally from one host to another.
",,low,['T1078'],,134.0,"['accounts', 'users', 'credentials', 'compromised', 'unauthorized']"
e156,Unusual Windows Remote User,"A machine learning job detected an unusual remote desktop protocol (RDP) username, which can indicate account takeover
or credentialed persistence using compromised accounts. RDP attacks, such as BlueKeep, also tend to use unusual
usernames.
",,low,['T1078'],{'rdp'},19.0,"['rdp', 'attacks', 'compromised', 'credentialed', 'desktop']"
e157,Spike in Firewall Denies,"A machine learning job detected an unusually large spike in network traffic that was
denied by network access control lists (ACLs) or firewall rules. Such a burst of denied traffic is usually caused by
either 1) a mis-configured application or firewall or 2) suspicious or malicious activity.
Unsuccessful attempts at network transit, in order to connect to command-and-control (C2),
or engage in data exfiltration, may produce a burst of failed connections. This could also
be due to unusually large amounts of reconnaissance or enumeration traffic. Denial-of-service
attacks or traffic floods may also produce such a surge in traffic.
",,low,,{'network'},229.0,"['traffic', 'attacks', 'firewall', 'network', 'burst']"
e158,Spike in Network Traffic,"A machine learning job detected an unusually large spike in network traffic. Such a burst of traffic,
if not caused by a surge in business activity, can be due to suspicious or malicious activity.
Large-scale data exfiltration may produce a burst of network traffic; this could also be due to unusually
large amounts of reconnaissance or enumeration traffic. Denial-of-service attacks or traffic floods may
also produce such a surge in traffic.
",,low,,{'network'},229.0,"['traffic', 'burst', 'surge', 'network', 'attacks']"
e159,Unusual Linux Network Activity,"Identifies Linux processes that do not usually use the network but have unexpected network activity, which can indicate
command-and-control, lateral movement, persistence, or data exfiltration activity. A process with unusual network
activity can denote process exploitation or injection, where the process is used to run persistence mechanisms that
allow a malicious actor remote access or control of the host, data exfiltration, and execution of unauthorized network
applications.
",,low,,,139.0,"['processes', 'process', 'execution', 'exfiltration', 'linux']"
e160,Unusual Linux Network Port Activity,"Identifies unusual destination port activity that can indicate command-and-control, persistence mechanism, or data
exfiltration activity. Rarely used destination port activity is generally unusual in Linux fleets, and can indicate
unauthorized access or threat actor activity.
",,low,,,230.0,"['port', 'destination', 'unusual', 'activity', 'exfiltration']"
e161,Unusual Network Destination Domain Name,"A machine learning job detected an unusual network destination domain name. This can be due to initial access,
persistence, command-and-control, or exfiltration activity. For example, when a user clicks on a link in a phishing
email or opens a malicious document, a request may be sent to download and run a payload from an uncommon web server
name. When malware is already running, it may send requests to an uncommon DNS domain the malware uses for
command-and-control communication.
",,low,,"{'malware', 'dns'}",223.0,"['malware', 'malicious', 'phishing', 'domain', 'dns']"
e162,Network Traffic to Rare Destination Country,"A machine learning job detected a rare destination country name in the network logs.
This can be due to initial access, persistence, command-and-control, or exfiltration activity.
For example, when a user clicks on a link in a phishing email or opens a malicious document,
a request may be sent to download and run a payload from a server in a country which does not
normally appear in network traffic or business work-flows. Malware instances and persistence
mechanisms may communicate with command-and-control (C2) infrastructure in their country of origin,
which may be an unusual destination country for the source network.
",,low,,"{'malware', 'network'}",54.0,"['malware', 'country', 'malicious', 'destination', 'network']"
e163,Spike in Network Traffic To a Country,"A machine learning job detected an unusually large spike in network activity to one
destination country in the network logs. This could be due to unusually large amounts
of reconnaissance or enumeration traffic. Data exfiltration activity may also produce
such a surge in traffic to a destination country which does not normally appear in network
traffic or business work-flows. Malware instances and persistence mechanisms may communicate
with command-and-control (C2) infrastructure in their country of origin, which may be an
unusual destination country for the source network.
",,low,,"{'malware', 'network'}",229.0,"['malware', 'traffic', 'network', 'infrastructure', 'exfiltration']"
e164,Unusual Windows Network Activity,"Identifies Windows processes that do not usually use the network but have unexpected network activity, which can
indicate command-and-control, lateral movement, persistence, or data exfiltration activity. A process with unusual
network activity can denote process exploitation or injection, where the process is used to run persistence mechanisms
that allow a malicious actor remote access or control of the host, data exfiltration, and execution of unauthorized
network applications.
",,low,,,139.0,"['processes', 'process', 'applications', 'execution', 'exfiltration']"
e165,Anomalous Process For a Linux Population,"Searches for rare processes running on multiple Linux hosts in an entire fleet or network. This reduces the detection of
false positives since automated maintenance processes usually only run occasionally on a single machine but are common
to all or many hosts in a fleet.
",,low,['T1543'],,231.0,"['maintenance', 'processes', 'automated', 'linux', 'detection']"
e166,Unusual Process For a Linux Host,"Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized
services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared
with other processes running on the host.
",,low,['T1543'],{'malware'},48.0,"['processes', 'malware', 'rare', 'unauthorized', 'hosts']"
e167,Unusual Process For a Windows Host,"Identifies rare processes that do not usually run on individual hosts, which can indicate execution of unauthorized
services, malware, or persistence mechanisms. Processes are considered rare when they only run occasionally as compared
with other processes running on the host.
",,low,['T1543'],{'malware'},48.0,"['processes', 'malware', 'rare', 'unauthorized', 'hosts']"
e168,Unusual Windows Path Activity,"Identifies processes started from atypical folders in the file system, which might indicate malware execution or
persistence mechanisms. In corporate Windows environments, software installation is centrally managed and it is unusual
for programs to be executed from user or temporary directories. Processes executed from these locations can denote that
a user downloaded software directly from the Internet or a malicious script or macro executed malware.
",,low,['T1543'],{'malware'},48.0,"['malware', 'processes', 'execution', 'software', 'programs']"
e169,Anomalous Process For a Windows Population,"Searches for rare processes running on multiple hosts in an entire fleet or network. This reduces the detection of false
positives since automated maintenance processes usually only run occasionally on a single machine but are common to all
or many hosts in a fleet.
",,low,['T1543'],,231.0,"['maintenance', 'automated', 'processes', 'detection', 'hosts']"
e170,Anomalous Windows Process Creation,"Identifies unusual parent-child process relationships that can indicate malware execution or persistence mechanisms.
Malicious scripts often call on other applications and processes as part of their exploit payload. For example, when a
malicious Office document runs scripts as part of an exploit payload, Excel or Word may start a script interpreter
process, which, in turn, runs a script that downloads and executes malware. Another common scenario is Outlook running
an unusual process when malware is downloaded in an email. Monitoring and identifying anomalous process relationships is
a method of detecting new and emerging malware that is not yet recognized by anti-virus scanners.
",,low,['T1543'],{'malware'},232.0,"['malware', 'virus', 'malicious', 'processes', 'process']"
e171,Unusual Windows Service,"A machine learning job detected an unusual Windows service, This can indicate execution of unauthorized services,
malware, or persistence mechanisms. In corporate Windows environments, hosts do not generally run many rare or unique
services. This job helps detect malware and persistence mechanisms that have been installed and run as a service.
",,low,['T1543'],{'malware'},54.0,"['malware', 'service', 'services', 'windows', 'hosts']"
e172,Unusual Sudo Activity,"Looks for sudo activity from an unusual user context. An unusual sudo user could be due to troubleshooting activity or
it could be a sign of credentialed access via compromised accounts.
",,low,['T1548'],{'sudo'},228.0,"['sudo', 'compromised', 'credentialed', 'unusual', 'user']"
e173,Unusual Windows User Privilege Elevation Activity,"A machine learning job detected an unusual user context switch, using the runas command or similar techniques, which can
indicate account takeover or privilege escalation using compromised accounts. Privilege elevation using tools like runas
are more commonly used by domain and network administrators than by regular Windows users.
",,low,,{'privilege'},226.0,"['runas', 'privilege', 'administrators', 'accounts', 'compromised']"
e174,Anomalous Linux Compiler Activity,"Looks for compiler activity by a user context which does not normally run compilers. This can be the result of ad-hoc
software changes or unauthorized software deployment. This can also be due to local privilege elevation via locally run
exploits or malware activity.
",,low,['T1588'],{'malware'},233.0,"['compiler', 'compilers', 'malware', 'exploits', 'unauthorized']"
e175,Cobalt Strike Command and Control Beacon,"Cobalt Strike is a threat emulation platform commonly modified and used by adversaries to conduct network attack and
exploitation campaigns. This rule detects a network activity algorithm leveraged by Cobalt Strike implant beacons for
command and control.
","event.category:(network OR network_traffic) AND type:(tls OR http) AND network.transport:tcp AND destination.domain:/[a-z]{3}.stage.[0-9]{8}\..*/
",high,"['T1568', 'T1071']","{'fin7', 'cobalt strike', 'network'}",,"['cobalt', 'strike', 'attack', 'beacons', 'network']"
e176,Default Cobalt Strike Team Server Certificate,"This rule detects the use of the default Cobalt Strike Team Server TLS certificate. Cobalt Strike is software for
Adversary Simulations and Red Team Operations which are security assessments that replicate the tactics and techniques
of an advanced adversary in a network. Modifications to the Packetbeat configuration can be made to include MD5 and
SHA256 hashing algorithms (the default is SHA1). See the References section for additional information on module
configuration.
","event.category:(network or network_traffic) and (tls.server.hash.md5:950098276A495286EB2A2556FBAB6D83 or
  tls.server.hash.sha1:6ECE5ECE4192683D2D84E25B0BA7E04F9CB7EB7C or
  tls.server.hash.sha256:87F2085C32B6A2CC709B365F55873E207A9CAA10BFFECF2FD16D3CF9D94D390C)
",critical,['T1071'],"{'fin6', 'cobalt strike', 'cobalt group', 'copykittens', 'tls', 'apt19', 'apt41', 'leviathan', 'darkhydrus', 'apt29', 'apt32'}",,"['tls', 'packetbeat', 'certificate', 'cobalt', 'sha256']"
e177,Roshal Archive (RAR) or PowerShell File Downloaded from the Internet,"Detects a Roshal Archive (RAR) file or PowerShell script downloaded from the internet by an internal host. Gaining
initial access to a system and then downloading encoded or encrypted tools to move laterally is a common practice for
adversaries as a way to protect their more valuable tools and tactics, techniques, and procedures (TTPs). This may be
atypical behavior for a managed network and can be indicative of malware, exfiltration, or command and control.
","event.category:(network or network_traffic) and network.protocol:http and
  (url.extension:(ps1 or rar) or url.path:(*.ps1 or *.rar)) and
    not destination.ip:(
      10.0.0.0/8 or
      127.0.0.0/8 or
      169.254.0.0/16 or
      172.16.0.0/12 or
      192.0.0.0/24 or
      192.0.0.0/29 or
      192.0.0.8/32 or
      192.0.0.9/32 or
      192.0.0.10/32 or
      192.0.0.170/32 or
      192.0.0.171/32 or
      192.0.2.0/24 or
      192.31.196.0/24 or
      192.52.193.0/24 or
      192.168.0.0/16 or
      192.88.99.0/24 or
      224.0.0.0/4 or
      100.64.0.0/10 or
      192.175.48.0/24 or
      198.18.0.0/15 or
      198.51.100.0/24 or
      203.0.113.0/24 or
      240.0.0.0/4 or
      ""::1"" or
      ""FE80::/10"" or
      ""FF00::/8""
    ) and
    source.ip:(
      10.0.0.0/8 or
      172.16.0.0/12 or
      192.168.0.0/16
    )
",medium,['T1105'],"{'ps1', 'fin7', 'malware', 'powershell'}",,"['malware', 'rar', 'roshal', 'downloading', 'encrypted']"
e178,Possible FIN7 DGA Command and Control Behavior,"This rule detects a known command and control pattern in network events. The FIN7 threat group is known to use this
command and control technique, while maintaining persistence in their target's network.
","event.category:(network OR network_traffic) AND type:(tls OR http) AND network.transport:tcp
AND destination.domain:/[a-zA-Z]{4,5}\.(pw|us|club|info|site|top)/ AND NOT destination.domain:zoom.us
",high,"['T1568', 'T1071']",{'fin7'},,"['fin7', 'threat', 'rule', 'detects', 'command']"
e179,Halfbaked Command and Control Beacon,"Halfbaked is a malware family used to establish persistence in a contested network. This rule detects a network activity
algorithm leveraged by Halfbaked implant beacons for command and control.
","event.category:(network OR network_traffic) AND network.protocol:http AND
  network.transport:tcp AND url.full:/http:\/\/[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}\/cd/ AND
  destination.port:(53 OR 80 OR 8080 OR 443)
",high,"['T1568', 'T1071']","{'halfbaked', 'fin7', 'malware', 'network'}",,"['halfbaked', 'malware', 'network', 'beacons', 'detects']"
e180,IPSEC NAT Traversal Port Activity,"This rule detects events that could be describing IPSEC NAT Traversal traffic. IPSEC is a VPN technology that allows one
system to talk to another using encrypted tunnels. NAT Traversal enables these tunnels to communicate over the Internet
where one of the sides is behind a NAT router gateway. This may be common on your network, but this technique is also
used by threat actors to avoid detection.
","event.category:(network or network_traffic) and network.transport:udp and destination.port:4500
",low,,{'vpn'},234.0,"['ipsec', 'vpn', 'nat', 'rule', 'gateway']"
e181,SMTP on Port 26/TCP,"This rule detects events that may indicate use of SMTP on TCP port 26. This port is commonly used by several popular
mail transfer agents to deconflict with the default SMTP port 25. This port has also been used by a malware family
called BadPatch for command and control of Windows systems.
","event.category:(network or network_traffic) and network.transport:tcp and (destination.port:26 or (event.dataset:zeek.smtp and destination.port:26))
",low,['T1048'],"{'malware', 'badpatch'}",,"['smtp', 'port', 'tcp', 'malware', 'mail']"
e182,RDP (Remote Desktop Protocol) from the Internet,"This rule detects network events that may indicate the use of RDP traffic from the Internet. RDP is commonly used by
system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be
directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or
backdoor vector.
","event.category:(network or network_traffic) and network.transport:tcp and (destination.port:3389 or event.dataset:zeek.rdp) and
  not source.ip:(
    10.0.0.0/8 or
    127.0.0.0/8 or
    169.254.0.0/16 or
    172.16.0.0/12 or
    192.0.0.0/24 or
    192.0.0.0/29 or
    192.0.0.8/32 or
    192.0.0.9/32 or
    192.0.0.10/32 or
    192.0.0.170/32 or
    192.0.0.171/32 or
    192.0.2.0/24 or
    192.31.196.0/24 or
    192.52.193.0/24 or
    192.168.0.0/16 or
    192.88.99.0/24 or
    224.0.0.0/4 or
    100.64.0.0/10 or
    192.175.48.0/24 or
    198.18.0.0/15 or
    198.51.100.0/24 or
    203.0.113.0/24 or
    240.0.0.0/4 or
    ""::1"" or
    ""FE80::/10"" or
    ""FF00::/8""
  ) and
  destination.ip:(
    10.0.0.0/8 or
    172.16.0.0/12 or
    192.168.0.0/16
  )
",medium,"['T1190', 'T1021']","{'rdp', 'network'}",19.0,"['rdp', 'remotely', 'traffic', 'network', 'internet']"
e183,Telnet Port Activity,"This rule detects network events that may indicate the use of Telnet traffic. Telnet is commonly used by system
administrators to remotely control older or embedded systems using the command line shell. It should almost never be
directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or
backdoor vector. As a plain-text protocol, it may also expose usernames and passwords to anyone capable of observing
the traffic.
","event.category:(network or network_traffic) and network.transport:tcp and destination.port:23
",medium,"['T1190', 'T1021']",{'network'},202.0,"['telnet', 'protocol', 'traffic', 'internet', 'network']"
e184,VNC (Virtual Network Computing) from the Internet,"This rule detects network events that may indicate the use of VNC traffic from the Internet. VNC is commonly used by
system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be
directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or
backdoor vector.
","event.category:(network or network_traffic) and network.transport:tcp and destination.port >= 5800 and destination.port <= 5810 and
  not source.ip:(
    10.0.0.0/8 or
    127.0.0.0/8 or
    169.254.0.0/16 or
    172.16.0.0/12 or
    192.0.0.0/24 or
    192.0.0.0/29 or
    192.0.0.8/32 or
    192.0.0.9/32 or
    192.0.0.10/32 or
    192.0.0.170/32 or
    192.0.0.171/32 or
    192.0.2.0/24 or
    192.31.196.0/24 or
    192.52.193.0/24 or
    192.168.0.0/16 or
    192.88.99.0/24 or
    224.0.0.0/4 or
    100.64.0.0/10 or
    192.175.48.0/24 or
    198.18.0.0/15 or
    198.51.100.0/24 or
    203.0.113.0/24 or
    240.0.0.0/4 or
    ""::1"" or
    ""FE80::/10"" or
    ""FF00::/8""
  ) and
  destination.ip:(
    10.0.0.0/8 or
    172.16.0.0/12 or
    192.168.0.0/16
  )
",high,"['T1190', 'T1219']",{'network'},229.0,"['vnc', 'remotely', 'network', 'traffic', 'rule']"
e185,VNC (Virtual Network Computing) to the Internet,"This rule detects network events that may indicate the use of VNC traffic to the Internet. VNC is commonly used by
system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be
directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or
backdoor vector.
","event.category:(network or network_traffic) and network.transport:tcp and destination.port >= 5800 and destination.port <= 5810 and
  source.ip:(
    10.0.0.0/8 or
    172.16.0.0/12 or
    192.168.0.0/16
  ) and
  not destination.ip:(
    10.0.0.0/8 or
    127.0.0.0/8 or
    169.254.0.0/16 or
    172.16.0.0/12 or
    192.0.0.0/24 or
    192.0.0.0/29 or
    192.0.0.8/32 or
    192.0.0.9/32 or
    192.0.0.10/32 or
    192.0.0.170/32 or
    192.0.0.171/32 or
    192.0.2.0/24 or
    192.31.196.0/24 or
    192.52.193.0/24 or
    192.168.0.0/16 or
    192.88.99.0/24 or
    224.0.0.0/4 or
    100.64.0.0/10 or
    192.175.48.0/24 or
    198.18.0.0/15 or
    198.51.100.0/24 or
    203.0.113.0/24 or
    240.0.0.0/4 or
    ""::1"" or
    ""FE80::/10"" or
    ""FF00::/8""
  )
",medium,['T1219'],{'network'},229.0,"['vnc', 'remotely', 'network', 'traffic', 'rule']"
e186,RPC (Remote Procedure Call) from the Internet,"This rule detects network events that may indicate the use of RPC traffic from the Internet. RPC is commonly used by
system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be
directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or
backdoor vector.
","event.category:(network or network_traffic) and network.transport:tcp and (destination.port:135 or event.dataset:zeek.dce_rpc) and
  not source.ip:(
    10.0.0.0/8 or
    127.0.0.0/8 or
    169.254.0.0/16 or
    172.16.0.0/12 or
    192.0.0.0/24 or
    192.0.0.0/29 or
    192.0.0.8/32 or
    192.0.0.9/32 or
    192.0.0.10/32 or
    192.0.0.170/32 or
    192.0.0.171/32 or
    192.0.2.0/24 or
    192.31.196.0/24 or
    192.52.193.0/24 or
    192.168.0.0/16 or
    192.88.99.0/24 or
    224.0.0.0/4 or
    100.64.0.0/10 or
    192.175.48.0/24 or
    198.18.0.0/15 or
    198.51.100.0/24 or
    203.0.113.0/24 or
    240.0.0.0/4 or
    ""::1"" or
    ""FE80::/10"" or
    ""FF00::/8""
  ) and
  destination.ip:(
    10.0.0.0/8 or
    172.16.0.0/12 or
    192.168.0.0/16
  )
",high,['T1190'],{'network'},229.0,"['rpc', 'traffic', 'network', 'internet', 'remotely']"
e187,RPC (Remote Procedure Call) to the Internet,"This rule detects network events that may indicate the use of RPC traffic to the Internet. RPC is commonly used by
system administrators to remotely control a system for maintenance or to use shared resources. It should almost never be
directly exposed to the Internet, as it is frequently targeted and exploited by threat actors as an initial access or
backdoor vector.
","event.category:(network or network_traffic) and network.transport:tcp and (destination.port:135 or event.dataset:zeek.dce_rpc) and
  source.ip:(
    10.0.0.0/8 or
    172.16.0.0/12 or
    192.168.0.0/16
  ) and
  not destination.ip:(
    10.0.0.0/8 or
    127.0.0.0/8 or
    169.254.0.0/16 or
    172.16.0.0/12 or
    192.0.0.0/24 or
    192.0.0.0/29 or
    192.0.0.8/32 or
    192.0.0.9/32 or
    192.0.0.10/32 or
    192.0.0.170/32 or
    192.0.0.171/32 or
    192.0.2.0/24 or
    192.31.196.0/24 or
    192.52.193.0/24 or
    192.168.0.0/16 or
    192.88.99.0/24 or
    224.0.0.0/4 or
    100.64.0.0/10 or
    192.175.48.0/24 or
    198.18.0.0/15 or
    198.51.100.0/24 or
    203.0.113.0/24 or
    240.0.0.0/4 or
    ""::1"" or
    ""FE80::/10"" or
    ""FF00::/8""
  )
",high,['T1190'],{'network'},229.0,"['rpc', 'traffic', 'network', 'internet', 'remotely']"
e188,SMB (Windows File Sharing) Activity to the Internet,"This rule detects network events that may indicate the use of Windows file sharing (also called SMB or CIFS) traffic to
the Internet. SMB is commonly used within networks to share files, printers, and other system resources amongst trusted
systems. It should almost never be directly exposed to the Internet, as it is frequently targeted and exploited by
threat actors as an initial access or backdoor vector or for data exfiltration.
","event.category:(network or network_traffic) and network.transport:tcp and (destination.port:(139 or 445) or event.dataset:zeek.smb) and
  source.ip:(
    10.0.0.0/8 or
    172.16.0.0/12 or
    192.168.0.0/16
  ) and
  not destination.ip:(
    10.0.0.0/8 or
    127.0.0.0/8 or
    169.254.0.0/16 or
    172.16.0.0/12 or
    192.0.0.0/24 or
    192.0.0.0/29 or
    192.0.0.8/32 or
    192.0.0.9/32 or
    192.0.0.10/32 or
    192.0.0.170/32 or
    192.0.0.171/32 or
    192.0.2.0/24 or
    192.31.196.0/24 or
    192.52.193.0/24 or
    192.168.0.0/16 or
    192.88.99.0/24 or
    224.0.0.0/4 or
    100.64.0.0/10 or
    192.175.48.0/24 or
    198.18.0.0/15 or
    198.51.100.0/24 or
    203.0.113.0/24 or
    240.0.0.0/4 or
    ""::1"" or
    ""FE80::/10"" or
    ""FF00::/8""
  )
",high,"['T1190', 'T1048']",{'network'},235.0,"['smb', 'cifs', 'network', 'traffic', 'share']"
e189,Inbound Connection to an Unsecure Elasticsearch Node,"Identifies Elasticsearch nodes that do not have Transport Layer Security (TLS), and/or lack authentication, and are
accepting inbound network connections over the default Elasticsearch port.
","event.category:network_traffic AND network.protocol:http AND status:OK AND destination.port:9200 AND network.direction:inbound AND NOT http.response.headers.content-type:""image/x-icon"" AND NOT _exists_:http.request.headers.authorization
",medium,['T1190'],{'tls'},236.0,"['elasticsearch', 'tls', 'security', 'nodes', 'authentication']"
e190,Credential Dumping - Detected - Elastic Endgame,"Elastic Endgame detected Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link
in the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:cred_theft_event or endgame.event_subtype_full:cred_theft_event)
",high,['T1003'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'credential', 'detected', 'event']"
e191,Credential Dumping - Prevented - Elastic Endgame,"Elastic Endgame prevented Credential Dumping. Click the Elastic Endgame icon in the event.module column or the link
in the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:cred_theft_event or endgame.event_subtype_full:cred_theft_event)
",medium,['T1003'],{'elastic endgame'},154.0,"['endgame', 'credential', 'elastic', 'event', 'dumping']"
e192,Adversary Behavior - Detected - Elastic Endgame,"Elastic Endgame detected an Adversary Behavior. Click the Elastic Endgame icon in the event.module column or the
link in the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and (event.action:rules_engine_event or endgame.event_subtype_full:rules_engine_event)
",medium,,{'elastic endgame'},154.0,"['endgame', 'elastic', 'adversary', 'rule', 'event']"
e193,Malware - Detected - Elastic Endgame,"Elastic Endgame detected Malware. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:file_classification_event or endgame.event_subtype_full:file_classification_event)
",critical,,"{'malware', 'elastic endgame'}",154.0,"['endgame', 'elastic', 'malware', 'detected', 'icon']"
e194,Malware - Prevented - Elastic Endgame,"Elastic Endgame prevented Malware. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:file_classification_event or endgame.event_subtype_full:file_classification_event)
",high,,"{'malware', 'elastic endgame'}",154.0,"['endgame', 'malware', 'elastic', 'prevented', 'rule']"
e195,Ransomware - Detected - Elastic Endgame,"Elastic Endgame detected ransomware. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:ransomware_event or endgame.event_subtype_full:ransomware_event)
",critical,,{'elastic endgame'},6.0,"['ransomware', 'endgame', 'elastic', 'detected', 'icon']"
e196,Ransomware - Prevented - Elastic Endgame,"Elastic Endgame prevented ransomware. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:ransomware_event or endgame.event_subtype_full:ransomware_event)
",high,,{'elastic endgame'},6.0,"['ransomware', 'endgame', 'elastic', 'prevented', 'rule']"
e197,Exploit - Detected - Elastic Endgame,"Elastic Endgame detected an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:exploit_event or endgame.event_subtype_full:exploit_event)
",high,['T1068'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'exploit', 'detected', 'event']"
e198,Exploit - Prevented - Elastic Endgame,"Elastic Endgame prevented an Exploit. Click the Elastic Endgame icon in the event.module column or the link in the
rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:exploit_event or endgame.event_subtype_full:exploit_event)
",medium,['T1068'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'exploit', 'prevented', 'rule']"
e199,External Alerts,"Generates a detection alert for each external alert written to the configured indices. Enabling this rule allows you to
immediately begin investigating external alerts in the app.
","event.kind:alert and not event.module:(endgame or endpoint)
",medium,,,17.0,"['alerts', 'indices', 'alert', 'detection', 'app']"
e200,Credential Manipulation - Detected - Elastic Endgame,"Elastic Endgame detected Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the
link in the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:token_manipulation_event or endgame.event_subtype_full:token_manipulation_event)
",high,['T1134'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'credential', 'event', 'rule']"
e201,Credential Manipulation - Prevented - Elastic Endgame,"Elastic Endgame prevented Credential Manipulation. Click the Elastic Endgame icon in the event.module column or the
link in the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:token_manipulation_event or endgame.event_subtype_full:token_manipulation_event)
",medium,['T1134'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'credential', 'event', 'rule']"
e202,Permission Theft - Detected - Elastic Endgame,"Elastic Endgame detected Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in
the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:token_protection_event or endgame.event_subtype_full:token_protection_event)
",high,['T1134'],"{'permission', 'elastic endgame'}",154.0,"['endgame', 'permission', 'elastic', 'theft', 'detected']"
e203,Permission Theft - Prevented - Elastic Endgame,"Elastic Endgame prevented Permission Theft. Click the Elastic Endgame icon in the event.module column or the link in
the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:token_protection_event or endgame.event_subtype_full:token_protection_event)
",medium,['T1134'],"{'permission', 'elastic endgame'}",154.0,"['permission', 'endgame', 'elastic', 'theft', 'prevented']"
e204,Process Injection - Detected - Elastic Endgame,"Elastic Endgame detected Process Injection. Click the Elastic Endgame icon in the event.module column or the link in
the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:detection and (event.action:kernel_shellcode_event or endgame.event_subtype_full:kernel_shellcode_event)
",high,['T1055'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'process', 'detected', 'event']"
e205,Process Injection - Prevented - Elastic Endgame,"Elastic Endgame prevented Process Injection. Click the Elastic Endgame icon in the event.module column or the link
in the rule.reference column for additional information.
","event.kind:alert and event.module:endgame and endgame.metadata.type:prevention and (event.action:kernel_shellcode_event or endgame.event_subtype_full:kernel_shellcode_event)
",medium,['T1055'],{'elastic endgame'},154.0,"['endgame', 'elastic', 'process', 'prevented', 'injection']"
e206,Exporting Exchange Mailbox via PowerShell,"Identifies the use of the Exchange PowerShell cmdlet, New-MailBoxExportRequest, to export the contents of a primary
mailbox or archive to a .pst file. Adversaries may target user email to collect sensitive information.
","process where event.type == ""start"" and
  process.name: (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and process.args : ""New-MailboxExportRequest*""
",medium,"['T1114', 'T1005']","{'dark', 'powershell'}",237.0,"['mailboxexportrequest', 'mailbox', 'powershell', 'exchange', 'export']"
e207,PowerShell Suspicious Script with Audio Capture Capabilities,"Detects PowerShell scripts that can record audio, a common feature in popular post-exploitation tooling.
","event.category:process and
  powershell.file.script_block_text : (
    ""Get-MicrophoneAudio"" or (waveInGetNumDevs and mciSendStringA)
  )
",medium,"['T1123', 'T1059']","{'ps1', 'powershell', 'powersploit'}",,"['audio', 'powershell', 'scripts', 'exploitation', 'detects']"
e208,PowerShell Keylogging Script,"Detects the use of Win32 API Functions that can be used to capture user keystrokes in PowerShell scripts.
Attackers use this technique to capture user input, looking for credentials and/or other valuable data.
","event.category:process and
  (
   powershell.file.script_block_text : (GetAsyncKeyState or NtUserGetAsyncKeyState or GetKeyboardState or ""Get-Keystrokes"") or
   powershell.file.script_block_text : (
        (SetWindowsHookA or SetWindowsHookW or SetWindowsHookEx or SetWindowsHookExA or NtUserSetWindowsHookEx) and
        (GetForegroundWindow or GetWindowTextA or GetWindowTextW or ""WM_KEYBOARD_LL"")
   )
   )
",high,"['T1056', 'T1059']","{'ps1', 'powershell', 'empire'}",,"['powershell', 'keystrokes', 'win32', 'scripts', 'attackers']"
e209,PowerShell Suspicious Script with Screenshot Capabilities,"Detects PowerShell scripts that can take screenshots, which is a common feature in post-exploitation kits and remote
access tools (RATs).
","event.category:process and
  powershell.file.script_block_text : (
    CopyFromScreen and
    (""System.Drawing.Bitmap"" or ""Drawing.Bitmap"")
  )
",medium,"['T1113', 'T1059']",{'powershell'},117.0,"['screenshots', 'powershell', 'scripts', 'tools', 'exploitation']"
e210,Encrypting Files with WinRar or 7z,"Identifies use of WinRar or 7z to create an encrypted files. Adversaries will often compress and encrypt data in
preparation for exfiltration.
","process where event.type == ""start"" and
  ((process.name:""rar.exe"" or process.code_signature.subject_name == ""win.rar GmbH"" or
      process.pe.original_file_name == ""Command line RAR"") and
    process.args == ""a"" and process.args : (""-hp*"", ""-p*"", ""-dw"", ""-tb"", ""-ta"", ""/hp*"", ""/p*"", ""/dw"", ""/tb"", ""/ta""))

  or
  (process.pe.original_file_name in (""7z.exe"", ""7za.exe"") and
     process.args == ""a"" and process.args : (""-p*"", ""-sdel""))

  /* uncomment if noisy for backup software related FPs */
  /* not process.parent.executable : (""C:\\Program Files\\*.exe"", ""C:\\Program Files (x86)\\*.exe"") */
",medium,['T1560'],"{'turla', 'crutch'}",238.0,"['winrar', '7z', 'files', 'encrypted', 'encrypt']"
e211,Network Connection via Certutil,"Identifies certutil.exe making a network connection. Adversaries could abuse certutil.exe to download a certificate, or
malware, from a remote URL.
","sequence by process.entity_id
  [process where process.name : ""certutil.exe"" and event.type == ""start""]
  [network where process.name : ""certutil.exe"" and
    not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
                                  ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"",
                                  ""192.0.0.171/32"", ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"",
                                  ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"", ""192.175.48.0/24"",
                                  ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
                                  ""FE80::/10"", ""FF00::/8"")]
",low,['T1105'],"{'malware', 'exe', 'stop', 'certutil'}",,"['certutil', 'certificate', 'malware', 'exe', 'adversaries']"
e212,Connection to Commonly Abused Web Services,"Adversaries may implement command and control (C2) communications that use common web services to hide their
activity. This attack technique is typically targeted at an organization and uses web services common to the victim
network, which allows the adversary to blend into legitimate traffic activity. These popular services are typically
targeted since they have most likely been used before compromise, which helps malicious traffic blend in.
","network where network.protocol == ""dns"" and
    process.name != null and user.id not in (""S-1-5-18"", ""S-1-5-19"", ""S-1-5-20"") and
    /* Add new WebSvc domains here */
    dns.question.name :
    (
        ""raw.githubusercontent.*"",
        ""*.pastebin.*"",
        ""*drive.google.*"",
        ""*docs.live.*"",
        ""*api.dropboxapi.*"",
        ""*dropboxusercontent.*"",
        ""*onedrive.*"",
        ""*4shared.*"",
        ""*.file.io"",
        ""*filebin.net"",
        ""*slack-files.com"",
        ""*ghostbin.*"",
        ""*ngrok.*"",
        ""*portmap.*"",
        ""*serveo.net"",
        ""*localtunnel.me"",
        ""*pagekite.me"",
        ""*localxpose.io"",
        ""*notabug.org"",
        ""rawcdn.githack.*"",
        ""paste.nrecom.net"",
        ""zerobin.net"",
        ""controlc.com"",
        ""requestbin.net"",
        ""cdn.discordapp.com"",
        ""discordapp.com"",
        ""discord.com""
    ) and
    /* Insert noisy false positives here */
    not process.executable :
    (
      ""?:\\Program Files\\*.exe"",
      ""?:\\Program Files (x86)\\*.exe"",
      ""?:\\Windows\\System32\\WWAHost.exe"",
      ""?:\\Windows\\System32\\smartscreen.exe"",
      ""?:\\Windows\\System32\\MicrosoftEdgeCP.exe"",
      ""?:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\*\\MsMpEng.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Programs\\Fiddler\\Fiddler.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe"",
      ""?:\\Windows\\system32\\mobsync.exe"",
      ""?:\\Windows\\SysWOW64\\mobsync.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Discord\\app-*\\Discord.exe""
    )
",low,"['T1102', 'T1567']","{'ngrok', 'stop'}",76.0,"['attack', 'adversaries', 'malicious', 'targeted', 'adversary']"
e213,Potential DNS Tunneling via NsLookup,"This rule identifies a large number (15) of nslookup.exe executions with an explicit query type from the same host. This
may indicate command and control activity utilizing the DNS protocol.
","event.category:process and event.type:start and process.name:nslookup.exe and process.args:(-querytype=* or -qt=* or -q=* or -type=*)
",medium,['T1071'],"{'exe', 'dns'}",162.0,"['nslookup', 'dns', 'host', 'exe', 'protocol']"
e214,Connection to Commonly Abused Free SSL Certificate Providers,"Identifies unusual processes connecting to domains using known free SSL certificates. Adversaries may employ a known
encryption algorithm to conceal command and control traffic.
","network where network.protocol == ""dns"" and
  /* Add new free SSL certificate provider domains here */
  dns.question.name : (""*letsencrypt.org"", ""*.sslforfree.com"", ""*.zerossl.com"", ""*.freessl.org"") and

  /* Native Windows process paths that are unlikely to have network connections to domains secured using free SSL certificates */
  process.executable : (""C:\\Windows\\System32\\*.exe"",
                        ""C:\\Windows\\System\\*.exe"",
	                  ""C:\\Windows\\SysWOW64\\*.exe"",
		          ""C:\\Windows\\Microsoft.NET\\Framework*\\*.exe"",
		          ""C:\\Windows\\explorer.exe"",
		          ""C:\\Windows\\notepad.exe"") and

  /* Insert noisy false positives here */
  not process.name : (""svchost.exe"", ""MicrosoftEdge*.exe"", ""msedge.exe"")
",low,['T1573'],,239.0,"['ssl', 'encryption', 'certificates', 'adversaries', 'domains']"
e215,Potential Command and Control via Internet Explorer,"Identifies instances of Internet Explorer (iexplore.exe) being started via the Component Object Model (COM) making
unusual network connections. Adversaries could abuse Internet Explorer via COM to avoid suspicious processes making
network connections and bypass host-based firewall restrictions.
","sequence by host.id, user.name with maxspan = 5s
  [library where dll.name : ""IEProxy.dll"" and process.name : (""rundll32.exe"", ""regsvr32.exe"")]
  [process where event.type == ""start"" and process.parent.name : ""iexplore.exe"" and process.parent.args : ""-Embedding""]
  /* IE started via COM in normal conditions makes few connections, mainly to Microsoft and OCSP related domains, add FPs here */
  [network where network.protocol == ""dns"" and process.name : ""iexplore.exe"" and
   not dns.question.name :
   (
    ""*.microsoft.com"",
    ""*.digicert.com"",
    ""*.msocsp.com"",
    ""*.windowsupdate.com"",
    ""*.bing.com"",
    ""*.identrust.com"",
    ""*.sharepoint.com"",
    ""*.office365.com"",
    ""*.office.com""
    )
  ] /* with runs=5 */
",medium,"['T1071', 'T1559']","{'exe', 'rundll32'}",178.0,"['iexplore', 'exe', 'explorer', 'firewall', 'internet']"
e216,Port Forwarding Rule Addition,"Identifies the creation of a new port forwarding rule. An adversary may abuse this technique to bypass network
segmentation restrictions.
","registry where registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\Services\\PortProxy\\v4tov4\\*""
",medium,['T1572'],"{'stop', 'network'}",230.0,"['port', 'forwarding', 'adversary', 'restrictions', 'network']"
e217,Potential Remote Desktop Tunneling Detected,"Identifies potential use of an SSH utility to establish RDP over a reverse SSH Tunnel. This can be used by attackers to
enable routing of network packets that would otherwise not reach their intended destination.
","process where event.type == ""start"" and
  /* RDP port and usual SSH tunneling related switches in command line */
  process.args : ""*:3389"" and
  process.args : (""-L"", ""-P"", ""-R"", ""-pw"", ""-ssh"")
",high,['T1572'],"{'ssh', 'rdp'}",240.0,"['rdp', 'ssh', 'tunnel', 'attackers', 'reverse']"
e218,Remote File Download via Desktopimgdownldr Utility,"Identifies the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to
download arbitrary files as an alternative to certutil.
","process where event.type == ""start"" and
  (process.name : ""desktopimgdownldr.exe"" or process.pe.original_file_name == ""desktopimgdownldr.exe"") and
  process.args : ""/lockscreenurl:http*""
",medium,['T1105'],"{'lockscreen', 'stop', 'certutil'}",,"['certutil', 'desktopimgdownldr', 'file', 'files', 'remote']"
e219,Remote File Download via MpCmdRun,Identifies the Windows Defender configuration utility (MpCmdRun.exe) being used to download a remote file.,"process where event.type == ""start"" and
  (process.name : ""MpCmdRun.exe"" or process.pe.original_file_name == ""MpCmdRun.exe"") and
   process.args : ""-DownloadFile"" and process.args : ""-url"" and process.args : ""-path""
",medium,['T1105'],{'stop'},241.0,"['mpcmdrun', 'file', 'defender', 'download', 'remote']"
e220,Remote File Download via PowerShell,Identifies powershell.exe being used to download an executable file from an untrusted remote destination.,"sequence by host.id, process.entity_id with maxspan=30s
  [network where process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and network.protocol == ""dns"" and
   not dns.question.name : (""localhost"", ""*.microsoft.com"", ""*.azureedge.net"", ""*.powershellgallery.com"", ""*.windowsupdate.com"", ""metadata.google.internal"") and
   not user.domain : ""NT AUTHORITY""]
    [file where process.name : ""powershell.exe"" and event.type == ""creation"" and file.extension : (""exe"", ""dll"", ""ps1"", ""bat"") and
   not file.name : ""__PSScriptPolicy*.ps1""]
",medium,"['T1059', 'T1105']","{'ps1', 'stop', 'exe', 'powershell'}",5.0,"['powershell', 'executable', 'exe', 'untrusted', 'file']"
e221,Remote File Download via Script Interpreter,"Identifies built-in Windows script interpreters (cscript.exe or wscript.exe) being used to download an executable file
from a remote destination.
","sequence by host.id, process.entity_id
  [network where process.name : (""wscript.exe"", ""cscript.exe"") and network.protocol != ""dns"" and
   network.direction : (""outgoing"", ""egress"") and network.type == ""ipv4"" and destination.ip != ""127.0.0.1""
  ]
  [file where event.type == ""creation"" and file.extension : (""exe"", ""dll"")]
",medium,['T1105'],{'stop'},34.0,"['wscript', 'cscript', 'executable', 'script', 'interpreters']"
e222,SUNBURST Command and Control Activity,"The malware known as SUNBURST targets the SolarWind's Orion business software for command and control. This rule detects
post-exploitation command and control activity of the SUNBURST backdoor.
","network where event.type == ""protocol"" and network.protocol == ""http"" and
  process.name : (""ConfigurationWizard.exe"",
                  ""NetFlowService.exe"",
                  ""NetflowDatabaseMaintenance.exe"",
                  ""SolarWinds.Administration.exe"",
                  ""SolarWinds.BusinessLayerHost.exe"",
                  ""SolarWinds.BusinessLayerHostx64.exe"",
                  ""SolarWinds.Collector.Service.exe"",
                  ""SolarwindsDiagnostics.exe"") and
  (
    (
      (http.request.body.content : ""*/swip/Upload.ashx*"" and http.request.body.content : (""POST*"", ""PUT*"")) or
      (http.request.body.content : (""*/swip/SystemDescription*"", ""*/swip/Events*"") and http.request.body.content : (""GET*"", ""HEAD*""))
    ) and
    not http.request.body.content : ""*solarwinds.com*""
  )
",high,"['T1195', 'T1071']","{'malware', 'sunburst', 'stop', 'solarwinds'}",,"['sunburst', 'solarwind', 'malware', 'backdoor', 'orion']"
e223,Remote File Copy via TeamViewer,Identifies an executable or script file remotely downloaded via a TeamViewer transfer session.,"file where event.type == ""creation"" and process.name : ""TeamViewer.exe"" and
  file.extension : (""exe"", ""dll"", ""scr"", ""com"", ""bat"", ""ps1"", ""vbs"", ""vbe"", ""js"", ""wsh"", ""hta"")
",medium,"['T1105', 'T1219']","{'ps1', 'stop'}",242.0,"['teamviewer', 'executable', 'file', 'remotely', 'downloaded']"
e224,Privileged Account Brute Force,"Identifies multiple consecutive logon failures targeting an Admin account from the same source address and within a
short time interval. Adversaries will often brute force login attempts across multiple users with a common or known
password, in an attempt to gain access to accounts.
","sequence by host.id, source.ip with maxspan=10s
  [authentication where event.action == ""logon-failed"" and
    winlog.logon.type : ""Network"" and
    source.ip != null and source.ip != ""127.0.0.1"" and source.ip != ""::1"" and user.name : ""*admin*"" and

    /* noisy failure status codes often associated to authentication misconfiguration */
    not winlog.event_data.Status : (""0xC000015B"", ""0XC000005E"", ""0XC0000133"", ""0XC0000192"")] with runs=5
",medium,['T1110'],{'winlog'},,"['logon', 'brute', 'login', 'attempts', 'accounts']"
e225,Multiple Logon Failure Followed by Logon Success,"Identifies multiple logon failures followed by a successful one from the same source address. Adversaries will often
brute force login attempts across multiple users with a common or known password, in an attempt to gain access to
accounts.
","sequence by host.id, source.ip with maxspan=5s
  [authentication where event.action == ""logon-failed"" and
    /* event 4625 need to be logged */
    winlog.logon.type : ""Network"" and
    source.ip != null and source.ip != ""127.0.0.1"" and source.ip != ""::1"" and
    not user.name : (""ANONYMOUS LOGON"", ""-"", ""*$"") and not user.domain == ""NT AUTHORITY"" and

    /* noisy failure status codes often associated to authentication misconfiguration */
    not winlog.event_data.Status : (""0xC000015B"", ""0XC000005E"", ""0XC0000133"", ""0XC0000192"")] with runs=5
  [authentication where event.action == ""logged-in"" and
    /* event 4624 need to be logged */
    winlog.logon.type : ""Network"" and
    source.ip != null and source.ip != ""127.0.0.1"" and source.ip != ""::1"" and
    not user.name : (""ANONYMOUS LOGON"", ""-"", ""*$"") and not user.domain == ""NT AUTHORITY""]
",medium,['T1110'],"{'winlog', 'password'}",,"['logon', 'login', 'brute', 'attempts', 'password']"
e226,Multiple Logon Failure from the same Source Address,"Identifies multiple consecutive logon failures from the same source address and within a short time interval.
Adversaries will often brute force login attempts across multiple users with a common or known password, in an attempt
to gain access to accounts.
","sequence by host.id, source.ip with maxspan=10s
  [authentication where event.action == ""logon-failed"" and
    /* event 4625 need to be logged */
    winlog.logon.type : ""Network"" and
    source.ip != null and source.ip != ""127.0.0.1"" and source.ip != ""::1"" and
    not user.name : (""ANONYMOUS LOGON"", ""-"", ""*$"") and not user.domain == ""NT AUTHORITY"" and

    /* 
    noisy failure status codes often associated to authentication misconfiguration :
     0xC000015B - The user has not been granted the requested logon type (also called the logon right) at this machine.
     0XC000005E	- There are currently no logon servers available to service the logon request.
     0XC0000133	- Clocks between DC and other computer too far out of sync.
     0XC0000192	An attempt was made to logon, but the Netlogon service was not started.
    */
    not winlog.event_data.Status : (""0xC000015B"", ""0XC000005E"", ""0XC0000133"", ""0XC0000192"")] with runs=10
",medium,['T1110'],"{'winlog', 'password'}",,"['logon', 'brute', 'login', 'attempts', 'password']"
e227,Potential Credential Access via Windows Utilities,"Identifies the execution of known Windows utilities often abused to dump LSASS memory or the Active Directory database
(NTDS.dit) in preparation for credential access.
","process where event.type == ""start"" and
/* update here with any new lolbas with dump capability */
(process.pe.original_file_name == ""procdump"" and process.args : ""-ma"") or
(process.name : ""ProcessDump.exe"" and not process.parent.executable regex~ """"""C:\\Program Files( \(x86\))?\\Cisco Systems\\.*"""""") or
(process.pe.original_file_name == ""WriteMiniDump.exe"" and not process.parent.executable regex~ """"""C:\\Program Files( \(x86\))?\\Steam\\.*"""""") or
(process.pe.original_file_name == ""RUNDLL32.EXE"" and (process.args : ""MiniDump*"" or process.command_line : ""*comsvcs.dll*#24*"")) or
(process.pe.original_file_name == ""RdrLeakDiag.exe"" and process.args : ""/fullmemdmp"") or
(process.pe.original_file_name == ""SqlDumper.exe"" and process.args : ""0x01100*"") or
(process.pe.original_file_name == ""TTTracer.exe"" and process.args : ""-dumpFull"" and process.args : ""-attach"") or
(process.pe.original_file_name == ""ntdsutil.exe"" and process.args : ""create*full*"") or
(process.pe.original_file_name == ""diskshadow.exe"" and process.args : ""/s"")
",high,['T1003'],"{'rundll32', 'lsass'}",243.0,"['lsass', 'ntds', 'memory', 'windows', 'execution']"
e228,NTDS or SAM Database File Copied,"Identifies a copy operation of the Active Directory Domain Database (ntds.dit) or Security Account Manager (SAM) files.
Those files contain sensitive information including hashed domain and/or local credentials.
","process where event.type == ""start"" and
  (
    (process.pe.original_file_name in (""Cmd.Exe"", ""PowerShell.EXE"", ""XCOPY.EXE"") and
       process.args : (""copy"", ""xcopy"", ""Copy-Item"", ""move"", ""cp"", ""mv"")
    ) or
    (process.pe.original_file_name : ""esentutl.exe"" and process.args : (""*/y*"", ""*/vss*"", ""*/d*""))
  ) and
  process.args : (""*\\ntds.dit"", ""*\\config\\SAM"", ""\\*\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy*\\*"", ""*/system32/config/SAM*"")
",high,['T1003'],"{'pysa', 'mespinoza', 'esentutl'}",,"['ntds', 'credentials', 'files', 'sam', 'security']"
e229,Potential Credential Access via Trusted Developer Utility,"An instance of MSBuild, the Microsoft Build Engine, loaded DLLs (dynamically linked libraries) responsible for Windows
credential management. This technique is sometimes used for credential dumping.
","sequence by process.entity_id
 [process where event.type == ""start"" and (process.name : ""MSBuild.exe"" or process.pe.original_file_name == ""MSBuild.exe"")]
 [any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
  (dll.name : (""vaultcli.dll"", ""SAMLib.DLL"") or file.name : (""vaultcli.dll"", ""SAMLib.DLL""))]
",high,['T1003'],"{'dll', 'msbuild', 'registry modification', 'stop'}",101.0,"['msbuild', 'dlls', 'microsoft', 'credential', 'windows']"
e230,Potential Credential Access via DCSync,"This rule identifies when a User Account starts the Active Directory Replication Process. Attackers can use the DCSync
technique to get credential information of individual accounts or the entire domain, thus compromising the entire
domain.
","any where event.action == ""Directory Service Access"" and
  event.code == ""4662"" and winlog.event_data.Properties : (

    /* Control Access Rights/Permissions Symbol */

    ""*DS-Replication-Get-Changes*"",
    ""*DS-Replication-Get-Changes-All*"",
    ""*DS-Replication-Get-Changes-In-Filtered-Set*"",

    /* Identifying GUID used in ACE */

    ""*1131f6ad-9c07-11d1-f79f-00c04fc2dcd2*"",
    ""*1131f6aa-9c07-11d1-f79f-00c04fc2dcd2*"",
    ""*89e95b76-444d-4c62-991a-0facbeda640c*"")

    /* The right to perform an operation controlled by an extended access right. */

    and winlog.event_data.AccessMask : ""0x100"" and
    not winlog.event_data.SubjectUserName : (""*$"", ""MSOL_*"")
",high,['T1003'],"{'winlog', 'mimikatz'}",,"['dcsync', 'replication', 'domain', 'accounts', 'attackers']"
e231,Kerberos Pre-authentication Disabled for User,"Identifies the modification of an account's Kerberos pre-authentication options. An adversary with GenericWrite/GenericAll rights over
the account can maliciously modify these settings to perform offline password cracking attacks such as AS-REP roasting.
","event.code:4738 and message:""'Don't Require Preauth' - Enabled""
",medium,['T1558'],"{'kerberos', 'password'}",310.0,"['kerberos', 'authentication', 'maliciously', 'password', 'attacks']"
e232,Creation or Modification of Domain Backup DPAPI private key,"Identifies the creation or modification of Domain Backup private keys. Adversaries may extract the Data Protection API
(DPAPI) domain backup key from a Domain Controller (DC) to be able to decrypt any domain user master key file.
","file where event.type != ""deletion"" and file.name : (""ntds_capi_*.pfx"", ""ntds_capi_*.pvk"")
",high,"['T1552', 'T1555']","{'mimikatz', 'backup'}",,"['dpapi', 'backup', 'dc', 'decrypt', 'domain']"
e233,Credential Acquisition via Registry Hive Dumping,Identifies attempts to export a registry hive which may contain credentials using the Windows reg.exe tool.,"process where event.type == ""start"" and
 process.pe.original_file_name == ""reg.exe"" and
 process.args : (""save"", ""export"") and
 process.args : (""hklm\\sam"", ""hklm\\security"")
",high,['T1003'],"{'hive', 'exe', 'registry modification'}",,"['registry', 'credentials', 'hive', 'exe', 'export']"
e234,Full User-Mode Dumps Enabled System-Wide,"Identifies the enable of the full user-mode dumps feature system-wide. This feature allows Windows Error Reporting (WER)
to collect data after an application crashes. This setting is a requirement for the LSASS Shtinkering attack, which
fakes the communication of a crash on LSASS, generating a dump of the process memory, which gives the attacker access to
the credentials present on the system without having to bring malware to the system. This setting is not enabled by
default, and applications must create their registry subkeys to hold settings that enable them to collect dumps.
","registry where registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\DumpType"" and
    registry.data.strings : (""2"", ""0x00000002"") and
    not (process.executable : ""?:\\Windows\\system32\\svchost.exe"" and user.id : (""S-1-5-18"", ""S-1-5-19"", ""S-1-5-20""))
",medium,"['T1112', 'T1003']","{'registry modification', 'lsass'}",29.0,"['dumps', 'dump', 'registry', 'crashes', 'crash']"
e235,Microsoft IIS Service Account Password Dumped,"Identifies the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords. An attacker
with IIS web server access via a web shell can decrypt and dump the IIS AppPool service account password using AppCmd.
","process where event.type == ""start"" and
   (process.name : ""appcmd.exe"" or process.pe.original_file_name == ""appcmd.exe"") and
   process.args : ""/list"" and process.args : ""/text*password""
",high,['T1003'],{'password'},244.0,"['iis', 'appcmd', 'passwords', 'apppool', 'password']"
e236,Microsoft IIS Connection Strings Decryption,"Identifies use of aspnet_regiis to decrypt Microsoft IIS connection strings. An attacker with Microsoft IIS web server
access via a webshell or alike can decrypt and dump any hardcoded connection strings, such as the MSSQL service account
password using aspnet_regiis command.
","process where event.type == ""start"" and
  (process.name : ""aspnet_regiis.exe"" or process.pe.original_file_name == ""aspnet_regiis.exe"") and
  process.args : ""connectionStrings"" and process.args : ""-pdf""
",high,['T1003'],{'password'},245.0,"['aspnet_regiis', 'iis', 'decrypt', 'mssql', 'password']"
e237,Kerberos Traffic from Unusual Process,"Identifies network connections to the standard Kerberos port from an unusual process. On Windows, the only process that
normally performs Kerberos traffic from a domain joined host is lsass.exe.
","network where event.type == ""start"" and network.direction : (""outgoing"", ""egress"") and
 destination.port == 88 and source.port >= 49152 and
 not process.executable :
            (""?:\\Windows\\System32\\lsass.exe"",
             ""System"",
             ""\\device\\harddiskvolume?\\windows\\system32\\lsass.exe"",
             ""?:\\Program Files\\rapid7\\nexpose\\nse\\.DLLCACHE\\nseserv.exe"",
             ""?:\\Program Files (x86)\\GFI\\LanGuard 12 Agent\\lnsscomm.exe"",
             ""?:\\Program Files (x86)\\SuperScan\\scanner.exe"",
             ""?:\\Program Files (x86)\\Nmap\\nmap.exe"",
             ""\\device\\harddiskvolume?\\program files (x86)\\nmap\\nmap.exe"") and
 destination.address !=""127.0.0.1"" and destination.address !=""::1"" and
 /* insert false positives here */
 not process.name in (""swi_fc.exe"", ""fsIPcam.exe"", ""IPCamera.exe"", ""MicrosoftEdgeCP.exe"", ""MicrosoftEdge.exe"", ""iexplore.exe"", ""chrome.exe"", ""msedge.exe"", ""opera.exe"", ""firefox.exe"")
",medium,['T1558'],"{'kerberos', 'stop', 'lsass'}",116.0,"['kerberos', 'lsass', 'connections', 'port', 'domain']"
e238,Suspicious LSASS Access via MalSecLogon,"Identifies suspicious access to LSASS handle from a call trace pointing to seclogon.dll and with a suspicious access
rights value. This may indicate an attempt to leak an LSASS handle via abusing the Secondary Logon service in preparation
for credential access.
","process where event.code == ""10"" and
  winlog.event_data.TargetImage : ""?:\\WINDOWS\\system32\\lsass.exe"" and

   /* seclogon service accessing lsass */
  winlog.event_data.CallTrace : ""*seclogon.dll*"" and process.name : ""svchost.exe"" and

   /* PROCESS_CREATE_PROCESS & PROCESS_DUP_HANDLE & PROCESS_QUERY_INFORMATION */
  winlog.event_data.GrantedAccess == ""0x14c0""
",high,['T1003'],"{'winlog', 'lsass'}",,"['lsass', 'seclogon', 'trace', 'suspicious', 'credential']"
e239,LSASS Memory Dump Creation,"Identifies the creation of a Local Security Authority Subsystem Service (lsass.exe) default memory dump. This may
indicate a credential access attempt via trusted system utilities such as Task Manager (taskmgr.exe) and SQL Dumper
(sqldumper.exe) or known pentesting tools such as Dumpert and AndrewSpecial.
","file where file.name : (""lsass*.dmp"", ""dumpert.dmp"", ""Andrew.dmp"", ""SQLDmpr*.mdmp"", ""Coredump.dmp"") and

 not (process.executable : (""?:\\Program Files\\Microsoft SQL Server\\*\\Shared\\SqlDumper.exe"", ""?:\\Windows\\System32\\dllhost.exe"") and
      file.path : (""?:\\Program Files\\Microsoft SQL Server\\*\\Shared\\ErrorDumps\\SQLDmpr*.mdmp"",
                   ""?:\\*\\Reporting Services\\Logfiles\\SQLDmpr*.mdmp"")) and

 not (process.executable : ""?:\\WINDOWS\\system32\\WerFault.exe"" and
      file.path : ""?:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\lsass.exe.*.dmp"")
",high,['T1003'],"{'exe', 'lsass'}",243.0,"['lsass', 'sqldumper', 'dumper', 'taskmgr', 'exe']"
e240,LSASS Memory Dump Handle Access,"Identifies handle requests for the Local Security Authority Subsystem Service (LSASS) object access with
specific access masks that many tools with a capability to dump memory to disk use (0x1fffff, 0x1010, 0x120089).
This rule is tool agnostic as it has been validated against a host of various LSASS dump tools such as SharpDump,
Procdump, Mimikatz, Comsvcs etc. It detects this behavior at a low level and does not depend on a specific tool or dump
file name.
","any where event.action == ""File System"" and event.code == ""4656"" and

    winlog.event_data.ObjectName : (
        ""?:\\Windows\\System32\\lsass.exe"",
        ""\\Device\\HarddiskVolume?\\Windows\\System32\\lsass.exe"",
        ""\\Device\\HarddiskVolume??\\Windows\\System32\\lsass.exe"") and

    /* The right to perform an operation controlled by an extended access right. */

    (winlog.event_data.AccessMask : (""0x1fffff"" , ""0x1010"", ""0x120089"", ""0x1F3FFF"") or
     winlog.event_data.AccessMaskDescription : (""READ_CONTROL"", ""Read from process memory""))

     /* Common Noisy False Positives */

    and not winlog.event_data.ProcessName : (
        ""?:\\Program Files\\*.exe"",
        ""?:\\Program Files (x86)\\*.exe"",
        ""?:\\Windows\\system32\\wbem\\WmiPrvSE.exe"",
        ""?:\\Windows\\System32\\dllhost.exe"",
        ""?:\\Windows\\System32\\svchost.exe"",
        ""?:\\Windows\\System32\\msiexec.exe"",
        ""?:\\ProgramData\\Microsoft\\Windows Defender\\*.exe"",
        ""?:\\Windows\\explorer.exe"")
",high,['T1003'],"{'stop', 'winlog', 'mimikatz', 'lsass'}",,"['lsass', 'procdump', 'dump', 'security', 'access']"
e241,Mimikatz Memssp Log File Detected,Identifies the password log file from the default Mimikatz memssp module.,"file where file.name : ""mimilsa.log"" and process.name : ""lsass.exe""
",high,['T1003'],"{'mimikatz', 'password'}",,"['memssp', 'password', 'mimikatz', 'log', 'file']"
e242,Potential Invoke-Mimikatz PowerShell Script,"Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many
other features that make it useful for testing the security of networks. This rule detects Invoke-Mimikatz PowerShell
script and alike.
","event.category:process and
powershell.file.script_block_text:(
  (DumpCreds and
  DumpCerts) or
  ""sekurlsa::logonpasswords"" or
  (""crypto::certificates"" and
  ""CERT_SYSTEM_STORE_LOCAL_MACHINE"")
)
",high,['T1003'],"{'password', 'powershell', 'empire', 'mimikatz', 'ps1'}",,"['mimikatz', 'passwords', 'logins', 'powershell', 'credential']"
e243,Modification of WDigest Security Provider,"Identifies attempts to modify the WDigest security provider in the registry to force the user's password to be stored in
clear text in memory. This behavior can be indicative of an adversary attempting to weaken the security configuration of
an endpoint. Once the UseLogonCredential value is modified, the adversary may attempt to dump clear text passwords from
memory.
","registry where event.type : (""creation"", ""change"") and
    registry.path :
        ""HKLM\\SYSTEM\\*ControlSet*\\Control\\SecurityProviders\\WDigest\\UseLogonCredential""
    and registry.data.strings : (""1"", ""0x00000001"") and
    not (process.executable : ""?:\\Windows\\System32\\svchost.exe"" and user.id : ""S-1-5-18"")
",high,['T1003'],"{'registry modification', 'mimikatz', 'password'}",,"['uselogoncredential', 'passwords', 'password', 'registry', 'security']"
e244,Windows Registry File Creation in SMB Share,"Identifies the creation or modification of a medium-size registry hive file on a Server Message Block (SMB) share, which
may indicate an exfiltration attempt of a previously dumped Security Account Manager (SAM) registry hive for credential
extraction on an attacker-controlled system.
","file where event.type == ""creation"" and
 /* regf file header */
 file.Ext.header_bytes : ""72656766*"" and file.size >= 30000 and
 process.pid == 4 and user.id : ""s-1-5-21*""
",medium,"['T1021', 'T1003']","{'hive', 'registry modification'}",,"['smb', 'hive', 'registry', 'sam', 'file']"
e245,Network Logon Provider Registry Modification,"Identifies the modification of the network logon provider registry. Adversaries may register a rogue network logon
provider module for persistence and/or credential access via intercepting the authentication credentials in clear text
during user logon.
","registry where registry.data.strings != null and
 registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\Services\\*\\NetworkProvider\\ProviderPath"" and
 /* Excluding default NetworkProviders RDPNP, LanmanWorkstation and webclient. */
 not ( user.id : ""S-1-5-18"" and
       registry.data.strings in
                (""%SystemRoot%\\System32\\ntlanman.dll"",
                 ""%SystemRoot%\\System32\\drprov.dll"",
                 ""%SystemRoot%\\System32\\davclnt.dll"")
      )
",medium,"['T1543', 'T1556']","{'registry modification', 'rogue'}",246.0,"['authentication', 'logon', 'credentials', 'registry', 'register']"
e246,PowerShell MiniDump Script,"This rule detects PowerShell scripts capable of dumping process memory using WindowsErrorReporting or
Dbghelp.dll MiniDumpWriteDump. Attackers can use this tooling to dump LSASS and get access to credentials.
","event.category:process and powershell.file.script_block_text:(MiniDumpWriteDump or MiniDumpWithFullMemory or pmuDetirWpmuDiniM)
",high,"['T1059', 'T1003']","{'dll', 'powersploit', 'powershell', 'ps1', 'lsass'}",,"['windowserrorreporting', 'lsass', 'dll', 'powershell', 'dumping']"
e247,PowerShell Kerberos Ticket Request,"Detects PowerShell scripts that have the capability of requesting kerberos tickets, which is a common step in
Kerberoasting toolkits to crack service accounts.
","event.category:process and
  powershell.file.script_block_text : (
    KerberosRequestorSecurityToken
  )
",medium,"['T1558', 'T1059', 'T1003']","{'ps1', 'powershell', 'empire', 'kerberos'}",,"['kerberoasting', 'kerberos', 'powershell', 'scripts', 'accounts']"
e248,Potential Credential Access via DuplicateHandle in LSASS,"Identifies suspicious access to an LSASS handle via DuplicateHandle from an unknown call trace module. This may indicate
an attempt to bypass the NtOpenProcess API to evade detection and dump LSASS memory for credential access.
","process where event.code == ""10"" and

 /* LSASS requesting DuplicateHandle access right to another process */
 process.name : ""lsass.exe"" and winlog.event_data.GrantedAccess == ""0x40"" and

 /* call is coming from an unknown executable region */
 winlog.event_data.CallTrace : ""*UNKNOWN*""
",medium,['T1003'],"{'winlog', 'lsass'}",,"['lsass', 'ntopenprocess', 'trace', 'suspicious', 'duplicatehandle']"
e249,Potential Local NTLM Relay via HTTP,"Identifies attempt to coerce a local NTLM authentication via HTTP using the Windows Printer Spooler service as a target.
An adversary may use this primitive in combination with other techniques to elevate privileges on a compromised system.
","process where event.type == ""start"" and
  process.name : ""rundll32.exe"" and

  /* Rundll32 WbeDav Client  */
  process.args : (""?:\\Windows\\System32\\davclnt.dll,DavSetCookie"", ""?:\\Windows\\SysWOW64\\davclnt.dll,DavSetCookie"") and

  /* Access to named pipe via http */
  process.args : (""http*/print/pipe/*"", ""http*/pipe/spoolss"", ""http*/pipe/srvsvc"")
",high,['T1212'],{'rundll32'},225.0,"['ntlm', 'printer', 'authentication', 'spooler', 'http']"
e250,Potential Remote Credential Access via Registry,"Identifies remote access to the registry to potentially dump credential data from the Security Account Manager (SAM)
registry hive in preparation for credential access and privileges elevation.
","sequence by host.id, user.id with maxspan=1m
 [authentication where
   event.outcome == ""success"" and event.action == ""logged-in"" and
   winlog.logon.type == ""Network"" and not user.name == ""ANONYMOUS LOGON"" and
   not user.domain == ""NT AUTHORITY"" and source.ip != ""127.0.0.1"" and source.ip !=""::1""]
 [file where event.action == ""creation"" and process.name : ""svchost.exe"" and
  file.Ext.header_bytes : ""72656766*"" and user.id : ""S-1-5-21-*"" and file.size >= 30000 and
  not file.path :
           (""?:\\Windows\\system32\\HKEY_LOCAL_MACHINE_SOFTWARE_Microsoft_*.registry"",
            ""?:\\Users\\*\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat.LOG?"",
            ""?:\\Users\\*\\AppData\\Local\\Microsoft\\Windows\\UsrClass.dat"",
            ""?:\\Users\\*\\ntuser.dat.LOG?"",
            ""?:\\Users\\*\\NTUSER.DAT"")]
",high,"['T1021', 'T1003']","{'hive', 'registry modification', 'impacket', 'winlog', 'crackmapexec', 'privilege'}",,"['registry', 'credential', 'sam', 'privileges', 'hive']"
e251,Searching for Saved Credentials via VaultCmd,"Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected
applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for
saved usernames and passwords. This may also be performed in preparation of lateral movement.
","process where event.type == ""start"" and
  (process.pe.original_file_name:""vaultcmd.exe"" or process.name:""vaultcmd.exe"") and
  process.args:""/list*""
",medium,"['T1555', 'T1003']",{'password'},33.0,"['credentials', 'credential', 'passwords', 'stored', 'manager']"
e252,Multiple Vault Web Credentials Read,"Windows Credential Manager allows you to create, view, or delete saved credentials for signing into websites, connected
applications, and networks. An adversary may abuse this to list or dump credentials stored in the Credential Manager for
saved usernames and passwords. This may also be performed in preparation of lateral movement.
","sequence by host.id, winlog.process.pid with maxspan=1s

 /* 2 consecutive vault reads from same pid for web creds */

 [any where event.code : ""5382"" and
  (winlog.event_data.SchemaFriendlyName : ""Windows Web Password Credential"" or winlog.event_data.Resource : ""http*"") and
  not winlog.event_data.SubjectLogonId : ""0x3e7""]

 [any where event.code : ""5382"" and
  (winlog.event_data.SchemaFriendlyName : ""Windows Web Password Credential"" or winlog.event_data.Resource : ""http*"") and
  not winlog.event_data.SubjectLogonId : ""0x3e7""]
",medium,"['T1555', 'T1003']","{'winlog', 'password'}",,"['credentials', 'credential', 'passwords', 'stored', 'manager']"
e253,Sensitive Privilege SeEnableDelegationPrivilege assigned to a User,"Identifies the assignment of the SeEnableDelegationPrivilege sensitive ""user right"" to a user. The
SeEnableDelegationPrivilege ""user right"" enables computer and user accounts to be trusted for delegation. Attackers can
abuse this right to compromise Active Directory accounts and elevate their privileges.
","event.action: ""Authorization Policy Change"" and event.code:4704 and winlog.event_data.PrivilegeList:""SeEnableDelegationPrivilege""
",high,,"{'winlog', 'privilege'}",,"['seenabledelegationprivilege', 'privileges', 'delegation', 'attackers', 'trusted']"
e254,Potential Shadow Credentials added to AD Object,"Identify the modification of the msDS-KeyCredentialLink attribute in an Active Directory Computer or User Object.
Attackers can abuse control over the object and create a key pair, append to raw public key in the attribute, and obtain
persistent and stealthy access to the target user or computer object.
","event.action:""Directory Service Changes"" and event.code:""5136"" and winlog.event_data.AttributeLDAPDisplayName:""msDS-KeyCredentialLink""
",high,['T1556'],{'winlog'},,"['keycredentiallink', 'msds', 'attribute', 'access', 'key']"
e255,User account exposed to Kerberoasting,"Detects when a user account has the servicePrincipalName attribute modified. Attackers can abuse write privileges over a
user to configure Service Principle Names (SPNs) so that they can perform Kerberoasting. Administrators can also
configure this for legitimate purposes, exposing the account to Kerberoasting.
","event.action:""Directory Service Changes"" and event.code:5136 and winlog.event_data.ObjectClass:""user""
and winlog.event_data.AttributeLDAPDisplayName:""servicePrincipalName""
",high,['T1558'],"{'winlog', 'privilege'}",,"['serviceprincipalname', 'spns', 'kerberoasting', 'privileges', 'attackers']"
e256,Potential Credential Access via Renamed COM+ Services DLL,"Identifies suspicious renamed COMSVCS.DLL Image Load, which exports the MiniDump function that can be used to dump a
process memory. This may indicate an attempt to dump LSASS memory while bypassing command-line based detection in
preparation for credential access.
","sequence by process.entity_id with maxspan=1m
 [process where event.category == ""process"" and
    process.name : ""rundll32.exe""]
 [process where event.category == ""process"" and event.dataset : ""windows.sysmon_operational"" and event.code == ""7"" and
   (file.pe.original_file_name : ""COMSVCS.DLL"" or file.pe.imphash : ""EADBCCBB324829ACB5F2BBE87E5549A8"") and
    /* renamed COMSVCS */
    not file.name : ""COMSVCS.DLL""]
",high,['T1003'],"{'dll', 'rundll32', 'lsass'}",243.0,"['dll', 'lsass', 'comsvcs', 'minidump', 'memory']"
e257,Potential Credential Access via LSASS Memory Dump,"Identifies suspicious access to LSASS handle from a call trace pointing to DBGHelp.dll or DBGCore.dll, which both export
the MiniDumpWriteDump method that can be used to dump LSASS memory content in preparation for credential access.
","process where event.code == ""10"" and
  winlog.event_data.TargetImage : ""?:\\WINDOWS\\system32\\lsass.exe"" and

   /* DLLs exporting MiniDumpWriteDump API to create an lsass mdmp*/
  winlog.event_data.CallTrace : (""*dbghelp*"", ""*dbgcore*"") and

   /* case of lsass crashing */
  not process.executable : (""?:\\Windows\\System32\\WerFault.exe"", ""?:\\Windows\\System32\\WerFaultSecure.exe"")
",high,['T1003'],"{'dll', 'winlog', 'mimikatz', 'lsass'}",,"['lsass', 'dll', 'trace', 'minidumpwritedump', 'dbgcore']"
e258,Potential LSASS Memory Dump via PssCaptureSnapShot,"Identifies suspicious access to an LSASS handle via PssCaptureSnapShot where two successive process accesses are performed
by the same process and target two different instances of LSASS. This may indicate an attempt to evade detection and
dump LSASS memory for credential access.
","event.category:process and event.code:10 and
 winlog.event_data.TargetImage:(""C:\\Windows\\system32\\lsass.exe"" or
                                 ""c:\\Windows\\system32\\lsass.exe"" or
                                 ""c:\\Windows\\System32\\lsass.exe"")
",high,['T1003'],"{'winlog', 'lsass'}",,"['lsass', 'psscapturesnapshot', 'process', 'accesses', 'suspicious']"
e259,Suspicious Remote Registry Access via SeBackupPrivilege,"Identifies remote access to the registry using an account with Backup Operators group membership. This may indicate an
attempt to exfiltrate credentials by dumping the Security Account Manager (SAM) registry hive in preparation for
credential access and privileges elevation.
","sequence by host.id, winlog.event_data.SubjectLogonId with maxspan=1m
 [iam where event.action == ""logged-in-special""  and
  winlog.event_data.PrivilegeList : ""SeBackupPrivilege"" and

  /* excluding accounts with existing privileged access */
  not winlog.event_data.PrivilegeList : ""SeDebugPrivilege""]
 [any where event.action == ""Detailed File Share"" and winlog.event_data.RelativeTargetName : ""winreg""]
",medium,"['T1021', 'T1003']","{'hive', 'registry modification', 'winlog'}",,"['registry', 'credentials', 'sam', 'credential', 'hive']"
e260,Symbolic Link to Shadow Copy Created,"Identifies the creation of symbolic links to a shadow copy. Symbolic links can be used to access files in the shadow
copy, including sensitive files such as ntds.dit, System Boot Key and browser offline credentials.
","process where event.type in (""start"",""process_created"") and
 process.pe.original_file_name in (""Cmd.Exe"",""PowerShell.EXE"") and

 /* Create Symbolic Link to Shadow Copies */
 process.args : (""*mklink*"", ""*SymbolicLink*"") and process.command_line : (""*HarddiskVolumeShadowCopy*"")
",medium,['T1003'],,66.0,"['files', 'shadow', 'symbolic', 'ntds', 'copy']"
e261,Potential LSASS Clone Creation via PssCaptureSnapShot,"Identifies the creation of an LSASS process clone via PssCaptureSnapShot where the parent process is the initial LSASS
process instance. This may indicate an attempt to evade detection and dump LSASS memory for credential access.
","process where event.code:""4688"" and
  process.executable : ""?:\\Windows\\System32\\lsass.exe"" and
  process.parent.executable : ""?:\\Windows\\System32\\lsass.exe""
",high,['T1003'],{'lsass'},243.0,"['lsass', 'psscapturesnapshot', 'process', 'clone', 'memory']"
e262,Adding Hidden File Attribute via Attrib,Adversaries can add the 'hidden' attribute to files to hide them from the user in an attempt to evade detection.,"process where event.type == ""start"" and
  process.name : ""attrib.exe"" and process.args : ""+h""
",low,['T1564'],{'hidden'},197.0,"['adversaries', 'hide', 'hidden', 'files', 'detection']"
e263,Modification of AmsiEnable Registry Key,"Identifies modifications of the AmsiEnable registry key to 0, which disables the Antimalware Scan Interface (AMSI). An
adversary can modify this key to disable AMSI protections.
","registry where event.type in (""creation"", ""change"") and
  registry.path : (
    ""HKEY_USERS\\*\\Software\\Microsoft\\Windows Script\\Settings\\AmsiEnable"",
    ""HKU\\*\\Software\\Microsoft\\Windows Script\\Settings\\AmsiEnable""
  ) and
  registry.data.strings: (""0"", ""0x00000000"")
",high,['T1562'],"{'malware', 'registry modification', 'stop', 'amsi'}",247.0,"['antimalware', 'amsi', 'registry', 'disable', 'disables']"
e264,Clearing Windows Console History,"Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised
account to conceal the actions undertaken during an intrusion.
","process where event.action == ""start"" and
  (process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") or process.pe.original_file_name == ""PowerShell.EXE"") and
     (process.args : ""*Clear-History*"" or
     (process.args : (""*Remove-Item*"", ""rm"") and process.args : (""*ConsoleHost_history.txt*"", ""*(Get-PSReadlineOption).HistorySavePath*"")) or
     (process.args : ""*Set-PSReadlineOption*"" and process.args : ""*SaveNothing*""))
",medium,['T1070'],,76.0,"['console', 'adversary', 'compromised', 'intrusion', 'clear']"
e265,Clearing Windows Event Logs,"Identifies attempts to clear or disable Windows event log stores using Windows wevetutil command. This is often done by
attackers in an attempt to evade detection or destroy forensic evidence on a system.
","process where event.type == ""start"" and
  (
    (process.name : ""wevtutil.exe"" or process.pe.original_file_name == ""wevtutil.exe"") and
    process.args : (""/e:false"", ""cl"", ""clear-log"")
  ) or
  (
    process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and
    process.args : ""Clear-EventLog""
  )
",low,['T1070'],{'wevtutil'},85.0,"['log', 'wevetutil', 'event', 'detection', 'disable']"
e266,Windows Event Logs Cleared,"Identifies attempts to clear Windows event log stores. This is often done by attackers in an attempt to evade detection
or destroy forensic evidence on a system.
","event.action:(""audit-log-cleared"" or ""Log clear"")
",low,['T1070'],{'forensic'},85.0,"['log', 'forensic', 'detection', 'event', 'windows']"
e267,Creation or Modification of Root Certificate,"Identifies the creation or modification of a local trusted root certificate in Windows. The install of a malicious root
certificate would allow an attacker the ability to masquerade malicious files as valid signed components from any entity
(for example, Microsoft). It could also allow an attacker to decrypt SSL traffic.
","registry where event.type in (""creation"", ""change"") and
  registry.path :
    (
      ""HKLM\\Software\\Microsoft\\SystemCertificates\\Root\\Certificates\\*\\Blob"",
      ""HKLM\\Software\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\*\\Blob"",
      ""HKLM\\Software\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\*\\Blob"",
      ""HKLM\\Software\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\*\\Blob""
    ) and
  not process.executable :
              (""?:\\Program Files\\*.exe"",
               ""?:\\Program Files (x86)\\*.exe"",
               ""?:\\Windows\\System32\\*.exe"",
               ""?:\\Windows\\SysWOW64\\*.exe"",
               ""?:\\Windows\\Sysmon64.exe"",
               ""?:\\Windows\\Sysmon.exe"",
               ""?:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\*\\MsMpEng.exe"",
               ""?:\\Windows\\WinSxS\\*.exe"",
               ""?:\\Windows\\UUS\\amd64\\MoUsoCoreWorker.exe"")
",low,['T1553'],"{'root', 'stop'}",138.0,"['certificate', 'malicious', 'root', 'ssl', 'trusted']"
e268,Windows CryptoAPI Spoofing Vulnerability (CVE-2020-0601 - CurveBall),"A spoofing vulnerability exists in the way Windows CryptoAPI (Crypt32.dll) validates Elliptic Curve Cryptography (ECC)
certificates. An attacker could exploit the vulnerability by using a spoofed code-signing certificate to sign a
malicious executable, making it appear the file was from a trusted, legitimate source.
","event.provider:""Microsoft-Windows-Audit-CVE"" and message:""[CVE-2020-0601]""
",low,['T1553'],"{'dll', 'cve-2020-0601'}",,"['spoofing', 'spoofed', 'crypt32', 'vulnerability', 'dll']"
e269,Windows Defender Disabled via Registry Modification,"Identifies modifications to the Windows Defender registry settings to disable the service or set the service to be
started manually.
","registry where event.type in (""creation"", ""change"") and
  (
    (
      registry.path:""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\DisableAntiSpyware"" and
      registry.data.strings: (""1"", ""0x00000001"")
   ) or
   (
      registry.path:""HKLM\\System\\*ControlSet*\\Services\\WinDefend\\Start"" and
      registry.data.strings in (""3"", ""4"", ""0x00000003"", ""0x00000004"")
   )
  ) and

  not process.executable :
           (""?:\\WINDOWS\\system32\\services.exe"",
            ""?:\\Windows\\System32\\svchost.exe"",
            ""?:\\Program Files (x86)\\Trend Micro\\Security Agent\\NTRmv.exe"")
",low,['T1562'],{'registry modification'},249.0,"['defender', 'disable', 'service', 'registry', 'settings']"
e270,Windows Defender Exclusions Added via PowerShell,"Identifies modifications to the Windows Defender configuration settings using PowerShell to add exclusions at the folder
directory or process level.
","process where event.type == ""start"" and
 (process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") or process.pe.original_file_name in (""powershell.exe"", ""pwsh.dll"", ""powershell_ise.exe"")) and
  process.args : (""*Add-MpPreference*"", ""*Set-MpPreference*"") and
  process.args : (""*-Exclusion*"")
",medium,"['T1059', 'T1562']","{'stop', 'trickbot', 'registry modification', 'powershell'}",241.0,"['defender', 'exclusions', 'powershell', 'folder', 'directory']"
e271,Delete Volume USN Journal with Fsutil,"Identifies use of the fsutil.exe to delete the volume USNJRNL. This technique is used by attackers to eliminate evidence
of files created during post-exploitation activities.
","process where event.type == ""start"" and
  (process.name : ""fsutil.exe"" or process.pe.original_file_name == ""fsutil.exe"") and
  process.args : ""deletejournal"" and process.args : ""usn""
",low,['T1070'],{'exe'},248.0,"['fsutil', 'files', 'exe', 'exploitation', 'usnjrnl']"
e272,PowerShell Script Block Logging Disabled,"Identifies attempts to disable PowerShell Script Block Logging via registry modification. Attackers may disable this
logging to conceal their activities in the host and evade detection.
","registry where event.type == ""change"" and
    registry.path :
        ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\\EnableScriptBlockLogging""
    and registry.data.strings : (""0"", ""0x00000000"")
",medium,['T1562'],"{'registry modification', 'powershell'}",227.0,"['powershell', 'disable', 'logging', 'attackers', 'script']"
e273,Disable Windows Firewall Rules via Netsh,"Identifies use of the netsh.exe to disable or weaken the local firewall. Attackers will use this command line tool to
disable the firewall during troubleshooting or to enable network mobility.
","process where event.type == ""start"" and
  process.name : ""netsh.exe"" and
  (
    (process.args : ""disable"" and process.args : ""firewall"" and process.args : ""set"") or
    (process.args : ""advfirewall"" and process.args : ""off"" and process.args : ""state"")
  )
",medium,['T1562'],"{'netsh', 'network'}",,"['netsh', 'firewall', 'disable', 'attackers', 'network']"
e274,Disabling Windows Defender Security Settings via PowerShell,Identifies use of the Set-MpPreference PowerShell command to disable or weaken certain Windows Defender settings.,"process where event.type == ""start"" and
 (process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") or process.pe.original_file_name in (""powershell.exe"", ""pwsh.dll"", ""powershell_ise.exe"")) and
 process.args : ""Set-MpPreference"" and process.args : (""-Disable*"", ""Disabled"", ""NeverSend"", ""-Exclusion*"")
",medium,['T1562'],"{'registry modification', 'powershell'}",249.0,"['mppreference', 'defender', 'disable', 'settings', 'powershell']"
e275,Disable Windows Event and Security Logs Using Built-in Tools,"Identifies attempts to disable EventLog via the logman Windows utility, PowerShell, or auditpol. This is often done by
attackers in an attempt to evade detection on a system.
","process where event.type == ""start"" and

  ((process.name:""logman.exe"" or process.pe.original_file_name == ""Logman.exe"") and
      process.args : ""EventLog-*"" and process.args : (""stop"", ""delete"")) or

  ((process.name : (""pwsh.exe"", ""powershell.exe"", ""powershell_ise.exe"") or process.pe.original_file_name in
      (""pwsh.exe"", ""powershell.exe"", ""powershell_ise.exe"")) and
	process.args : ""Set-Service"" and process.args: ""EventLog"" and process.args : ""Disabled"")  or

  ((process.name:""auditpol.exe"" or process.pe.original_file_name == ""AUDITPOL.EXE"") and process.args : ""/success:disable"")
",low,"['T1562', 'T1070']","{'stop', 'powershell'}",250.0,"['eventlog', 'disable', 'logman', 'detection', 'auditpol']"
e276,DNS-over-HTTPS Enabled via Registry,"Identifies when a user enables DNS-over-HTTPS. This can be used to hide internet activity or the process of exfiltrating
data. With this enabled, an organization will lose visibility into data such as query type, response, and originating
IP, which are used to determine bad actors.
","registry where event.type in (""creation"", ""change"") and
  (registry.path : ""*\\SOFTWARE\\Policies\\Microsoft\\Edge\\BuiltInDnsClientEnabled"" and
  registry.data.strings : ""1"") or
  (registry.path : ""*\\SOFTWARE\\Google\\Chrome\\DnsOverHttpsMode"" and
  registry.data.strings : ""secure"") or
  (registry.path : ""*\\SOFTWARE\\Policies\\Mozilla\\Firefox\\DNSOverHTTPS"" and
  registry.data.strings : ""1"")
",low,['T1562'],{'dns'},174.0,"['https', 'dns', 'ip', 'internet', 'identifies']"
e277,Suspicious .NET Code Compilation,Identifies suspicious .NET code execution. connections.,"process where event.type == ""start"" and
  process.name : (""csc.exe"", ""vbc.exe"") and
  process.parent.name : (""wscript.exe"", ""mshta.exe"", ""cscript.exe"", ""wmic.exe"", ""svchost.exe"", ""rundll32.exe"", ""cmstp.exe"", ""regsvr32.exe"")
",medium,['T1027'],{'rundll32'},186.0,"['connections', 'suspicious', 'net', 'execution', 'code']"
e278,Remote Desktop Enabled in Windows Firewall by Netsh,"Identifies use of the network shell utility (netsh.exe) to enable inbound Remote Desktop Protocol (RDP) connections in
the Windows Firewall.
","process where event.type == ""start"" and
 (process.name : ""netsh.exe"" or process.pe.original_file_name == ""netsh.exe"") and
 process.args : (""localport=3389"", ""RemoteDesktop"", ""group=\""remote desktop\"""") and
 process.args : (""action=allow"", ""enable=Yes"", ""enable"")
",medium,['T1562'],"{'rdp', 'netsh'}",,"['rdp', 'firewall', 'netsh', 'connections', 'protocol']"
e279,Enable Host Network Discovery via Netsh,"Identifies use of the netsh.exe program to enable host discovery via the network. Attackers can use this command-line
tool to weaken the host firewall settings.
","process where event.type == ""start"" and
process.name : ""netsh.exe"" and
process.args : (""firewall"", ""advfirewall"") and process.args : ""group=Network Discovery"" and process.args : ""enable=Yes""
",medium,['T1562'],"{'netsh', 'network'}",,"['netsh', 'firewall', 'host', 'attackers', 'network']"
e280,Control Panel Process with Unusual Arguments,"Identifies unusual instances of Control Panel with suspicious keywords or paths in the process command line value.
Adversaries may abuse control.exe to proxy execution of malicious code.
","process where event.type == ""start"" and
 process.executable : (""?:\\Windows\\SysWOW64\\control.exe"", ""?:\\Windows\\System32\\control.exe"") and
 process.command_line :
          (""*.jpg*"",
           ""*.png*"",
           ""*.gif*"",
           ""*.bmp*"",
           ""*.jpeg*"",
           ""*.TIFF*"",
           ""*.inf*"",
           ""*.cpl:*/*"",
           ""*../../..*"",
           ""*/AppData/Local/*"",
           ""*:\\Users\\Public\\*"",
           ""*\\AppData\\Local\\*"")
",high,['T1218'],{'exe'},341.0,"['malicious', 'exe', 'process', 'execution', 'control']"
e281,ImageLoad via Windows Update Auto Update Client,"Identifies abuse of the Windows Update Auto Update Client (wuauclt.exe) to load an arbitrary DLL. This behavior is used
as a defense evasion technique to blend-in malicious activity with legitimate Windows software.
","process where event.type == ""start"" and
  (process.pe.original_file_name == ""wuauclt.exe"" or process.name : ""wuauclt.exe"") and
   /* necessary windows update client args to load a dll */
   process.args : ""/RunHandlerComServer"" and process.args : ""/UpdateDeploymentProvider"" and
   /* common paths writeable by a standard user where the target DLL can be placed */
   process.args : (""C:\\Users\\*.dll"", ""C:\\ProgramData\\*.dll"", ""C:\\Windows\\Temp\\*.dll"", ""C:\\Windows\\Tasks\\*.dll"")
",medium,['T1218'],"{'dll', 'exe'}",57.0,"['wuauclt', 'dll', 'malicious', 'exe', 'windows']"
e282,Microsoft Build Engine Started by an Office Application,"An instance of MSBuild, the Microsoft Build Engine, was started by Excel or Word. This is unusual behavior for the Build
Engine and could have been caused by an Excel or Word document executing a malicious script payload.
","process where event.type == ""start"" and
  process.name : ""MSBuild.exe"" and
  process.parent.name : (""eqnedt32.exe"",
                         ""excel.exe"",
                         ""fltldr.exe"",
                         ""msaccess.exe"",
                         ""mspub.exe"",
                         ""outlook.exe"",
                         ""powerpnt.exe"",
                         ""winword.exe"" )
",high,['T1127'],"{'msbuild', 'stop'}",101.0,"['msbuild', 'microsoft', 'build', 'malicious', 'caused']"
e283,Microsoft Build Engine Started by a Script Process,"An instance of MSBuild, the Microsoft Build Engine, was started by a script or the Windows command interpreter. This
behavior is unusual and is sometimes used by malicious payloads.
","process where event.type == ""start"" and
  (process.name : ""MSBuild.exe"" or process.pe.original_file_name == ""MSBuild.exe"") and
  process.parent.name : (""cmd.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"", ""cscript.exe"", ""wscript.exe"", ""mshta.exe"")
",low,['T1127'],{'msbuild'},101.0,"['msbuild', 'microsoft', 'build', 'malicious', 'interpreter']"
e284,Microsoft Build Engine Started by a System Process,"An instance of MSBuild, the Microsoft Build Engine, was started by Explorer or the WMI (Windows Management
Instrumentation) subsystem. This behavior is unusual and is sometimes used by malicious payloads.
","process where event.type == ""start"" and
  process.name : ""MSBuild.exe"" and
  process.parent.name : (""explorer.exe"", ""wmiprvse.exe"")
",medium,['T1127'],"{'msbuild', 'wmi'}",101.0,"['msbuild', 'microsoft', 'wmi', 'build', 'malicious']"
e285,Microsoft Build Engine Using an Alternate Name,"An instance of MSBuild, the Microsoft Build Engine, was started after being renamed. This is uncommon behavior and may
indicate an attempt to run unnoticed or undetected.
","process where event.type == ""start"" and
  process.pe.original_file_name == ""MSBuild.exe"" and
  not process.name : ""MSBuild.exe""
",low,['T1036'],{'msbuild'},101.0,"['msbuild', 'microsoft', 'build', 'renamed', 'undetected']"
e286,Microsoft Build Engine Started an Unusual Process,"An instance of MSBuild, the Microsoft Build Engine, started a PowerShell script or the Visual C# Command Line Compiler.
This technique is sometimes used to deploy a malicious payload using the Build Engine.
","process where event.type == ""start"" and
  process.parent.name : ""MSBuild.exe"" and
  process.name : (""csc.exe"", ""iexplore.exe"", ""powershell.exe"")
",low,['T1027'],"{'msbuild', 'powershell'}",101.0,"['msbuild', 'compiler', 'microsoft', 'powershell', 'build']"
e287,Potential DLL SideLoading via Trusted Microsoft Programs,"Identifies an instance of a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking
starting after being renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade
defenses via side loading a malicious DLL within the memory space of one of those processes.
","process where event.type == ""start"" and
  process.pe.original_file_name in (""WinWord.exe"", ""EXPLORER.EXE"", ""w3wp.exe"", ""DISM.EXE"") and
  not (process.name : (""winword.exe"", ""explorer.exe"", ""w3wp.exe"", ""Dism.exe"") or
         process.executable : (""?:\\Windows\\explorer.exe"",
                               ""?:\\Program Files\\Microsoft Office\\root\\Office*\\WINWORD.EXE"",
                               ""?:\\Program Files?(x86)\\Microsoft Office\\root\\Office*\\WINWORD.EXE"",
                               ""?:\\Windows\\System32\\Dism.exe"",
                               ""?:\\Windows\\SysWOW64\\Dism.exe"",
                               ""?:\\Windows\\System32\\inetsrv\\w3wp.exe"")
         )
",high,['T1036'],{'dll'},57.0,"['dll', 'malicious', 'hijacking', 'windows', 'processes']"
e288,Potential DLL Side-Loading via Microsoft Antimalware Service Executable,"Identifies a Windows trusted program that is known to be vulnerable to DLL Search Order Hijacking starting after being
renamed or from a non-standard path. This is uncommon behavior and may indicate an attempt to evade defenses via
side-loading a malicious DLL within the memory space of one of those processes.
","process where event.type == ""start"" and
  (process.pe.original_file_name == ""MsMpEng.exe"" and not process.name : ""MsMpEng.exe"") or
  (process.name : ""MsMpEng.exe"" and not
        process.executable : (""?:\\ProgramData\\Microsoft\\Windows Defender\\*.exe"",
                              ""?:\\Program Files\\Windows Defender\\*.exe"",
                              ""?:\\Program Files (x86)\\Windows Defender\\*.exe"",
                              ""?:\\Program Files\\Microsoft Security Client\\*.exe"",
                              ""?:\\Program Files (x86)\\Microsoft Security Client\\*.exe""))
",high,['T1574'],"{'revil', 'dll'}",57.0,"['dll', 'malicious', 'hijacking', 'windows', 'processes']"
e289,Executable File Creation with Multiple Extensions,"Masquerading can allow an adversary to evade defenses and better blend in with the environment. One way it occurs is
when the name or location of a file is manipulated as a means of tricking a user into executing what they think is a
benign file type but is actually executable code.
","file where event.type == ""creation"" and file.extension : ""exe"" and
  file.name regex~ """""".*\.(vbs|vbe|bat|js|cmd|wsh|ps1|pdf|docx?|xlsx?|pptx?|txt|rtf|gif|jpg|png|bmp|hta|txt|img|iso)\.exe"""""" and
  not (process.executable : (""?:\\Windows\\System32\\msiexec.exe"", ""C:\\Users\\*\\QGIS_SCCM\\Files\\QGIS-OSGeo4W-*-Setup-x86_64.exe"") and
       file.path : ""?:\\Program Files\\QGIS *\\apps\\grass\\*.exe"") and
  not process.executable : (""/bin/sh"", ""/usr/sbin/MailScanner"", ""/usr/bin/perl"")
",medium,"['T1036', 'T1204']",{'ps1'},242.0,"['masquerading', 'executable', 'file', 'adversary', 'executing']"
e290,Process Execution from an Unusual Directory,"Identifies process execution from suspicious default Windows directories. This is sometimes done by adversaries to hide
malware in trusted paths.
","process where event.type == ""start"" and
 /* add suspicious execution paths here */
process.executable : (""C:\\PerfLogs\\*.exe"",""C:\\Users\\Public\\*.exe"",""C:\\Windows\\Tasks\\*.exe"",""C:\\Intel\\*.exe"",""C:\\AMD\\Temp\\*.exe"",""C:\\Windows\\AppReadiness\\*.exe"",
""C:\\Windows\\ServiceState\\*.exe"",""C:\\Windows\\security\\*.exe"",""C:\\Windows\\IdentityCRL\\*.exe"",""C:\\Windows\\Branding\\*.exe"",""C:\\Windows\\csc\\*.exe"",
 ""C:\\Windows\\DigitalLocker\\*.exe"",""C:\\Windows\\en-US\\*.exe"",""C:\\Windows\\wlansvc\\*.exe"",""C:\\Windows\\Prefetch\\*.exe"",""C:\\Windows\\Fonts\\*.exe"",
 ""C:\\Windows\\diagnostics\\*.exe"",""C:\\Windows\\TAPI\\*.exe"",""C:\\Windows\\INF\\*.exe"",""C:\\Windows\\System32\\Speech\\*.exe"",""C:\\windows\\tracing\\*.exe"",
 ""c:\\windows\\IME\\*.exe"",""c:\\Windows\\Performance\\*.exe"",""c:\\windows\\intel\\*.exe"",""c:\\windows\\ms\\*.exe"",""C:\\Windows\\dot3svc\\*.exe"",
 ""C:\\Windows\\panther\\*.exe"",""C:\\Windows\\RemotePackages\\*.exe"",""C:\\Windows\\OCR\\*.exe"",""C:\\Windows\\appcompat\\*.exe"",""C:\\Windows\\apppatch\\*.exe"",""C:\\Windows\\addins\\*.exe"",
 ""C:\\Windows\\Setup\\*.exe"",""C:\\Windows\\Help\\*.exe"",""C:\\Windows\\SKB\\*.exe"",""C:\\Windows\\Vss\\*.exe"",""C:\\Windows\\Web\\*.exe"",""C:\\Windows\\servicing\\*.exe"",""C:\\Windows\\CbsTemp\\*.exe"",
 ""C:\\Windows\\Logs\\*.exe"",""C:\\Windows\\WaaS\\*.exe"",""C:\\Windows\\ShellExperiences\\*.exe"",""C:\\Windows\\ShellComponents\\*.exe"",""C:\\Windows\\PLA\\*.exe"",
 ""C:\\Windows\\Migration\\*.exe"",""C:\\Windows\\debug\\*.exe"",""C:\\Windows\\Cursors\\*.exe"",""C:\\Windows\\Containers\\*.exe"",""C:\\Windows\\Boot\\*.exe"",""C:\\Windows\\bcastdvr\\*.exe"",
 ""C:\\Windows\\assembly\\*.exe"",""C:\\Windows\\TextInput\\*.exe"",""C:\\Windows\\security\\*.exe"",""C:\\Windows\\schemas\\*.exe"",""C:\\Windows\\SchCache\\*.exe"",""C:\\Windows\\Resources\\*.exe"",
 ""C:\\Windows\\rescache\\*.exe"",""C:\\Windows\\Provisioning\\*.exe"",""C:\\Windows\\PrintDialog\\*.exe"",""C:\\Windows\\PolicyDefinitions\\*.exe"",""C:\\Windows\\media\\*.exe"",
 ""C:\\Windows\\Globalization\\*.exe"",""C:\\Windows\\L2Schemas\\*.exe"",""C:\\Windows\\LiveKernelReports\\*.exe"",""C:\\Windows\\ModemLogs\\*.exe"",""C:\\Windows\\ImmersiveControlPanel\\*.exe"") and
 not process.name : (""SpeechUXWiz.exe"",""SystemSettings.exe"",""TrustedInstaller.exe"",""PrintDialog.exe"",""MpSigStub.exe"",""LMS.exe"",""mpam-*.exe"") and
 not process.executable :
           (""?:\\Intel\\Wireless\\WUSetupLauncher.exe"",
            ""?:\\Intel\\Wireless\\Setup.exe"",
            ""?:\\Intel\\Move Mouse.exe"",
            ""?:\\windows\\Panther\\DiagTrackRunner.exe"",
            ""?:\\Windows\\servicing\\GC64\\tzupd.exe"",
            ""?:\\Users\\Public\\res\\RemoteLite.exe"",
            ""?:\\Users\\Public\\IBM\\ClientSolutions\\*.exe"",
            ""?:\\Users\\Public\\Documents\\syspin.exe"",
            ""?:\\Users\\Public\\res\\FileWatcher.exe"")
 /* uncomment once in winlogbeat */
 /* and not (process.code_signature.subject_name == ""Microsoft Corporation"" and process.code_signature.trusted == true) */
",medium,['T1036'],{'malware'},54.0,"['malware', 'process', 'suspicious', 'windows', 'execution']"
e291,Encoded Executable Stored in the Registry,"Identifies registry write modifications to hide an encoded portable executable. This could be indicative of adversary
defense evasion by avoiding the storing of malicious content directly on disk.
","registry where
/* update here with encoding combinations */
 registry.data.strings : ""TVqQAAMAAAAEAAAA*""
",medium,"['T1140', 'T1112']",{'registry modification'},29.0,"['registry', 'executable', 'encoded', 'malicious', 'portable']"
e292,IIS HTTP Logging Disabled,"Identifies when Internet Information Services (IIS) HTTP Logging is disabled on a server. An attacker with IIS server
access via a webshell or other mechanism can disable HTTP Logging as an effective anti-forensics measure.
","process where event.type == ""start"" and
  (process.name : ""appcmd.exe"" or process.pe.original_file_name == ""appcmd.exe"") and
  process.args : ""/dontLog*:*True"" and
  not process.parent.name : ""iissetup.exe""
",high,['T1562'],{'forensic'},251.0,"['logging', 'iis', 'http', 'webshell', 'forensics']"
e293,Process Injection by the Microsoft Build Engine,"An instance of MSBuild, the Microsoft Build Engine, created a thread in another process. This technique is sometimes
used to evade detection or elevate privileges.
","process.name:MSBuild.exe and event.action:""CreateRemoteThread detected (rule: CreateRemoteThread)""
",low,['T1055'],{'msbuild'},101.0,"['msbuild', 'microsoft', 'process', 'build', 'thread']"
e294,InstallUtil Process Making Network Connections,"Identifies InstallUtil.exe making outbound network connections. This may indicate adversarial activity as InstallUtil is
often leveraged by adversaries to execute code and evade detection.
","/* the benefit of doing this as an eql sequence vs kql is this will limit to alerting only on the first network connection */

sequence by process.entity_id
  [process where event.type == ""start"" and process.name : ""installutil.exe""]
  [network where process.name : ""installutil.exe"" and network.direction : (""outgoing"", ""egress"")]
",medium,['T1218'],{'exe'},114.0,"['installutil', 'exe', 'detection', 'adversaries', 'adversarial']"
e295,Suspicious Endpoint Security Parent Process,"A suspicious Endpoint Security parent process was detected. This may indicate a process hollowing or other form of code
injection.
","process where event.type == ""start"" and
 process.name : (""esensor.exe"", ""elastic-endpoint.exe"") and
 process.parent.executable != null and
  /* add FPs here */
 not process.parent.executable : (""C:\\Program Files\\Elastic\\*"",
                                  ""C:\\Windows\\System32\\services.exe"",
                                  ""C:\\Windows\\System32\\WerFault*.exe"",
                                  ""C:\\Windows\\System32\\wermgr.exe"")
",medium,['T1036'],,186.0,"['endpoint', 'process', 'suspicious', 'detected', 'injection']"
e296,Renamed AutoIt Scripts Interpreter,"Identifies a suspicious AutoIt process execution. Malware written as an AutoIt script tends to rename the AutoIt
executable to avoid detection.
","process where event.type == ""start"" and
  process.pe.original_file_name : ""AutoIt*.exe"" and not process.name : ""AutoIt*.exe""
",medium,['T1036'],{'malware'},48.0,"['malware', 'autoit', 'executable', 'suspicious', 'execution']"
e297,Suspicious WerFault Child Process,"A suspicious WerFault child process was detected, which may indicate an attempt to run unnoticed. Verify process details
such as command line, network connections, file writes and parent process details as well.
","process where event.type == ""start"" and
  process.parent.name : ""WerFault.exe"" and
  not process.name : (""cofire.exe"",
                      ""psr.exe"",
                      ""VsJITDebugger.exe"",
                      ""TTTracer.exe"",
                      ""rundll32.exe"",
                      ""LogiOptionsMgr.exe"") and
  not process.args : (""/LOADSAVEDWINDOWS"",
                      ""/restore"",
                      ""RestartByRestartManager*"",
                      ""--restarted"",
                      ""createdump"",
                      ""dontsend"",
                      ""/watson"")
",medium,['T1036'],{'rundll32'},186.0,"['werfault', 'process', 'suspicious', 'detected', 'child']"
e298,Program Files Directory Masquerading,"Identifies execution from a directory masquerading as the Windows Program Files directories. These paths are trusted and
usually host trusted third party programs. An adversary may leverage masquerading, along with low privileges to bypass
detections allowlisting those folders.
","process where event.type == ""start"" and
 process.executable : ""C:\\*Program*Files*\\*.exe"" and
 not process.executable : (""C:\\Program Files\\*.exe"", ""C:\\Program Files (x86)\\*.exe"", ""C:\\Users\\*.exe"", ""C:\\ProgramData\\*.exe"")
",medium,['T1036'],{'leverage'},66.0,"['folders', 'directory', 'directories', 'programs', 'files']"
e299,Potential Windows Error Manager Masquerading,"Identifies suspicious instances of the Windows Error Reporting process (WerFault.exe or Wermgr.exe) with matching
command-line and process executable values performing outgoing network connections. This may be indicative of a
masquerading attempt to evade suspicious child process behavior detections.
","sequence by host.id, process.entity_id with maxspan = 5s
  [process where event.type:""start"" and process.name : (""wermgr.exe"", ""WerFault.exe"") and process.args_count == 1]
  [network where process.name : (""wermgr.exe"", ""WerFault.exe"") and network.protocol != ""dns"" and
    network.direction : (""outgoing"", ""egress"") and destination.ip !=""::1"" and destination.ip !=""127.0.0.1""
  ]
",medium,['T1036'],{'exe'},248.0,"['werfault', 'exe', 'wermgr', 'executable', 'process']"
e300,Microsoft Windows Defender Tampering,"Identifies when one or more features on Microsoft Defender are disabled. Adversaries may disable or tamper with
Microsoft Defender features to evade detection and conceal malicious behavior.
","registry where event.type in (""creation"", ""change"") and
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\PUAProtection"" and
  registry.data.strings : (""0"", ""0x00000000"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\App and Browser protection\\DisallowExploitProtectionOverride"" and
  registry.data.strings : (""0"", ""0x00000000"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\DisableAntiSpyware"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Features\\TamperProtection"" and
  registry.data.strings : (""0"", ""0x00000000"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableRealtimeMonitoring"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableIntrusionPreventionSystem"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableScriptScanning"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\EnableControlledFolderAccess"" and
  registry.data.strings : (""0"", ""0x00000000"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableIOAVProtection"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting\\DisableEnhancedNotifications"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SpyNet\\DisableBlockAtFirstSeen"" and
  registry.data.strings : (""1"", ""0x00000001"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SpyNet\\SpynetReporting"" and
  registry.data.strings : (""0"", ""0x00000000"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SpyNet\\SubmitSamplesConsent"" and
  registry.data.strings : (""0"", ""0x00000000"")) or
  (registry.path : ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableBehaviorMonitoring"" and
  registry.data.strings : (""1"", ""0x00000001""))
",medium,['T1562'],"{'registry modification', 'guard', 'icedid'}",,"['disable', 'disabled', 'defender', 'adversaries', 'malicious']"
e301,Network Connection via Signed Binary,"Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature
validation. Adversaries may use these binaries to 'live off the land' and execute malicious files that could bypass
application allowlists and signature validation.
","sequence by process.entity_id
  [process where (process.name : ""expand.exe"" or process.name : ""extrac32.exe"" or
                 process.name : ""ieexec.exe"" or process.name : ""makecab.exe"") and
                 event.type == ""start""]
  [network where (process.name : ""expand.exe"" or process.name : ""extrac32.exe"" or
                 process.name : ""ieexec.exe"" or process.name : ""makecab.exe"") and
    not cidrmatch(destination.ip,
      ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"", ""192.0.0.0/29"", ""192.0.0.8/32"",
      ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"", ""192.0.2.0/24"", ""192.31.196.0/24"",
      ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"", ""192.175.48.0/24"",
      ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"", ""FE80::/10"", ""FF00::/8"")]
",low,['T1218'],"{'signed binary', 'expand'}",35.0,"['binaries', 'trusted', 'protected', 'signature', 'certificates']"
e303,MsBuild Making Network Connections,"Identifies MsBuild.exe making outbound network connections. This may indicate adversarial activity as MsBuild is often
leveraged by adversaries to execute code and evade detection.
","sequence by process.entity_id
  [process where process.name : ""MSBuild.exe"" and event.type == ""start""]
  [network where process.name : ""MSBuild.exe"" and
     not cidrmatch(destination.ip, ""127.0.0.1"", ""::1"")]
",medium,['T1127'],"{'msbuild', 'exe'}",101.0,"['msbuild', 'exe', 'connections', 'detection', 'adversarial']"
e304,Mshta Making Network Connections,"Identifies Mshta.exe making outbound network connections. This may indicate adversarial activity, as Mshta is often
leveraged by adversaries to execute malicious scripts and evade detection.
","sequence by process.entity_id with maxspan=10m
  [process where event.type == ""start"" and process.name : ""mshta.exe"" and
     not process.parent.name : ""Microsoft.ConfigurationManagement.exe"" and
     not (process.parent.executable : ""C:\\Amazon\\Amazon Assistant\\amazonAssistantService.exe"" or
          process.parent.executable : ""C:\\TeamViewer\\TeamViewer.exe"") and
     not process.args : ""ADSelfService_Enroll.hta""]
  [network where process.name : ""mshta.exe""]
",medium,['T1218'],"{'exe', 'network'}",58.0,"['mshta', 'exe', 'malicious', 'connections', 'network']"
e306,Network Connection via MsXsl,"Identifies msxsl.exe making a network connection. This may indicate adversarial activity as msxsl.exe is often leveraged
by adversaries to execute malicious scripts and evade detection.
","sequence by process.entity_id
  [process where process.name : ""msxsl.exe"" and event.type == ""start""]
  [network where process.name : ""msxsl.exe"" and
     not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
       ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"",
       ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"",
       ""100.64.0.0/10"", ""192.175.48.0/24"",""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
       ""FE80::/10"", ""FF00::/8"")]
",low,['T1220'],{'exe'},248.0,"['msxsl', 'exe', 'malicious', 'adversaries', 'detection']"
e307,MS Office Macro Security Registry Modifications,"Microsoft Office Products offer options for users and developers to control the security settings for running and using
Macros. Adversaries may abuse these security settings to modify the default behavior of the Office Application to trust
future macros and/or disable security warnings, which could increase their chances of establishing persistence.
","registry where event.type == ""change"" and
    registry.path : (
        ""HKU\\S-1-5-21-*\\SOFTWARE\\Microsoft\\Office\\*\\Security\\AccessVBOM"",
        ""HKU\\S-1-5-21-*\\SOFTWARE\\Microsoft\\Office\\*\\Security\\VbaWarnings""
        ) and
    registry.data.strings == ""0x00000001"" and
    process.name : (""cscript.exe"", ""wscript.exe"", ""mshta.exe"", ""mshta.exe"", ""winword.exe"", ""excel.exe"")
",medium,"['T1204', 'T1112']",{'microsoft office'},64.0,"['macros', 'microsoft', 'office', 'security', 'adversaries']"
e308,Unusual Network Activity from a Windows System Binary,"Identifies network activity from unexpected system applications. This may indicate adversarial activity as these
applications are often leveraged by adversaries to execute code and evade detection.
","sequence by process.entity_id with maxspan=5m
  [process where event.type == ""start"" and

     /* known applocker bypasses */
     (process.name : ""bginfo.exe"" or
      process.name : ""cdb.exe"" or
      process.name : ""control.exe"" or
      process.name : ""cmstp.exe"" or
      process.name : ""csi.exe"" or
      process.name : ""dnx.exe"" or
      process.name : ""fsi.exe"" or
      process.name : ""ieexec.exe"" or
      process.name : ""iexpress.exe"" or
      process.name : ""installutil.exe"" or
      process.name : ""Microsoft.Workflow.Compiler.exe"" or
      process.name : ""MSBuild.exe"" or
      process.name : ""msdt.exe"" or
      process.name : ""mshta.exe"" or
      process.name : ""msiexec.exe"" or
      process.name : ""msxsl.exe"" or
      process.name : ""odbcconf.exe"" or
      process.name : ""rcsi.exe"" or
      process.name : ""regsvr32.exe"" or
      process.name : ""xwizard.exe"")]
  [network where
     (process.name : ""bginfo.exe"" or
      process.name : ""cdb.exe"" or
      process.name : ""control.exe"" or
      process.name : ""cmstp.exe"" or
      process.name : ""csi.exe"" or
      process.name : ""dnx.exe"" or
      process.name : ""fsi.exe"" or
      process.name : ""ieexec.exe"" or
      process.name : ""iexpress.exe"" or
      process.name : ""installutil.exe"" or
      process.name : ""Microsoft.Workflow.Compiler.exe"" or
      process.name : ""MSBuild.exe"" or
      process.name : ""msdt.exe"" or
      process.name : ""mshta.exe"" or
      process.name : ""msiexec.exe"" or
      process.name : ""msxsl.exe"" or
      process.name : ""odbcconf.exe"" or
      process.name : ""rcsi.exe"" or
      process.name : ""regsvr32.exe"" or
      process.name : ""xwizard.exe"")]
",medium,['T1127'],{'msbuild'},252.0,"['adversarial', 'detection', 'adversaries', 'applications', 'evade']"
e309,Parent Process PID Spoofing,"Identifies parent process spoofing used to thwart detection. Adversaries may spoof the parent process identifier (PPID)
of a new process to evade process-monitoring defenses or to elevate privileges.
","/* This rule is compatible with Elastic Endpoint only */

sequence by host.id, user.id with maxspan=5m
 [process where event.type == ""start"" and
  process.Ext.token.integrity_level_name != ""system"" and
  (
    process.pe.original_file_name : (""winword.exe"", ""excel.exe"", ""outlook.exe"", ""powerpnt.exe"", ""eqnedt32.exe"",
                                     ""fltldr.exe"", ""mspub.exe"", ""msaccess.exe"", ""powershell.exe"", ""pwsh.exe"",
                                     ""cscript.exe"", ""wscript.exe"", ""rundll32.exe"", ""regsvr32.exe"", ""msbuild.exe"",
                                     ""mshta.exe"", ""wmic.exe"", ""cmstp.exe"", ""msxsl.exe"") or
    process.executable : (""?:\\Users\\*.exe"",
                          ""?:\\ProgramData\\*.exe"",
                          ""?:\\Windows\\Microsoft.NET\\*.exe"",
                          ""?:\\Windows\\Temp\\*.exe"",
                          ""?:\\Windows\\Tasks\\*"") or
    process.code_signature.trusted != true
  )
  ] by process.pid
 [process where event.type == ""start"" and process.parent.Ext.real.pid > 0 and
  /* process.parent.Ext.real.pid is only populated if the parent process pid doesn't match */

  not (process.name : ""msedge.exe"" and process.parent.name : ""sihost.exe"")
 ] by process.parent.Ext.real.pid
",high,['T1134'],"{'msbuild', 'rundll32', 'sihost'}",,"['spoofing', 'ppid', 'spoof', 'detection', 'adversaries']"
e310,Temporarily Scheduled Task Creation,"Indicates the creation and deletion of a scheduled task within a short time interval. Adversaries can use these to proxy
malicious execution via the schedule service and perform clean up.
","sequence by host.id, winlog.event_data.TaskName with maxspan=5m
   [iam where event.action == ""scheduled-task-created""]
   [iam where event.action == ""scheduled-task-deleted""]
",medium,"['T1053', 'T1070']",{'winlog'},,"['malicious', 'scheduled', 'schedule', 'execution', 'task']"
e311,Suspicious .NET Reflection via PowerShell,"Detects the use of Reflection.Assembly to load PEs and DLLs in memory in PowerShell scripts. Attackers use this method
to load executables and DLLs without writing to the disk, bypassing security solutions.
","event.category:process and
  powershell.file.script_block_text : (
    ""[System.Reflection.Assembly]::Load"" or
    ""[Reflection.Assembly]::Load""
  )
",high,"['T1055', 'T1059']","{'dll', 'stop', 'powershell'}",56.0,"['dlls', 'executables', 'powershell', 'reflection', 'attackers']"
e312,PowerShell Suspicious Payload Encoded and Compressed,"Identifies the use of .NET functionality for decompression and base64 decoding combined in PowerShell scripts, which
malware and security tools heavily use to deobfuscate payloads and load them directly in memory to bypass defenses.
","event.category:process and
  powershell.file.script_block_text : (
    (
      ""System.IO.Compression.DeflateStream"" or
      ""System.IO.Compression.GzipStream"" or
      ""IO.Compression.DeflateStream"" or
      ""IO.Compression.GzipStream""
    ) and
    FromBase64String
  )
",medium,"['T1059', 'T1140', 'T1027']","{'malware', 'stop', 'powershell'}",5.0,"['deobfuscate', 'base64', 'powershell', 'malware', 'decoding']"
e313,Potential Process Injection via PowerShell,"Detects the use of Windows API functions that are commonly abused by malware and security tools to load
malicious code or inject it into remote processes.
","event.category:process and
  powershell.file.script_block_text : (
   (VirtualAlloc or VirtualAllocEx or VirtualProtect or LdrLoadDll or LoadLibrary or LoadLibraryA or
      LoadLibraryEx or GetProcAddress or OpenProcess or OpenProcessToken or AdjustTokenPrivileges) and
   (WriteProcessMemory or CreateRemoteThread or NtCreateThreadEx or CreateThread or QueueUserAPC or
      SuspendThread or ResumeThread or GetDelegateForFunctionPointer)
  )
",high,['T1055'],"{'powershell', 'empire', 'mimikatz', 'ps1', 'malware'}",,"['malware', 'api', 'malicious', 'processes', 'windows']"
e314,Potential Process Herpaderping Attempt,"Identifies process execution followed by a file overwrite of an executable by the same parent process. This may indicate
an evasion attempt to execute malicious code in a stealthy way.
","sequence with maxspan=5s
   [process where event.type == ""start"" and not process.parent.executable : ""C:\\Windows\\SoftwareDistribution\\*.exe""] by host.id, process.executable, process.parent.entity_id
   [file where event.type == ""change"" and event.action == ""overwrite"" and file.extension == ""exe""] by host.id, file.path, process.entity_id
",high,['T1036'],,253.0,"['executable', 'malicious', 'execution', 'evasion', 'process']"
e315,Windows Firewall Disabled via PowerShell,"Identifies when the Windows Firewall is disabled using PowerShell cmdlets, which can help attackers evade network
constraints, like internet and network lateral communication restrictions.
","process where event.action == ""start"" and
  (process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") or process.pe.original_file_name == ""PowerShell.EXE"") and
   process.args : ""*Set-NetFirewallProfile*"" and
  (process.args : ""*-Enabled*"" and process.args : ""*False*"") and
  (process.args : ""*-All*"" or process.args : (""*Public*"", ""*Domain*"", ""*Private*""))
",medium,['T1562'],{'powershell'},5.0,"['firewall', 'powershell', 'disabled', 'attackers', 'cmdlets']"
e316,Process Termination followed by Deletion,"Identifies a process termination event quickly followed by the deletion of its executable file. Malware tools and other
non-native files dropped or created on a system by an adversary may leave traces to indicate to what occurred. Removal
of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's
footprint.
","sequence by host.id with maxspan=5s
   [process where event.type == ""end"" and
    process.code_signature.trusted == false and
    not process.executable : (""C:\\Windows\\SoftwareDistribution\\*.exe"", ""C:\\Windows\\WinSxS\\*.exe"")
   ] by process.executable
   [file where event.type == ""deletion"" and file.extension : (""exe"", ""scr"", ""com"") and
    not process.executable :
             (""?:\\Program Files\\*.exe"",
              ""?:\\Program Files (x86)\\*.exe"",
              ""?:\\Windows\\System32\\svchost.exe"",
              ""?:\\Windows\\System32\\drvinst.exe"") and
    not file.path : (""?:\\Program Files\\*.exe"", ""?:\\Program Files (x86)\\*.exe"")
   ] by file.path
",medium,['T1070'],{'malware'},48.0,"['malware', 'executable', 'intrusion', 'process', 'removal']"
e317,Suspicious Microsoft Diagnostics Wizard Execution,"Identifies potential abuse of the Microsoft Diagnostics Troubleshooting Wizard (MSDT) to proxy malicious command or binary
execution via malicious process arguments.
","process where event.type == ""start"" and
   (process.pe.original_file_name == ""msdt.exe"" or process.name : ""msdt.exe"") and
   (
    process.args : (""IT_RebrowseForFile=*"", ""ms-msdt:/id"", ""ms-msdt:-id"", ""*FromBase64*"") or

    (process.args : ""-af"" and process.args : ""/skip"" and
     process.parent.name : (""explorer.exe"", ""cmd.exe"", ""powershell.exe"", ""cscript.exe"", ""wscript.exe"", ""mshta.exe"", ""rundll32.exe"", ""regsvr32.exe"") and
     process.args : (""?:\\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml"", ""PCWDiagnostic.xml"", ""?:\\Users\\Public\\*"", ""?:\\Windows\\Temp\\*"")) or

    (process.pe.original_file_name == ""msdt.exe"" and not process.name : ""msdt.exe"" and process.name != null) or

    (process.pe.original_file_name == ""msdt.exe"" and not process.executable : (""?:\\Windows\\system32\\msdt.exe"", ""?:\\Windows\\SysWOW64\\msdt.exe""))
    )
",high,['T1218'],{'rundll32'},96.0,"['msdt', 'microsoft', 'malicious', 'diagnostics', 'execution']"
e318,Unusual Child Processes of RunDLL32,"Identifies child processes of unusual instances of RunDLL32 where the command line parameters were suspicious. Misuse of
RunDLL32 could indicate malicious activity.
","sequence with maxspan=1h
  [process where event.type == ""start"" and
     (process.name : ""rundll32.exe"" or process.pe.original_file_name == ""RUNDLL32.EXE"") and
      process.args_count == 1
  ] by process.entity_id
  [process where event.type == ""start"" and process.parent.name : ""rundll32.exe""
  ] by process.parent.entity_id
",high,['T1218'],"{'dll', 'rundll32'}",254.0,"['rundll32', 'malicious', 'suspicious', 'processes', 'misuse']"
e319,Scheduled Tasks AT Command Enabled,"Identifies attempts to enable the Windows scheduled tasks AT command via the registry. Attackers may use this method to
move laterally or persist locally. The AT command has been deprecated since Windows 8 and Windows Server 2012, but still
exists for backwards compatibility.
","registry where
 registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\Configuration\\EnableAt"" and
 registry.data.strings : (""1"", ""0x00000001"")
",medium,['T1562'],{'registry modification'},147.0,"['scheduled', 'tasks', 'registry', 'command', 'attackers']"
e320,Potential Secure File Deletion via SDelete Utility,"Detects file name patterns generated by the use of Sysinternals SDelete utility to securely delete a file via multiple
file overwrite and rename operations.
","file where event.type == ""change"" and file.name : ""*AAA.AAA""
",low,['T1070'],{'sdelete'},,"['sdelete', 'file', 'sysinternals', 'rename', 'detects']"
e321,SIP Provider Modification,"Identifies modifications to the registered Subject Interface Package (SIP) providers. SIP providers are used by the
Windows cryptographic system to validate file signatures on the system. This may be an attempt to bypass signature
validation checks or inject code into critical processes.
","registry where event.type:""change"" and
  registry.path: (
    ""HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllPutSignedDataMsg\\{*}\\Dll"",
    ""HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllPutSignedDataMsg\\{*}\\Dll"",
    ""HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{*}\\$Dll"",
    ""HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{*}\\$Dll""
    ) and
  registry.data.strings:""*.dll""
",medium,['T1553'],{'signed binary'},255.0,"['sip', 'providers', 'signatures', 'signature', 'processes']"
e322,SolarWinds Process Disabling Services via Registry,"Identifies a SolarWinds binary modifying the start type of a service to be disabled. An adversary may abuse this
technique to manipulate relevant security services.
","registry where registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\Services\\*\\Start"" and
  registry.data.strings : (""4"", ""0x00000004"") and
  process.name : (
      ""SolarWinds.BusinessLayerHost*.exe"",
      ""ConfigurationWizard*.exe"",
      ""NetflowDatabaseMaintenance*.exe"",
      ""NetFlowService*.exe"",
      ""SolarWinds.Administration*.exe"",
      ""SolarWinds.Collector.Service*.exe"" ,
      ""SolarwindsDiagnostics*.exe"")
",medium,"['T1195', 'T1562']","{'sunburst', 'solarwinds'}",166.0,"['solarwinds', 'services', 'service', 'security', 'binary']"
e323,Suspicious CertUtil Commands,"Identifies suspicious commands being used with certutil.exe. CertUtil is a native Windows component which is part of
Certificate Services. CertUtil is often abused by attackers to live off the land for stealthier command and control or
data exfiltration.
","process where event.type == ""start"" and
  (process.name : ""certutil.exe"" or process.pe.original_file_name == ""CertUtil.exe"") and
  process.args : (""?decode"", ""?encode"", ""?urlcache"", ""?verifyctl"", ""?encodehex"", ""?decodehex"", ""?exportPFX"")
",medium,['T1140'],"{'exe', 'certutil'}",,"['certutil', 'certificate', 'exe', 'suspicious', 'attackers']"
e324,Suspicious Execution from a Mounted Device,"Identifies when a script interpreter or signed binary is launched via a non-standard working directory. An attacker may
use this technique to evade defenses.
","process where event.type == ""start"" and process.executable : ""C:\\*"" and
  (process.working_directory : ""?:\\"" and not process.working_directory: ""C:\\"") and
  process.parent.name : ""explorer.exe"" and
  process.name : (""rundll32.exe"", ""mshta.exe"", ""powershell.exe"", ""pwsh.exe"", ""cmd.exe"", ""regsvr32.exe"",
                  ""cscript.exe"", ""wscript.exe"")
",medium,"['T1218', 'T1059']","{'signed binary', 'apt29', 'nobelium', 'rundll32'}",7.0,"['interpreter', 'script', 'directory', 'binary', 'attacker']"
e325,Suspicious Managed Code Hosting Process,"Identifies a suspicious managed code hosting process which could indicate code injection or other form of suspicious
code execution.
","sequence by process.entity_id with maxspan=5m
 [process where event.type == ""start"" and
  process.name : (""wscript.exe"", ""cscript.exe"", ""mshta.exe"", ""wmic.exe"", ""regsvr32.exe"", ""svchost.exe"", ""dllhost.exe"", ""cmstp.exe"")]
 [file where event.type != ""deletion"" and
  file.name : (""wscript.exe.log"",
               ""cscript.exe"",
               ""mshta.exe.log"",
               ""wmic.exe.log"",
               ""svchost.exe.log"",
               ""dllhost.exe.log"",
               ""cmstp.exe.log"",
               ""regsvr32.exe.log"")]
",high,['T1055'],,186.0,"['suspicious', 'hosting', 'execution', 'process', 'code']"
e326,Suspicious Process Access via Direct System Call,"Identifies suspicious process access events from an unknown memory region. Endpoint security solutions usually hook
userland Windows APIs in order to decide if the code that is being executed is malicious or not. It's possible to bypass
hooked functions by writing malicious functions that call syscalls directly.
","process where event.code == ""10"" and
 length(winlog.event_data.CallTrace) > 0 and

 /* Sysmon CallTrace starting with unknown memory module instead of ntdll which host Windows NT Syscalls */
 not winlog.event_data.CallTrace :
            (""?:\\WINDOWS\\SYSTEM32\\ntdll.dll*"",
             ""?:\\WINDOWS\\SysWOW64\\ntdll.dll*"",
             ""?:\\Windows\\System32\\wow64cpu.dll*"",
             ""?:\\WINDOWS\\System32\\wow64win.dll*"",
             ""?:\\Windows\\System32\\win32u.dll*"") and

 not winlog.event_data.TargetImage :
            (""?:\\Program Files (x86)\\Malwarebytes Anti-Exploit\\mbae-svc.exe"",
             ""?:\\Program Files\\Cisco\\AMP\\*\\sfc.exe"",
             ""?:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\*\\msedgewebview2.exe"",
             ""?:\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\*\\AcroCEF.exe"") and

 not (process.executable : (""?:\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\Acrobat.exe"",
                            ""?:\\Program Files (x86)\\World of Warcraft\\_classic_\\WowClassic.exe"") and
      not winlog.event_data.TargetImage : ""?:\\WINDOWS\\system32\\lsass.exe"")
",high,['T1055'],"{'stop', 'winlog', 'hook'}",,"['endpoint', 'syscalls', 'malicious', 'process', 'security']"
e327,Suspicious Process Creation CallTrace,"Identifies when a process is created and immediately accessed from an unknown memory code region and by the same parent
process. This may indicate a code injection attempt.
","sequence by host.id with maxspan=1m
  [process where event.code == ""1"" and
   /* sysmon process creation */
   process.parent.name : (""winword.exe"", ""excel.exe"", ""outlook.exe"", ""powerpnt.exe"", ""eqnedt32.exe"", ""fltldr.exe"",
                          ""mspub.exe"", ""msaccess.exe"",""cscript.exe"", ""wscript.exe"", ""rundll32.exe"", ""regsvr32.exe"",
                          ""mshta.exe"", ""wmic.exe"", ""cmstp.exe"", ""msxsl.exe"") and

   /* noisy FP patterns */
   not (process.parent.name : ""EXCEL.EXE"" and process.executable : ""?:\\Program Files\\Microsoft Office\\root\\Office*\\ADDINS\\*.exe"") and
   not (process.executable : ""?:\\Windows\\splwow64.exe"" and process.args in (""8192"", ""12288"") and process.parent.name : (""winword.exe"", ""excel.exe"", ""outlook.exe"", ""powerpnt.exe"")) and
   not (process.parent.name : ""rundll32.exe"" and process.parent.args : (""?:\\WINDOWS\\Installer\\MSI*.tmp,zzzzInvokeManagedCustomActionOutOfProc"", ""--no-sandbox"")) and
   not (process.executable :
            (""?:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\*\\msedgewebview2.exe"",
             ""?:\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\Acrobat.exe"",
             ""?:\\Windows\\SysWOW64\\DWWIN.EXE"") and
        process.parent.name : (""winword.exe"", ""excel.exe"", ""outlook.exe"", ""powerpnt.exe"")) and
   not (process.parent.name : ""regsvr32.exe"" and process.parent.args : (""?:\\Program Files\\*"", ""?:\\Program Files (x86)\\*""))
   ] by process.parent.entity_id, process.entity_id
  [process where event.code == ""10"" and
   /* Sysmon process access event from unknown module */
   winlog.event_data.CallTrace : ""*UNKNOWN*""] by process.entity_id, winlog.event_data.TargetProcessGUID
",medium,['T1055'],"{'winlog', 'rundll32'}",,"['process', 'code', 'memory', 'injection', 'accessed']"
e328,Suspicious Script Object Execution,"Identifies scrobj.dll loaded into unusual Microsoft processes. This usually means a malicious scriptlet is being
executed in the target process.
","sequence by process.entity_id with maxspan=2m
  [process where event.type == ""start""
   and (process.code_signature.subject_name in (""Microsoft Corporation"", ""Microsoft Windows"") and
   process.code_signature.trusted == true) and
     not process.executable : (
       ""?:\\Windows\\System32\\cscript.exe"",
       ""?:\\Windows\\SysWOW64\\cscript.exe"",
       ""?:\\Program Files (x86)\\Internet Explorer\\iexplore.exe"",
       ""?:\\Program Files\\Internet Explorer\\iexplore.exe"",
       ""?:\\Windows\\SystemApps\\Microsoft.MicrosoftEdge_*\\MicrosoftEdge.exe"",
       ""?:\\Windows\\system32\\msiexec.exe"",
       ""?:\\Windows\\SysWOW64\\msiexec.exe"",
       ""?:\\Windows\\System32\\smartscreen.exe"",
       ""?:\\Windows\\system32\\taskhostw.exe"",
       ""?:\\windows\\system32\\inetsrv\\w3wp.exe"",
       ""?:\\windows\\SysWOW64\\inetsrv\\w3wp.exe"",
       ""?:\\Windows\\system32\\wscript.exe"",
       ""?:\\Windows\\SysWOW64\\wscript.exe"",
       ""?:\\Windows\\system32\\mobsync.exe"",
       ""?:\\Windows\\SysWOW64\\mobsync.exe"",
       ""?:\\Windows\\System32\\cmd.exe"",
       ""?:\\Windows\\SysWOW64\\cmd.exe"")]
  [library where event.type == ""start"" and dll.name : ""scrobj.dll""]
",medium,['T1218'],{'dll'},57.0,"['scrobj', 'dll', 'malicious', 'scriptlet', 'processes']"
e329,Suspicious Execution - Short Program Name,"Identifies process execution with a single character process name. This is often done by adversaries while staging or
executing temporary utilities.
","process where event.type == ""start"" and length(process.name) > 0 and
 length(process.name) == 5 and host.os.name == ""Windows"" and length(process.pe.original_file_name) > 5
",medium,['T1036'],,186.0,"['process', 'execution', 'executing', 'identifies', 'character']"
e330,Suspicious WMIC XSL Script Execution,"Identifies WMIC allowlist bypass techniques by alerting on suspicious execution of scripts. When WMIC loads scripting
libraries it may be indicative of an allowlist bypass.
","sequence by process.entity_id with maxspan = 2m
[process where event.type == ""start"" and
   (process.name : ""WMIC.exe"" or process.pe.original_file_name : ""wmic.exe"") and
   process.args : (""format*:*"", ""/format*:*"", ""*-format*:*"") and
   not process.command_line : ""* /format:table *""]
[any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
 (dll.name : (""jscript.dll"", ""vbscript.dll"") or file.name : (""jscript.dll"", ""vbscript.dll""))]
",medium,['T1220'],{'wmi'},7.0,"['wmic', 'allowlist', 'bypass', 'scripts', 'execution']"
e331,Suspicious Zoom Child Process,"A suspicious Zoom child process was detected, which may indicate an attempt to run unnoticed. Verify process details
such as command line, network connections, file writes and associated file signature details as well.
","process where event.type == ""start"" and
 process.parent.name : ""Zoom.exe"" and process.name : (""cmd.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"")
",medium,"['T1036', 'T1055']",{'zoom'},186.0,"['zoom', 'suspicious', 'detected', 'child', 'process']"
e332,Unusual Executable File Creation by a System Critical Process,"Identifies an unexpected executable file being created or modified by a Windows system critical process, which may
indicate activity related to remote code execution or other forms of exploitation.
","file where event.type != ""deletion"" and
  file.extension : (""exe"", ""dll"") and
  process.name : (""smss.exe"",
                  ""autochk.exe"",
                  ""csrss.exe"",
                  ""wininit.exe"",
                  ""services.exe"",
                  ""lsass.exe"",
                  ""winlogon.exe"",
                  ""userinit.exe"",
                  ""LogonUI.exe"")
",high,['T1211'],{'stop'},253.0,"['executable', 'file', 'process', 'execution', 'windows']"
e333,Unusual File Creation - Alternate Data Stream,"Identifies suspicious creation of Alternate Data Streams on highly targeted files. This is uncommon for legitimate files
and sometimes done by adversaries to hide malware.
","file where event.type == ""creation"" and

  file.path : ""C:\\*:*"" and
  not file.path : ""C:\\*:zone.identifier*"" and

  not process.executable :
          (""?:\\windows\\System32\\svchost.exe"",
           ""?:\\Windows\\System32\\inetsrv\\w3wp.exe"",
           ""?:\\Windows\\explorer.exe"",
           ""?:\\Windows\\System32\\sihost.exe"",
           ""?:\\Windows\\System32\\PickerHost.exe"",
           ""?:\\Windows\\System32\\SearchProtocolHost.exe"",
           ""?:\\Program Files (x86)\\Dropbox\\Client\\Dropbox.exe"",
           ""?:\\Program Files\\Rivet Networks\\SmartByte\\SmartByteNetworkService.exe"",
           ""?:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe"",
           ""?:\\Program Files\\ExpressConnect\\ExpressConnectNetworkService.exe"",
           ""?:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"",
           ""?:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"",
           ""?:\\Program Files\\Mozilla Firefox\\firefox.exe"") and

  file.extension :
    (
      ""pdf"",
      ""dll"",
      ""png"",
      ""exe"",
      ""dat"",
      ""com"",
      ""bat"",
      ""cmd"",
      ""sys"",
      ""vbs"",
      ""ps1"",
      ""hta"",
      ""txt"",
      ""vbe"",
      ""js"",
      ""wsh"",
      ""docx"",
      ""doc"",
      ""xlsx"",
      ""xls"",
      ""pptx"",
      ""ppt"",
      ""rtf"",
      ""gif"",
      ""jpg"",
      ""png"",
      ""bmp"",
      ""img"",
      ""iso""
    )
",medium,['T1564'],"{'ps1', 'stop', 'malware', 'sihost'}",,"['malware', 'files', 'streams', 'suspicious', 'data']"
e334,Unusual Process Execution Path - Alternate Data Stream,"Identifies processes running from an Alternate Data Stream. This is uncommon for legitimate processes and sometimes done
by adversaries to hide malware.
","process where event.type == ""start"" and
  process.args : ""?:\\*:*"" and process.args_count == 1
",medium,['T1564'],{'malware'},48.0,"['malware', 'processes', 'stream', 'data', 'identifies']"
e335,Unusual Network Connection via DllHost,"Identifies unusual instances of dllhost.exe making outbound network connections. This may indicate adversarial Command
and Control activity.
","sequence by host.id, process.entity_id with maxspan=1m
  [process where event.type == ""start"" and process.name : ""dllhost.exe"" and process.args_count == 1]
  [network where process.name : ""dllhost.exe"" and
   not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
    ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"", ""192.0.2.0/24"",
    ""192.31.196.0/24"", ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"",
    ""192.175.48.0/24"", ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"", ""FE80::/10"",
    ""FF00::/8"")]
",medium,['T1218'],"{'dll', 'apt29', 'exe', 'nobelium'}",256.0,"['dllhost', 'exe', 'connections', 'outbound', 'adversarial']"
e336,Unusual Network Connection via RunDLL32,"Identifies unusual instances of rundll32.exe making outbound network connections. This may indicate adversarial Command
and Control activity.
","sequence by host.id, process.entity_id with maxspan=1m
  [process where event.type == ""start"" and process.name : ""rundll32.exe"" and process.args_count == 1]
  [network where process.name : ""rundll32.exe"" and
   not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
       ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"",
       ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"",
       ""100.64.0.0/10"", ""192.175.48.0/24"",""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
       ""FE80::/10"", ""FF00::/8"")]
",medium,['T1218'],"{'dll', 'exe', 'rundll32'}",254.0,"['rundll32', 'exe', 'connections', 'outbound', 'unusual']"
e337,Unusual Process Network Connection,"Identifies network activity from unexpected system applications. This may indicate adversarial activity as these
applications are often leveraged by adversaries to execute code and evade detection.
","sequence by process.entity_id
  [process where (process.name : ""Microsoft.Workflow.Compiler.exe"" or
                  process.name : ""bginfo.exe"" or
                  process.name : ""cdb.exe"" or
                  process.name : ""cmstp.exe"" or
                  process.name : ""csi.exe"" or
                  process.name : ""dnx.exe"" or
                  process.name : ""fsi.exe"" or
                  process.name : ""ieexec.exe"" or
                  process.name : ""iexpress.exe"" or
                  process.name : ""odbcconf.exe"" or
                  process.name : ""rcsi.exe"" or
                  process.name : ""xwizard.exe"") and
     event.type == ""start""]
  [network where (process.name : ""Microsoft.Workflow.Compiler.exe"" or
                  process.name : ""bginfo.exe"" or
                  process.name : ""cdb.exe"" or
                  process.name : ""cmstp.exe"" or
                  process.name : ""csi.exe"" or
                  process.name : ""dnx.exe"" or
                  process.name : ""fsi.exe"" or
                  process.name : ""ieexec.exe"" or
                  process.name : ""iexpress.exe"" or
                  process.name : ""odbcconf.exe"" or
                  process.name : ""rcsi.exe"" or
                  process.name : ""xwizard.exe"")]
",low,['T1127'],,252.0,"['adversarial', 'detection', 'adversaries', 'applications', 'evade']"
e338,Unusual Child Process from a System Virtual Process,"Identifies a suspicious child process of the Windows virtual system process, which could indicate code injection.","process where event.type == ""start"" and
  process.parent.pid == 4 and
  not process.executable : (""Registry"", ""MemCompression"", ""?:\\Windows\\System32\\smss.exe"")
",high,['T1055'],,186.0,"['virtual', 'process', 'suspicious', 'injection', 'windows']"
e339,Potential Evasion via Filter Manager,"The Filter Manager Control Program (fltMC.exe) binary may be abused by adversaries to unload a filter driver and evade
defenses.
","process where event.type == ""start"" and
 process.name : ""fltMC.exe"" and process.args : ""unload""
",medium,['T1562'],{'exe'},112.0,"['fltmc', 'filter', 'exe', 'unload', 'control']"
e340,Signed Proxy Execution via MS Work Folders,"Identifies the use of Windows Work Folders to execute a potentially masqueraded control.exe file in the current working
directory. Misuse of Windows Work Folders could indicate malicious activity.
","process where event.type == ""start"" 
    and process.name : ""control.exe"" and process.parent.name : ""WorkFolders.exe""
    and not process.executable : (""?:\\Windows\\System32\\control.exe"", ""?:\\Windows\\SysWOW64\\control.exe"")
",medium,['T1218'],{'exe'},248.0,"['exe', 'folders', 'windows', 'malicious', 'directory']"
e341,AdFind Command Activity,"This rule detects the Active Directory query tool, AdFind.exe. AdFind has legitimate purposes, but it is frequently
leveraged by threat actors to perform post-exploitation Active Directory reconnaissance. The AdFind tool has been
observed in Trickbot, Ryuk, Maze, and FIN6 campaigns. For Winlogbeat, this rule requires Sysmon.
","process where event.type == ""start"" and
  (process.name : ""AdFind.exe"" or process.pe.original_file_name == ""AdFind.exe"") and
  process.args : (""objectcategory=computer"", ""(objectcategory=computer)"",
                  ""objectcategory=person"", ""(objectcategory=person)"",
                  ""objectcategory=subnet"", ""(objectcategory=subnet)"",
                  ""objectcategory=group"", ""(objectcategory=group)"",
                  ""objectcategory=organizationalunit"", ""(objectcategory=organizationalunit)"",
                  ""objectcategory=attributeschema"", ""(objectcategory=attributeschema)"",
                  ""domainlist"", ""dcmodes"", ""adinfo"", ""dclist"", ""computers_pwnotreqd"", ""trustdmp"")
",low,"['T1087', 'T1069', 'T1018', 'T1482']","{'fin6', 'anchor', 'maze', 'trickbot', 'exe', 'adfind', 'ryuk'}",,"['adfind', 'winlogbeat', 'exe', 'exploitation', 'purposes']"
e342,Enumeration of Administrator Accounts,"Identifies instances of lower privilege accounts enumerating Administrator accounts or groups using built-in Windows
tools.
","process where event.type == ""start"" and
  (((process.name : ""net.exe"" or process.pe.original_file_name == ""net.exe"") or
    ((process.name : ""net1.exe"" or process.pe.original_file_name == ""net1.exe"") and
        not process.parent.name : ""net.exe"")) and
   process.args : (""group"", ""user"", ""localgroup"") and
   process.args : (""admin"", ""Domain Admins"", ""Remote Desktop Users"", ""Enterprise Admins"", ""Organization Management"") and
   not process.args : ""/add"")

   or

  ((process.name : ""wmic.exe"" or process.pe.original_file_name == ""wmic.exe"") and
     process.args : (""group"", ""useraccount""))
",low,"['T1087', 'T1069']","{'net.exe', 'adfind', 'privilege'}",,"['administrator', 'privilege', 'accounts', 'groups', 'tools']"
e343,Account Discovery Command via SYSTEM Account,"Identifies when the SYSTEM account uses an account discovery utility. This could be a sign of discovery activity after
an adversary has achieved privilege escalation.
","process where event.type == ""start"" and
  (?process.Ext.token.integrity_level_name : ""System"" or
  ?winlog.event_data.IntegrityLevel : ""System"") and
  (process.name : ""whoami.exe"" or
  (process.name : ""net1.exe"" and not process.parent.name : ""net.exe""))
",low,['T1033'],"{'net.exe', 'winlog', 'privilege'}",,"['account', 'privilege', 'adversary', 'discovery', 'utility']"
e344,Enumerating Domain Trusts via NLTEST.EXE,"Identifies the use of nltest.exe for domain trust discovery purposes. Adversaries may use this command-line utility to
enumerate domain trusts and gain insight into trust relationships, as well as the state of Domain Controller (DC)
replication in a Microsoft Windows NT Domain.
","process where event.type == ""start"" and
    process.name : ""nltest.exe"" and process.args : (
        ""/DCLIST:*"", ""/DCNAME:*"", ""/DSGET*"",
        ""/LSAQUERYFTI:*"", ""/PARENTDOMAIN"",
        ""/DOMAIN_TRUSTS"", ""/BDC_QUERY:*"")
",low,['T1482'],"{'nltest', 'ryuk'}",112.0,"['nltest', 'microsoft', 'trusts', 'dc', 'domain']"
e345,Windows Network Enumeration,Identifies attempts to enumerate hosts in a network using the built-in Windows net.exe tool.,"process where event.type == ""start"" and
  ((process.name : ""net.exe"" or process.pe.original_file_name == ""net.exe"") or
   ((process.name : ""net1.exe"" or process.pe.original_file_name == ""net1.exe"") and
       not process.parent.name : ""net.exe"")) and
  (process.args : ""view"" or (process.args : ""time"" and process.args : ""\\\\*""))


  /* expand when ancestry is available
  and not descendant of [process where event.type == ""start"" and process.name : ""cmd.exe"" and
                           ((process.parent.name : ""userinit.exe"") or
                            (process.parent.name : ""gpscript.exe"") or
                            (process.parent.name : ""explorer.exe"" and
                               process.args : ""C:\\*\\Start Menu\\Programs\\Startup\\*.bat*""))]
  */
",medium,"['T1018', 'T1135']","{'net.exe', 'exe', 'network', 'expand'}",163.0,"['hosts', 'net', 'network', 'exe', 'enumerate']"
e346,Peripheral Device Discovery,"Identifies use of the Windows file system utility (fsutil.exe) to gather information about attached peripheral devices
and components connected to a computer system.
","process where event.type == ""start"" and
  (process.name : ""fsutil.exe"" or process.pe.original_file_name == ""fsutil.exe"") and
  process.args : ""fsinfo"" and process.args : ""drives""
",low,['T1120'],{'exe'},248.0,"['fsutil', 'exe', 'file', 'windows', 'devices']"
e347,PowerShell Share Enumeration Script,"Detects scripts that contain PowerShell functions, structures, or Windows API functions related to windows share
enumeration activities. Attackers, mainly ransomware groups, commonly identify and inspect network shares, looking for
critical information for encryption and/or exfiltration.
","event.category:process and
  powershell.file.script_block_text:(
    ""Invoke-ShareFinder"" or
    ""Invoke-ShareFinderThreaded"" or
    (
      ""shi1_netname"" and
      ""shi1_remark""
    ) or
    (
      ""NetShareEnum"" and
      ""NetApiBufferFree""
    )
  )
",medium,"['T1106', 'T1135', 'T1059']","{'powershell', 'conti'}",257.0,"['powershell', 'ransomware', 'scripts', 'detects', 'attackers']"
e348,PowerShell Suspicious Discovery Related Windows API Functions,"This rule detects the use of discovery-related Windows API functions in PowerShell Scripts. Attackers can use these
functions to perform various situational awareness related activities, like enumerating users, shares, sessions, domain
trusts, groups, etc.
","event.category:process and
  powershell.file.script_block_text : (
    NetShareEnum or
    NetWkstaUserEnum or
    NetSessionEnum or
    NetLocalGroupEnum or
    NetLocalGroupGetMembers or
    DsGetSiteName or
    DsEnumerateDomainTrusts or
    WTSEnumerateSessionsEx or
    WTSQuerySessionInformation or
    LsaGetLogonSessionData or
    QueryServiceObjectSecurity
  )
",medium,"['T1106', 'T1069', 'T1135', 'T1059']","{'ps1', 'powershell', 'empire'}",,"['powershell', 'attackers', 'rule', 'detects', 'discovery']"
e349,External IP Lookup from Non-Browser Process,"Identifies domains commonly used by adversaries for post-exploitation IP lookups. It is common for adversaries to
test for Internet access and acquire their external IP address after they have gained access to a system. Among others,
this has been observed in campaigns leveraging the information stealer, Trickbot.
","network where network.protocol == ""dns"" and
    process.name != null and user.id not in (""S-1-5-19"", ""S-1-5-20"") and
    event.action == ""lookup_requested"" and
    /* Add new external IP lookup services here */
    dns.question.name :
    (
        ""*api.ipify.org"",
        ""*freegeoip.app"",
        ""*checkip.amazonaws.com"",
        ""*checkip.dyndns.org"",
        ""*freegeoip.app"",
        ""*icanhazip.com"",
        ""*ifconfig.*"",
        ""*ipecho.net"",
        ""*ipgeoapi.com"",
        ""*ipinfo.io"",
        ""*ip.anysrc.net"",
        ""*myexternalip.com"",
        ""*myipaddress.com"",
        ""*showipaddress.com"",
        ""*whatismyipaddress.com"",
        ""*wtfismyip.com"",
        ""*ipapi.co"",
        ""*ip-lookup.net"",
        ""*ipstack.com""
    ) and
    /* Insert noisy false positives here */
    not process.executable :
    (
      ""?:\\Program Files\\*.exe"",
      ""?:\\Program Files (x86)\\*.exe"",
      ""?:\\Windows\\System32\\WWAHost.exe"",
      ""?:\\Windows\\System32\\smartscreen.exe"",
      ""?:\\Windows\\System32\\MicrosoftEdgeCP.exe"",
      ""?:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\*\\MsMpEng.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Programs\\Fiddler\\Fiddler.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe"",
      ""?:\\Users\\*\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe""
    )
",low,"['T1016', 'T1614']","{'ifconfig', 'trickbot', 'anchor'}",,"['trickbot', 'exploitation', 'adversaries', 'ip', 'domains']"
e350,Enumeration of Privileged Local Groups Membership,"Identifies instances of an unusual process enumerating built-in Windows privileged local groups membership like
Administrators or Remote Desktop users.
","iam where event.action == ""user-member-enumerated"" and

  /* excluding machine account */
  not winlog.event_data.SubjectUserName: (""*$"", ""LOCAL SERVICE"", ""NETWORK SERVICE"") and

  /* noisy and usual legit processes excluded */
  not winlog.event_data.CallerProcessName:
               (""-"",
                ""?:\\Windows\\System32\\VSSVC.exe"",
                ""?:\\Windows\\System32\\SearchIndexer.exe"",
                ""?:\\Windows\\System32\\CompatTelRunner.exe"",
                ""?:\\Windows\\System32\\oobe\\msoobe.exe"",
                ""?:\\Windows\\System32\\net1.exe"",
                ""?:\\Windows\\System32\\svchost.exe"",
                ""?:\\Windows\\System32\\Netplwiz.exe"",
                ""?:\\Windows\\System32\\msiexec.exe"",
                ""?:\\Windows\\SysWOW64\\msiexec.exe"",
                ""?:\\Windows\\System32\\CloudExperienceHostBroker.exe"",
                ""?:\\Windows\\System32\\wbem\\WmiPrvSE.exe"",
                ""?:\\Windows\\System32\\SrTasks.exe"",
                ""?:\\Windows\\System32\\lsass.exe"",
                ""?:\\Windows\\System32\\diskshadow.exe"",
                ""?:\\Windows\\System32\\dfsrs.exe"",
                ""?:\\Program Files\\*.exe"",
                ""?:\\Program Files (x86)\\*.exe"",
                ""?:\\WindowsAzure\\*\\WaAppAgent.exe"",
                ""?:\\Windows\\System32\\vssadmin.exe"",
                ""?:\\Windows\\VeeamVssSupport\\VeeamGuestHelper.exe"",
                ""?:\\Windows\\System32\\dllhost.exe"",
                ""?:\\Windows\\System32\\mmc.exe"",
                ""?:\\Windows\\System32\\SettingSyncHost.exe"",
                ""?:\\Windows\\ImmersiveControlPanel\\SystemSettings.exe"",
                ""?:\\Windows\\System32\\SystemSettingsAdminFlows.exe"",
                ""?:\\Windows\\Temp\\rubrik_vmware???\\snaptool.exe"",
                ""?:\\Windows\\System32\\inetsrv\\w3wp.exe"",
                ""?:\\$WINDOWS.~BT\\Sources\\*.exe"",
                ""?:\\Windows\\System32\\wsmprovhost.exe"",
                ""?:\\Windows\\System32\\spool\\drivers\\x64\\3\\x3jobt3?.exe"",
                ""?:\\Windows\\System32\\mstsc.exe"",
                ""?:\\Windows\\System32\\esentutl.exe"",
                ""?:\\Windows\\System32\\RecoveryDrive.exe"",
                ""?:\\Windows\\System32\\SystemPropertiesComputerName.exe"") and

  /* privileged local groups */
  (group.name:(""admin*"",""RemoteDesktopUsers"") or
   winlog.event_data.TargetSid:(""S-1-5-32-544"",""S-1-5-32-555""))
",medium,['T1069'],"{'winlog', 'privilege', 'esentutl'}",,"['administrators', 'privileged', 'groups', 'process', 'instances']"
e351,Remote System Discovery Commands,"Discovery of remote system information using built-in commands, which may be used to move laterally.","process where event.type == ""start"" and
  ((process.name : ""nbtstat.exe"" and process.args : (""-n"", ""-s"")) or
  (process.name : ""arp.exe"" and process.args : ""-a""))
",low,"['T1018', 'T1016']","{'nbtstat', 'arp'}",,"['commands', 'remote', 'discovery', 'information', 'laterally']"
e352,Security Software Discovery using WMIC,"Identifies the use of Windows Management Instrumentation Command (WMIC) to discover certain System Security Settings
such as AntiVirus or Host Firewall details.
","process where event.type == ""start"" and
   (process.name:""wmic.exe"" or process.pe.original_file_name:""wmic.exe"") and
    process.args:""/namespace:\\\\root\\SecurityCenter2"" and process.args:""Get""
",medium,['T1518'],{'wmi'},184.0,"['wmic', 'antivirus', 'security', 'firewall', 'command']"
e353,Whoami Process Activity,"Identifies suspicious use of whoami.exe which displays user, group, and privileges information for the user who is currently logged
on to the local system.
","process where event.type == ""start"" and process.name : ""whoami.exe"" and
(

 (/* scoped for whoami execution under system privileges */
  (user.domain : (""NT AUTHORITY"", ""NT-AUTORITÄT"", ""AUTORITE NT"", ""IIS APPPOOL"") or user.id : (""S-1-5-18"", ""S-1-5-19"", ""S-1-5-20"")) and

   not (process.parent.name : ""cmd.exe"" and
        process.parent.args : (""chcp 437>nul 2>&1 & C:\\WINDOWS\\System32\\whoami.exe  /groups"",
                               ""chcp 437>nul 2>&1 & %systemroot%\\system32\\whoami /user"",
                               ""C:\\WINDOWS\\System32\\whoami.exe /groups"",
                               ""*WINDOWS\\system32\\config\\systemprofile*"")) and
   not (process.parent.executable : ""C:\\Windows\\system32\\inetsrv\\appcmd.exe"" and process.parent.args : ""LIST"") and
   not process.parent.executable : (""C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe"",
                                    ""C:\\Program Files\\Cohesity\\cohesity_windows_agent_service.exe"")) or

  process.parent.name : (""wsmprovhost.exe"", ""w3wp.exe"", ""wmiprvse.exe"", ""rundll32.exe"", ""regsvr32.exe"")

)
",low,['T1033'],"{'exe', 'rundll32', 'privilege'}",248.0,"['exe', 'whoami', 'privileges', 'suspicious', 'user']"
e354,Command Execution via SolarWinds Process,A suspicious SolarWinds child process (Cmd.exe or Powershell.exe) was detected.,"process where event.type == ""start"" and process.name: (""cmd.exe"", ""powershell.exe"") and
process.parent.name: (
     ""ConfigurationWizard*.exe"",
     ""NetflowDatabaseMaintenance*.exe"",
     ""NetFlowService*.exe"",
     ""SolarWinds.Administration*.exe"",
     ""SolarWinds.Collector.Service*.exe"",
     ""SolarwindsDiagnostics*.exe""
     )
",medium,"['T1195', 'T1059']","{'sunburst', 'powershell', 'solarwinds'}",,"['solarwinds', 'powershell', 'child', 'process', 'suspicious']"
e355,Suspicious SolarWinds Child Process,"A suspicious SolarWinds child process was detected, which may indicate an attempt to execute malicious programs.","process where event.type == ""start"" and
 process.parent.name: (""SolarWinds.BusinessLayerHost.exe"", ""SolarWinds.BusinessLayerHostx64.exe"") and
 not process.name : (
        ""APMServiceControl*.exe"",
        ""ExportToPDFCmd*.Exe"",
        ""SolarWinds.Credentials.Orion.WebApi*.exe"",
        ""SolarWinds.Orion.Topology.Calculator*.exe"",
        ""Database-Maint.exe"",
        ""SolarWinds.Orion.ApiPoller.Service.exe"",
        ""WerFault.exe"",
        ""WerMgr.exe"",
        ""SolarWinds.BusinessLayerHost.exe"",
        ""SolarWinds.BusinessLayerHostx64.exe"") and
 not process.executable : (""?:\\Windows\\SysWOW64\\ARP.EXE"", ""?:\\Windows\\SysWOW64\\lodctr.exe"", ""?:\\Windows\\SysWOW64\\unlodctr.exe"")
",medium,"['T1106', 'T1195']","{'sunburst', 'solarwinds', 'arp'}",,"['solarwinds', 'malicious', 'suspicious', 'process', 'child']"
e356,Command Prompt Network Connection,"Identifies cmd.exe making a network connection. Adversaries could abuse cmd.exe to download or execute malware from a
remote URL.
","sequence by process.entity_id
  [process where process.name : ""cmd.exe"" and event.type == ""start""]
  [network where process.name : ""cmd.exe"" and
     not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
                                  ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"",
                                  ""192.0.0.171/32"", ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"",
                                  ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"", ""100.64.0.0/10"", ""192.175.48.0/24"",
                                  ""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
                                  ""FE80::/10"", ""FF00::/8"")]
",low,"['T1059', 'T1105']","{'malware', 'exe', 'network'}",54.0,"['malware', 'cmd', 'exe', 'url', 'network']"
e357,Svchost spawning Cmd,Identifies a suspicious parent child process relationship with cmd.exe descending from svchost.exe,"process where event.type == ""start"" and

  process.parent.name : ""svchost.exe"" and process.name : ""cmd.exe"" and

  not process.args :
         (""??:\\Program Files\\Npcap\\CheckStatus.bat?"",
          ""?:\\Program Files\\Npcap\\CheckStatus.bat"",
          ""\\system32\\cleanmgr.exe"",
          ""?:\\Windows\\system32\\silcollector.cmd"",
          ""\\system32\\AppHostRegistrationVerifier.exe"",
          ""\\system32\\ServerManagerLauncher.exe"",
          ""dir"",
          ""?:\\Program Files\\*"",
          ""?:\\Program Files (x86)\\*"",
          ""?:\\Windows\\LSDeployment\\Lspush.exe"",
          ""(x86)\\FMAuditOnsite\\watchdog.bat"",
          ""?:\\ProgramData\\chocolatey\\bin\\choco-upgrade-all.bat"",
          ""Files\\Npcap\\CheckStatus.bat"") and

   /* very noisy pattern - bat or cmd script executed via scheduled tasks */
  not (process.parent.args : ""netsvcs"" and process.args : (""?:\\*.bat"", ""?:\\*.cmd""))
",low,['T1059'],"{'exe', 'stop'}",139.0,"['process', 'cmd', 'svchost', 'parent', 'exe']"
e358,Unusual Parent Process for cmd.exe,Identifies a suspicious parent child process relationship with cmd.exe descending from an unusual process.,"process where event.type == ""start"" and
  process.name : ""cmd.exe"" and
  process.parent.name : (""lsass.exe"",
                         ""csrss.exe"",
                         ""epad.exe"",
                         ""regsvr32.exe"",
                         ""dllhost.exe"",
                         ""LogonUI.exe"",
                         ""wermgr.exe"",
                         ""spoolsv.exe"",
                         ""jucheck.exe"",
                         ""jusched.exe"",
                         ""ctfmon.exe"",
                         ""taskhostw.exe"",
                         ""GoogleUpdate.exe"",
                         ""sppsvc.exe"",
                         ""sihost.exe"",
                         ""slui.exe"",
                         ""SIHClient.exe"",
                         ""SearchIndexer.exe"",
                         ""SearchProtocolHost.exe"",
                         ""FlashPlayerUpdateService.exe"",
                         ""WerFault.exe"",
                         ""WUDFHost.exe"",
                         ""unsecapp.exe"",
                         ""wlanext.exe"" )
",medium,['T1059'],"{'exe', 'sihost'}",,"['process', 'cmd', 'exe', 'parent', 'child']"
e359,Command Shell Activity Started via RunDLL32,"Identifies command shell activity started via RunDLL32, which is commonly abused by attackers to host malicious code.","process where event.type == ""start"" and
 process.name : (""cmd.exe"", ""powershell.exe"") and
  process.parent.name : ""rundll32.exe"" and process.parent.command_line != null and
  /* common FPs can be added here */
  not process.parent.args : (""C:\\Windows\\System32\\SHELL32.dll,RunAsNewUser_RunDLL"",
                             ""C:\\WINDOWS\\*.tmp,zzzzInvokeManagedCustomActionOutOfProc"")
",low,['T1059'],"{'dll', 'shell', 'rundll32'}",254.0,"['rundll32', 'shell', 'malicious', 'command', 'attackers']"
e360,Execution of COM object via Xwizard,"Windows Component Object Model (COM) is an inter-process communication (IPC) component of the native Windows application
programming interface (API) that enables interaction between software objects or executable code. Xwizard can be used to
run a COM object created in registry to evade defensive counter measures.
","process where event.type == ""start"" and
 process.pe.original_file_name : ""xwizard.exe"" and
 (
   (process.args : ""RunWizard"" and process.args : ""{*}"") or
   (process.executable != null and
     not process.executable : (""C:\\Windows\\SysWOW64\\xwizard.exe"", ""C:\\Windows\\System32\\xwizard.exe"")
   )
 )
",medium,['T1559'],"{'registry modification', 'plugx'}",,"['registry', 'xwizard', 'ipc', 'interface', 'executable']"
e363,Enumeration Command Spawned via WMIPrvSE,"Identifies native Windows host and network enumeration commands spawned by the Windows Management Instrumentation
Provider Service (WMIPrvSE).
","process where event.type == ""start"" and
  process.name:
  (
    ""arp.exe"",
    ""dsquery.exe"",
    ""dsget.exe"",
    ""gpresult.exe"",
    ""hostname.exe"",
    ""ipconfig.exe"",
    ""nbtstat.exe"",
    ""net.exe"",
    ""net1.exe"",
    ""netsh.exe"",
    ""netstat.exe"",
    ""nltest.exe"",
    ""ping.exe"",
    ""qprocess.exe"",
    ""quser.exe"",
    ""qwinsta.exe"",
    ""reg.exe"",
    ""sc.exe"",
    ""systeminfo.exe"",
    ""tasklist.exe"",
    ""tracert.exe"",
    ""whoami.exe""
  ) and
  process.parent.name:""wmiprvse.exe""
",low,"['T1087', 'T1518', 'T1018', 'T1047']","{'netstat', 'ipconfig', 'nbtstat', 'netsh', 'nltest', 'net.exe', 'systeminfo', 'tasklist', 'arp', 'ping', 'dsquery'}",,"['wmiprvse', 'host', 'commands', 'instrumentation', 'windows']"
e364,Execution from Unusual Directory - Command Line,"Identifies process execution from suspicious default Windows directories. This may be abused by adversaries to hide
malware in trusted paths.
","process where event.type == ""start"" and
  process.name : (""wscript.exe"",
                  ""cscript.exe"",
                  ""rundll32.exe"",
                  ""regsvr32.exe"",
                  ""cmstp.exe"",
                  ""RegAsm.exe"",
                  ""installutil.exe"",
                  ""mshta.exe"",
                  ""RegSvcs.exe"",
                  ""powershell.exe"",
                  ""pwsh.exe"",
                  ""cmd.exe"") and

  /* add suspicious execution paths here */
  process.args : (""C:\\PerfLogs\\*"",
                  ""C:\\Users\\Public\\*"",
                  ""C:\\Windows\\Tasks\\*"",
                  ""C:\\Intel\\*"",
                  ""C:\\AMD\\Temp\\*"",
                  ""C:\\Windows\\AppReadiness\\*"",
                  ""C:\\Windows\\ServiceState\\*"",
                  ""C:\\Windows\\security\\*"",
                  ""C:\\Windows\\IdentityCRL\\*"",
                  ""C:\\Windows\\Branding\\*"",
                  ""C:\\Windows\\csc\\*"",
                  ""C:\\Windows\\DigitalLocker\\*"",
                  ""C:\\Windows\\en-US\\*"",
                  ""C:\\Windows\\wlansvc\\*"",
                  ""C:\\Windows\\Prefetch\\*"",
                  ""C:\\Windows\\Fonts\\*"",
                  ""C:\\Windows\\diagnostics\\*"",
                  ""C:\\Windows\\TAPI\\*"",
                  ""C:\\Windows\\INF\\*"",
                  ""C:\\Windows\\System32\\Speech\\*"",
                  ""C:\\windows\\tracing\\*"",
                  ""c:\\windows\\IME\\*"",
                  ""c:\\Windows\\Performance\\*"",
                  ""c:\\windows\\intel\\*"",
                  ""c:\\windows\\ms\\*"",
                  ""C:\\Windows\\dot3svc\\*"",
                  ""C:\\Windows\\panther\\*"",
                  ""C:\\Windows\\RemotePackages\\*"",
                  ""C:\\Windows\\OCR\\*"",
                  ""C:\\Windows\\appcompat\\*"",
                  ""C:\\Windows\\apppatch\\*"",
                  ""C:\\Windows\\addins\\*"",
                  ""C:\\Windows\\Setup\\*"",
                  ""C:\\Windows\\Help\\*"",
                  ""C:\\Windows\\SKB\\*"",
                  ""C:\\Windows\\Vss\\*"",
                  ""C:\\Windows\\servicing\\*"",
                  ""C:\\Windows\\CbsTemp\\*"",
                  ""C:\\Windows\\Logs\\*"",
                  ""C:\\Windows\\WaaS\\*"",
                  ""C:\\Windows\\twain_32\\*"",
                  ""C:\\Windows\\ShellExperiences\\*"",
                  ""C:\\Windows\\ShellComponents\\*"",
                  ""C:\\Windows\\PLA\\*"",
                  ""C:\\Windows\\Migration\\*"",
                  ""C:\\Windows\\debug\\*"",
                  ""C:\\Windows\\Cursors\\*"",
                  ""C:\\Windows\\Containers\\*"",
                  ""C:\\Windows\\Boot\\*"",
                  ""C:\\Windows\\bcastdvr\\*"",
                  ""C:\\Windows\\TextInput\\*"",
                  ""C:\\Windows\\security\\*"",
                  ""C:\\Windows\\schemas\\*"",
                  ""C:\\Windows\\SchCache\\*"",
                  ""C:\\Windows\\Resources\\*"",
                  ""C:\\Windows\\rescache\\*"",
                  ""C:\\Windows\\Provisioning\\*"",
                  ""C:\\Windows\\PrintDialog\\*"",
                  ""C:\\Windows\\PolicyDefinitions\\*"",
                  ""C:\\Windows\\media\\*"",
                  ""C:\\Windows\\Globalization\\*"",
                  ""C:\\Windows\\L2Schemas\\*"",
                  ""C:\\Windows\\LiveKernelReports\\*"",
                  ""C:\\Windows\\ModemLogs\\*"",
                  ""C:\\Windows\\ImmersiveControlPanel\\*"",
                  ""C:\\$Recycle.Bin\\*"") and

  /* noisy FP patterns */

  not process.parent.executable : (""C:\\WINDOWS\\System32\\DriverStore\\FileRepository\\*\\igfxCUIService*.exe"",
                                   ""C:\\Windows\\System32\\spacedeskService.exe"",
                                   ""C:\\Program Files\\Dell\\SupportAssistAgent\\SRE\\SRE.exe"") and
  not (process.name : ""rundll32.exe"" and
       process.args : (""uxtheme.dll,#64"",
                       ""PRINTUI.DLL,PrintUIEntry"",
                       ""?:\\Windows\\System32\\FirewallControlPanel.dll,ShowNotificationDialog"",
                       ""?:\\WINDOWS\\system32\\Speech\\SpeechUX\\sapi.cpl"",
                       ""?:\\Windows\\system32\\shell32.dll,OpenAs_RunDLL"")) and

  not (process.name : ""cscript.exe"" and process.args : ""?:\\WINDOWS\\system32\\calluxxprovider.vbs"") and

  not (process.name : ""cmd.exe"" and process.args : ""?:\\WINDOWS\\system32\\powercfg.exe"" and process.args : ""?:\\WINDOWS\\inf\\PowerPlan.log"") and

  not (process.name : ""regsvr32.exe"" and process.args : ""?:\\Windows\\Help\\OEM\\scripts\\checkmui.dll"") and

  not (process.name : ""cmd.exe"" and
       process.parent.executable : (""?:\\Windows\\System32\\oobe\\windeploy.exe"",
                                    ""?:\\Program Files (x86)\\ossec-agent\\wazuh-agent.exe"",
                                    ""?:\\Windows\\System32\\igfxCUIService.exe"",
                                    ""?:\\Windows\\Temp\\IE*.tmp\\IE*-support\\ienrcore.exe""))
",medium,"['T1036', 'T1059']","{'malware', 'stop', 'rundll32'}",54.0,"['malware', 'process', 'suspicious', 'windows', 'directories']"
e365,Network Connection via Compiled HTML File,"Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal
malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable
program (hh.exe).
","sequence by process.entity_id
  [process where process.name : ""hh.exe"" and event.type == ""start""]
  [network where process.name : ""hh.exe"" and
     not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
       ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"",
       ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"",
       ""100.64.0.0/10"", ""192.175.48.0/24"",""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
       ""FE80::/10"", ""FF00::/8"")]
",low,"['T1204', 'T1218']",{'html'},258.0,"['html', 'chm', 'executable', 'compiled', 'file']"
e366,Execution of File Written or Modified by Microsoft Office,"Identifies an executable created by a Microsoft Office application and subsequently executed. These processes are often
launched via scripts inside documents or during exploitation of Microsoft Office applications.
","sequence with maxspan=2h
  [file where event.type != ""deletion"" and file.extension : ""exe"" and
     (process.name : ""WINWORD.EXE"" or
      process.name : ""EXCEL.EXE"" or
      process.name : ""OUTLOOK.EXE"" or
      process.name : ""POWERPNT.EXE"" or
      process.name : ""eqnedt32.exe"" or
      process.name : ""fltldr.exe"" or
      process.name : ""MSPUB.EXE"" or
      process.name : ""MSACCESS.EXE"")
  ] by host.id, file.path
  [process where event.type == ""start""] by host.id, process.executable
",high,['T1566'],{'stop'},259.0,"['executable', 'microsoft', 'application', 'processes', 'applications']"
e367,Execution of File Written or Modified by PDF Reader,"Identifies a suspicious file that was written by a PDF reader application and subsequently executed. These processes are
often launched via exploitation of PDF applications.
","sequence with maxspan=2h
  [file where event.type != ""deletion"" and file.extension : ""exe"" and
     (process.name : ""AcroRd32.exe"" or
      process.name : ""rdrcef.exe"" or
      process.name : ""FoxitPhantomPDF.exe"" or
      process.name : ""FoxitReader.exe"") and
     not (file.name : ""FoxitPhantomPDF.exe"" or
          file.name : ""FoxitPhantomPDFUpdater.exe"" or
          file.name : ""FoxitReader.exe"" or
          file.name : ""FoxitReaderUpdater.exe"" or
          file.name : ""AcroRd32.exe"" or
          file.name : ""rdrcef.exe"")
  ] by host.id, file.path
  [process where event.type == ""start""] by host.id, process.executable
",high,['T1566'],{'stop'},260.0,"['pdf', 'processes', 'file', 'reader', 'suspicious']"
e368,Suspicious Portable Executable Encoded in Powershell Script,"Detects the presence of a portable executable (PE) in a PowerShell script by looking for its encoded header. Attackers
embed PEs into PowerShell scripts to inject them into memory, avoiding defences by not writing to disk.
","event.category:process and
  powershell.file.script_block_text : (
    TVqQAAMAAAAEAAAA
  )
",medium,['T1059'],"{'stop', 'powershell'}",257.0,"['executable', 'powershell', 'scripts', 'attackers', 'portable']"
e369,PowerShell PSReflect Script,"Detects the use of PSReflect in PowerShell scripts. Attackers leverage PSReflect as a library that enables
PowerShell to access win32 API functions.
","event.category:process and
  powershell.file.script_block_text:(
    ""New-InMemoryModule"" or
    ""Add-Win32Type"" or
    psenum or
    DefineDynamicAssembly or
    DefineDynamicModule or
    ""Reflection.TypeAttributes"" or
    ""Reflection.Emit.OpCodes"" or
    ""Reflection.Emit.CustomAttributeBuilder"" or
    ""Runtime.InteropServices.DllImportAttribute""
  )
",medium,"['T1106', 'T1059']","{'leverage', 'stop', 'powershell'}",257.0,"['psreflect', 'powershell', 'scripts', 'win32', 'attackers']"
e370,PsExec Network Connection,"Identifies use of the SysInternals tool PsExec.exe making a network connection. This could be an indication of lateral
movement.
","sequence by process.entity_id
  [process where process.name : ""PsExec.exe"" and event.type == ""start"" and

   /* This flag suppresses the display of the license dialog and may
      indicate that psexec executed for the first time in the machine */
   process.args : ""-accepteula"" and

   not process.executable : (""?:\\ProgramData\\Docusnap\\Discovery\\discovery\\plugins\\17\\Bin\\psexec.exe"",
                             ""?:\\Docusnap 11\\Bin\\psexec.exe"",
                             ""?:\\Program Files\\Docusnap X\\Bin\\psexec.exe"",
                             ""?:\\Program Files\\Docusnap X\\Tools\\dsDNS.exe"") and
   not process.parent.executable : ""?:\\Program Files (x86)\\Cynet\\Cynet Scanner\\CynetScanner.exe""]
  [network where process.name : ""PsExec.exe""]
",low,['T1569'],"{'exe', 'network', 'psexec'}",,"['psexec', 'sysinternals', 'exe', 'connection', 'network']"
e371,Network Connection via Registration Utility,"Identifies the native Windows tools regsvr32.exe, regsvr64.exe, RegSvcs.exe, or RegAsm.exe making a network connection.
This may be indicative of an attacker bypassing allowlists or running arbitrary scripts via a signed Microsoft binary.
","sequence by process.entity_id
  [process where event.type == ""start"" and
   process.name : (""regsvr32.exe"", ""RegAsm.exe"", ""RegSvcs.exe"") and
   not (
         (?process.Ext.token.integrity_level_name : ""System"" or ?winlog.event_data.IntegrityLevel : ""System"") and
         (process.parent.name : ""msiexec.exe"" or process.parent.executable : (""C:\\Program Files (x86)\\*.exe"", ""C:\\Program Files\\*.exe""))
       )
   ]
  [network where process.name : (""regsvr32.exe"", ""RegAsm.exe"", ""RegSvcs.exe"")  and
   not cidrmatch(destination.ip, ""10.0.0.0/8"", ""127.0.0.0/8"", ""169.254.0.0/16"", ""172.16.0.0/12"", ""192.0.0.0/24"",
       ""192.0.0.0/29"", ""192.0.0.8/32"", ""192.0.0.9/32"", ""192.0.0.10/32"", ""192.0.0.170/32"", ""192.0.0.171/32"",
       ""192.0.2.0/24"", ""192.31.196.0/24"", ""192.52.193.0/24"", ""192.168.0.0/16"", ""192.88.99.0/24"", ""224.0.0.0/4"",
       ""100.64.0.0/10"", ""192.175.48.0/24"",""198.18.0.0/15"", ""198.51.100.0/24"", ""203.0.113.0/24"", ""240.0.0.0/4"", ""::1"",
       ""FE80::/10"", ""FF00::/8"") and network.protocol != ""dns""]
",low,['T1218'],"{'regasm', 'exe', 'winlog'}",,"['regsvr32', 'regsvr64', 'regsvcs', 'exe', 'microsoft']"
e372,Outbound Scheduled Task Activity via PowerShell,"Identifies the PowerShell process loading the Task Scheduler COM DLL followed by an outbound RPC network connection
within a short time period. This may indicate lateral movement or remote discovery via scheduled tasks.
","sequence by host.id, process.entity_id with maxspan = 5s
 [any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
  (dll.name : ""taskschd.dll"" or file.name : ""taskschd.dll"") and process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"")]
 [network where process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and destination.port == 135 and not destination.address in (""127.0.0.1"", ""::1"")]
",medium,['T1053'],"{'dll', 'dark', 'powershell'}",5.0,"['powershell', 'dll', 'scheduler', 'task', 'rpc']"
e373,Execution via local SxS Shared Module,"Identifies the creation, change, or deletion of a DLL module within a Windows SxS local folder. Adversaries may abuse
shared modules to execute malicious payloads by instructing the Windows module loader to load DLLs from arbitrary local
paths.
","file where file.extension : ""dll"" and file.path : ""C:\\*\\*.exe.local\\*.dll""
",medium,['T1129'],{'dll'},57.0,"['dlls', 'dll', 'sxs', 'modules', 'module']"
e374,Suspicious Cmd Execution via WMI,"Identifies suspicious command execution (cmd) via Windows Management Instrumentation (WMI) on a remote host. This could
be indicative of adversary lateral movement.
","process where event.type == ""start"" and
 process.parent.name : ""WmiPrvSE.exe"" and process.name : ""cmd.exe"" and
 process.args : ""\\\\127.0.0.1\\*"" and process.args : (""2>&1"", ""1>"")
",medium,['T1047'],{'wmi'},186.0,"['cmd', 'suspicious', 'wmi', 'execution', 'remote']"
e375,Suspicious WMI Image Load from MS Office,"Identifies a suspicious image load (wmiutils.dll) from Microsoft Office processes. This behavior may indicate
adversarial activity where child processes are spawned via Windows Management Instrumentation (WMI). This technique can
be used to execute code and evade traditional parent/child processes spawned from Microsoft Office products.
","any where
 (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
  process.name : (""WINWORD.EXE"", ""EXCEL.EXE"", ""POWERPNT.EXE"", ""MSPUB.EXE"", ""MSACCESS.EXE"") and
  (dll.name : ""wmiutils.dll"" or file.name : ""wmiutils.dll"")
",low,['T1047'],"{'dll', 'wmi'}",261.0,"['wmi', 'wmiutils', 'microsoft', 'processes', 'dll']"
e376,Suspicious PDF Reader Child Process,"Identifies suspicious child processes of PDF reader applications. These child processes are often launched via
exploitation of PDF applications or social engineering.
","process where event.type == ""start"" and
  process.parent.name : (""AcroRd32.exe"",
                         ""Acrobat.exe"",
                         ""FoxitPhantomPDF.exe"",
                         ""FoxitReader.exe"") and
  process.name : (""arp.exe"", ""dsquery.exe"", ""dsget.exe"", ""gpresult.exe"", ""hostname.exe"", ""ipconfig.exe"", ""nbtstat.exe"",
                  ""net.exe"", ""net1.exe"", ""netsh.exe"", ""netstat.exe"", ""nltest.exe"", ""ping.exe"", ""qprocess.exe"",
                  ""quser.exe"", ""qwinsta.exe"", ""reg.exe"", ""sc.exe"", ""systeminfo.exe"", ""tasklist.exe"", ""tracert.exe"",
                  ""whoami.exe"", ""bginfo.exe"", ""cdb.exe"", ""cmstp.exe"", ""csi.exe"", ""dnx.exe"", ""fsi.exe"", ""ieexec.exe"",
                  ""iexpress.exe"", ""installutil.exe"", ""Microsoft.Workflow.Compiler.exe"", ""msbuild.exe"", ""mshta.exe"",
                  ""msxsl.exe"", ""odbcconf.exe"", ""rcsi.exe"", ""regsvr32.exe"", ""xwizard.exe"", ""atbroker.exe"",
                  ""forfiles.exe"", ""schtasks.exe"", ""regasm.exe"", ""regsvcs.exe"", ""cmd.exe"", ""cscript.exe"",
                  ""powershell.exe"", ""pwsh.exe"", ""wmic.exe"", ""wscript.exe"", ""bitsadmin.exe"", ""certutil.exe"", ""ftp.exe"")
",low,['T1204'],"{'netstat', 'ipconfig', 'nbtstat', 'netsh', 'nltest', 'net.exe', 'systeminfo', 'schtasks', 'forfiles', 'bitsadmin', 'tasklist', 'arp', 'certutil', 'stop', 'ping', 'dsquery', 'msbuild', 'ftp'}",,"['processes', 'pdf', 'reader', 'exploitation', 'applications']"
e377,Suspicious PowerShell Engine ImageLoad,"Identifies the PowerShell engine being invoked by unexpected processes. Rather than executing PowerShell functionality
with powershell.exe, some attackers do this to operate more stealthily.
","any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
 (dll.name : (""System.Management.Automation.ni.dll"", ""System.Management.Automation.dll"") or
  file.name : (""System.Management.Automation.ni.dll"", ""System.Management.Automation.dll"")) and

/* add false positives relevant to your environment here */
not process.executable : (""C:\\Windows\\System32\\RemoteFXvGPUDisablement.exe"", ""C:\\Windows\\System32\\sdiagnhost.exe"") and
not process.executable regex~ """"""C:\\Program Files( \(x86\))?\\*\.exe"""""" and
  not process.name :
  (
    ""Altaro.SubAgent.exe"",
    ""AppV_Manage.exe"",
    ""azureadconnect.exe"",
    ""CcmExec.exe"",
    ""configsyncrun.exe"",
    ""choco.exe"",
    ""ctxappvservice.exe"",
    ""DVLS.Console.exe"",
    ""edgetransport.exe"",
    ""exsetup.exe"",
    ""forefrontactivedirectoryconnector.exe"",
    ""InstallUtil.exe"",
    ""JenkinsOnDesktop.exe"",
    ""Microsoft.EnterpriseManagement.ServiceManager.UI.Console.exe"",
    ""mmc.exe"",
    ""mscorsvw.exe"",
    ""msexchangedelivery.exe"",
    ""msexchangefrontendtransport.exe"",
    ""msexchangehmworker.exe"",
    ""msexchangesubmission.exe"",
    ""msiexec.exe"",
    ""MsiExec.exe"",
    ""noderunner.exe"",
    ""NServiceBus.Host.exe"",
    ""NServiceBus.Host32.exe"",
    ""NServiceBus.Hosting.Azure.HostProcess.exe"",
    ""OuiGui.WPF.exe"",
    ""powershell.exe"",
    ""powershell_ise.exe"",
    ""pwsh.exe"",
    ""SCCMCliCtrWPF.exe"",
    ""ScriptEditor.exe"",
    ""ScriptRunner.exe"",
    ""sdiagnhost.exe"",
    ""servermanager.exe"",
    ""setup100.exe"",
    ""ServiceHub.VSDetouredHost.exe"",
    ""SPCAF.Client.exe"",
    ""SPCAF.SettingsEditor.exe"",
    ""SQLPS.exe"",
    ""telemetryservice.exe"",
    ""UMWorkerProcess.exe"",
    ""w3wp.exe"",
    ""wsmprovhost.exe""
  )
",medium,['T1059'],"{'stop', 'exe', 'powershell'}",5.0,"['powershell', 'exe', 'processes', 'executing', 'invoked']"
e378,Suspicious Process Execution via Renamed PsExec Executable,"Identifies suspicious psexec activity which is executing from the psexec service that has been renamed, possibly to
evade detection.
","process where event.type == ""start"" and
  process.pe.original_file_name : ""psexesvc.exe"" and not process.name : ""PSEXESVC.exe""
",medium,['T1569'],{'psexec'},,"['psexec', 'suspicious', 'executing', 'detection', 'service']"
e379,Process Activity via Compiled HTML File,"Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. Adversaries may conceal
malicious code in a CHM file and deliver it to a victim for execution. CHM content is loaded by the HTML Help executable
program (hh.exe).
","process where event.type == ""start"" and
 process.parent.name : ""hh.exe"" and
 process.name : (""mshta.exe"", ""cmd.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"", ""cscript.exe"", ""wscript.exe"")
",medium,"['T1204', 'T1218']",{'html'},258.0,"['html', 'chm', 'executable', 'compiled', 'file']"
e380,Conhost Spawned By Suspicious Parent Process,"Detects when the Console Window Host (conhost.exe) process is spawned by a suspicious parent process, which could be
indicative of code injection.
","process where event.type == ""start"" and
  process.name : ""conhost.exe"" and
  process.parent.name : (""lsass.exe"", ""services.exe"", ""smss.exe"", ""winlogon.exe"", ""explorer.exe"", ""dllhost.exe"", ""rundll32.exe"",
                         ""regsvr32.exe"", ""userinit.exe"", ""wininit.exe"", ""spoolsv.exe"", ""ctfmon.exe"") and
  not (process.parent.name : ""rundll32.exe"" and
       process.parent.args : (""?:\\Windows\\Installer\\MSI*.tmp,zzzzInvokeManagedCustomActionOutOfProc"",
                              ""?:\\WINDOWS\\system32\\PcaSvc.dll,PcaPatchSdbTask"",
                              ""?:\\WINDOWS\\system32\\davclnt.dll,DavSetCookie""))
",high,['T1059'],"{'exe', 'stop', 'rundll32'}",248.0,"['console', 'conhost', 'exe', 'spawned', 'host']"
e381,Execution via MSSQL xp_cmdshell Stored Procedure,"Identifies execution via MSSQL xp_cmdshell stored procedure. Malicious users may attempt to elevate their privileges by
using xp_cmdshell, which is disabled by default, thus, it's important to review the context of it's use.
","process where event.type == ""start"" and
  process.name : ""cmd.exe"" and process.parent.name : ""sqlservr.exe"" and
  not process.args : (""\\\\*"", ""diskfree"", ""rmdir"", ""mkdir"", ""dir"", ""del"", ""rename"", ""bcp"", ""*XMLNAMESPACES*"",
                      ""?:\\MSSQL\\Backup\\Jobs\\sql_agent_backup_job.ps1"", ""K:\\MSSQL\\Backup\\msdb"", ""K:\\MSSQL\\Backup\\Logins"")
",high,['T1059'],"{'ps1', 'privilege'}",76.0,"['xp_cmdshell', 'mssql', 'malicious', 'execution', 'privileges']"
e382,Third-party Backup Files Deleted via Unexpected Process,"Identifies the deletion of backup files, saved using third-party software, by a process outside of the backup suite.
Adversaries may delete Backup files to ensure that recovery from a ransomware attack is less likely.
","file where event.type == ""deletion"" and
  (
  /* Veeam Related Backup Files */
  (file.extension : (""VBK"", ""VIB"", ""VBM"") and
  not process.executable : (""?:\\Windows\\Veeam\\Backup\\*"",
                            ""?:\\Program Files\\Veeam\\Backup and Replication\\*"",
                            ""?:\\Program Files (x86)\\Veeam\\Backup and Replication\\*"")) or

  /* Veritas Backup Exec Related Backup File */
  (file.extension : ""BKF"" and
  not process.executable : (""?:\\Program Files\\Veritas\\Backup Exec\\*"",
                            ""?:\\Program Files (x86)\\Veritas\\Backup Exec\\*""))
  )
",medium,['T1490'],"{'conti', 'backup'}",90.0,"['ransomware', 'backup', 'files', 'deletion', 'software']"
e383,Deleting Backup Catalogs with Wbadmin,"Identifies use of the wbadmin.exe to delete the backup catalog. Ransomware and other malware may do this to prevent
system recovery.
","process where event.type == ""start"" and
  (process.name : ""wbadmin.exe"" or process.pe.original_file_name == ""WBADMIN.EXE"") and
  process.args : ""catalog"" and process.args : ""delete""
",low,['T1490'],"{'malware', 'backup'}",90.0,"['ransomware', 'wbadmin', 'malware', 'backup', 'delete']"
e384,Modification of Boot Configuration,"Identifies use of bcdedit.exe to delete boot configuration data. This tactic is sometimes used as by malware or an
attacker as a destructive technique.
","process where event.type == ""start"" and
  (process.name : ""bcdedit.exe"" or process.pe.original_file_name == ""bcdedit.exe"") and
    (
      (process.args : ""/set"" and process.args : ""bootstatuspolicy"" and process.args : ""ignoreallfailures"") or
      (process.args : ""no"" and process.args : ""recoveryenabled"")
    )
",low,['T1490'],"{'malware', 'exe'}",137.0,"['bcdedit', 'malware', 'boot', 'exe', 'delete']"
e385,High Number of Process and/or Service Terminations,"This rule identifies a high number (10) of process terminations (stop, delete, or suspend) from the same host within a
short time period.
","event.category:process and event.type:start and process.name:(net.exe or sc.exe or taskkill.exe) and
 process.args:(stop or pause or delete or ""/PID"" or ""/IM"" or ""/T"" or ""/F"" or ""/t"" or ""/f"" or ""/im"" or ""/pid"")
",medium,['T1489'],"{'net.exe', 'stop'}",201.0,"['terminations', 'rule', 'process', 'suspend', 'delete']"
e386,Volume Shadow Copy Deleted or Resized via VssAdmin,"Identifies use of vssadmin.exe for shadow copy deletion or resizing on endpoints. This commonly occurs in tandem with
ransomware or other destructive attacks.
","process where event.type == ""start""
  and (process.name : ""vssadmin.exe"" or process.pe.original_file_name == ""VSSADMIN.EXE"") and
  process.args in (""delete"", ""resize"") and process.args : ""shadows*""
",high,['T1490'],"{'exe', 'stop'}",6.0,"['vssadmin', 'shadow', 'ransomware', 'exe', 'deletion']"
e387,Volume Shadow Copy Deletion via PowerShell,"Identifies the use of the Win32_ShadowCopy class and related cmdlets to achieve shadow copy deletion. This commonly
occurs in tandem with ransomware or other destructive attacks.
","process where event.type == ""start"" and
  process.name : (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and
  process.args : (""*Get-WmiObject*"", ""*gwmi*"", ""*Get-CimInstance*"", ""*gcim*"") and
  process.args : (""*Win32_ShadowCopy*"") and
  process.args : (""*.Delete()*"", ""*Remove-WmiObject*"", ""*rwmi*"", ""*Remove-CimInstance*"", ""*rcim*"")
",high,['T1490'],"{'stop', 'powershell'}",262.0,"['win32_shadowcopy', 'ransomware', 'shadow', 'copy', 'deletion']"
e388,Volume Shadow Copy Deletion via WMIC,"Identifies use of wmic.exe for shadow copy deletion on endpoints. This commonly occurs in tandem with ransomware or
other destructive attacks.
","process where event.type == ""start"" and
  (process.name : ""WMIC.exe"" or process.pe.original_file_name == ""wmic.exe"") and
  process.args : ""delete"" and process.args : ""shadowcopy""
",high,['T1490'],"{'exe', 'stop', 'wmi'}",6.0,"['wmic', 'ransomware', 'exe', 'deletion', 'shadow']"
e389,Suspicious HTML File Creation,"Identifies the execution of a browser process to open an HTML file with high entropy and size. Adversaries may smuggle
data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files.
","sequence by user.id with maxspan=5m
 [file where event.action in (""creation"", ""rename"") and
  file.extension : (""htm"", ""html"") and
   file.path : (""?:\\Users\\*\\Downloads\\*"",
                ""?:\\Users\\*\\Content.Outlook\\*"",
                ""?:\\Users\\*\\AppData\\Local\\Temp\\Temp?_*"",
                ""?:\\Users\\*\\AppData\\Local\\Temp\\7z*"",
                ""?:\\Users\\*\\AppData\\Local\\Temp\\Rar$*"") and
   ((file.Ext.entropy >= 5 and file.size >= 150000) or file.size >= 1000000)]
 [process where event.action == ""start"" and
  (
   (process.name in (""chrome.exe"", ""msedge.exe"", ""brave.exe"", ""whale.exe"", ""browser.exe"", ""dragon.exe"", ""vivaldi.exe"", ""opera.exe"")
    and process.args == ""--single-argument"") or
   (process.name == ""iexplore.exe"" and process.args_count == 2) or
   (process.name in (""firefox.exe"", ""waterfox.exe"") and process.args == ""-url"")
  )
  and process.args : (""?:\\Users\\*\\Downloads\\*.htm*"",
                      ""?:\\Users\\*\\Content.Outlook\\*.htm*"",
                      ""?:\\Users\\*\\AppData\\Local\\Temp\\Temp?_*.htm*"",
                      ""?:\\Users\\*\\AppData\\Local\\Temp\\7z*.htm*"",
                      ""?:\\Users\\*\\AppData\\Local\\Temp\\Rar$*.htm*"")]
",medium,"['T1027', 'T1566']","{'entropy', 'html', 'browser'}",258.0,"['html', 'malicious', 'browser', 'files', 'file']"
e390,Windows Script Interpreter Executing Process via WMI,"Identifies use of the built-in Windows script interpreters (cscript.exe or wscript.exe) being used to execute a process
via Windows Management Instrumentation (WMI). This may be indicative of malicious activity.
","sequence by host.id with maxspan = 5s
    [any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
     (dll.name : ""wmiutils.dll"" or file.name : ""wmiutils.dll"") and process.name : (""wscript.exe"", ""cscript.exe"")]
    [process where event.type == ""start"" and
     process.parent.name : ""wmiprvse.exe"" and
     user.domain != ""NT AUTHORITY"" and
     (process.pe.original_file_name :
        (
          ""cscript.exe"",
          ""wscript.exe"",
          ""PowerShell.EXE"",
          ""Cmd.Exe"",
          ""MSHTA.EXE"",
          ""RUNDLL32.EXE"",
          ""REGSVR32.EXE"",
          ""MSBuild.exe"",
          ""InstallUtil.exe"",
          ""RegAsm.exe"",
          ""RegSvcs.exe"",
          ""msxsl.exe"",
          ""CONTROL.EXE"",
          ""EXPLORER.EXE"",
          ""Microsoft.Workflow.Compiler.exe"",
          ""msiexec.exe""
        ) or
      process.executable : (""C:\\Users\\*.exe"", ""C:\\ProgramData\\*.exe"")
     )
    ]
",medium,['T1566'],"{'msbuild', 'rundll32', 'wmi'}",34.0,"['wscript', 'malicious', 'cscript', 'wmi', 'script']"
e391,Windows Script Executing PowerShell,"Identifies a PowerShell process launched by either cscript.exe or wscript.exe. Observing Windows scripting processes
executing a PowerShell script, may be indicative of malicious activity.
","process where event.type == ""start"" and
  process.parent.name : (""cscript.exe"", ""wscript.exe"") and process.name : ""powershell.exe""
",low,['T1566'],"{'stop', 'powershell'}",34.0,"['powershell', 'wscript', 'cscript', 'malicious', 'script']"
e392,Microsoft Exchange Server UM Writing Suspicious Files,"Identifies suspicious files being written by the Microsoft Exchange Server Unified Messaging (UM) service. This activity
has been observed exploiting CVE-2021-26858.
","file where event.type == ""creation"" and
  process.name : (""UMWorkerProcess.exe"", ""umservice.exe"") and
  file.extension : (""php"", ""jsp"", ""js"", ""aspx"", ""asmx"", ""asax"", ""cfm"", ""shtml"") and
  (
    file.path : ""?:\\inetpub\\wwwroot\\aspnet_client\\*"" or

    (file.path : ""?:\\*\\Microsoft\\Exchange Server*\\FrontEnd\\HttpProxy\\owa\\auth\\*"" and
       not (file.path : ""?:\\*\\Microsoft\\Exchange Server*\\FrontEnd\\HttpProxy\\owa\\auth\\version\\*"" or
            file.name : (""errorFE.aspx"", ""expiredpassword.aspx"", ""frowny.aspx"", ""GetIdToken.htm"", ""logoff.aspx"",
                        ""logon.aspx"", ""OutlookCN.aspx"", ""RedirSuiteServiceProxy.aspx"", ""signout.aspx""))) or

    (file.path : ""?:\\*\\Microsoft\\Exchange Server*\\FrontEnd\\HttpProxy\\ecp\\auth\\*"" and
       not file.name : ""TimeoutLogoff.aspx"")
  )
",medium,['T1190'],"{'hafnium', 'cve-2021-26858'}",,"['cve', 'microsoft', 'messaging', 'suspicious', 'exchange']"
e393,Microsoft Exchange Server UM Spawning Suspicious Processes,"Identifies suspicious processes being spawned by the Microsoft Exchange Server Unified Messaging (UM) service. This
activity has been observed exploiting CVE-2021-26857.
","process where event.type == ""start"" and
  process.parent.name : (""UMService.exe"", ""UMWorkerProcess.exe"") and
    not process.executable :
              (""?:\\Windows\\System32\\werfault.exe"",
               ""?:\\Windows\\System32\\wermgr.exe"",
               ""?:\\Program Files\\Microsoft\\Exchange Server\\V??\\Bin\\UMWorkerProcess.exe"",
               ""D:\\Exchange 2016\\Bin\\UMWorkerProcess.exe"",
               ""E:\\ExchangeServer\\Bin\\UMWorkerProcess.exe"")
",medium,['T1190'],"{'hafnium', 'cve-2021-26857'}",,"['messaging', 'cve', 'suspicious', 'microsoft', 'exchange']"
e394,Microsoft Exchange Worker Spawning Suspicious Processes,"Identifies suspicious processes being spawned by the Microsoft Exchange Server worker process (w3wp). This activity may
indicate exploitation activity or access to an existing web shell backdoor.
","process where event.type == ""start"" and
  process.parent.name : ""w3wp.exe"" and process.parent.args : ""MSExchange*AppPool"" and
  (process.name : (""cmd.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") or
  process.pe.original_file_name in (""cmd.exe"", ""powershell.exe"", ""pwsh.dll"", ""powershell_ise.exe""))
",high,['T1190'],{'hafnium'},139.0,"['w3wp', 'processes', 'suspicious', 'exchange', 'process']"
e395,Suspicious MS Office Child Process,"Identifies suspicious child processes of frequently targeted Microsoft Office applications (Word, PowerPoint, Excel).
These child processes are often launched during exploitation of Office applications or from documents with malicious
macros.
","process where event.type == ""start"" and
  process.parent.name : (""eqnedt32.exe"", ""excel.exe"", ""fltldr.exe"", ""msaccess.exe"", ""mspub.exe"", ""powerpnt.exe"", ""winword.exe"", ""outlook.exe"") and
  process.name : (""Microsoft.Workflow.Compiler.exe"", ""arp.exe"", ""atbroker.exe"", ""bginfo.exe"", ""bitsadmin.exe"", ""cdb.exe"", ""certutil.exe"",
                ""cmd.exe"", ""cmstp.exe"", ""control.exe"", ""cscript.exe"", ""csi.exe"", ""dnx.exe"", ""dsget.exe"", ""dsquery.exe"", ""forfiles.exe"",
                ""fsi.exe"", ""ftp.exe"", ""gpresult.exe"", ""hostname.exe"", ""ieexec.exe"", ""iexpress.exe"", ""installutil.exe"", ""ipconfig.exe"",
                ""mshta.exe"", ""msxsl.exe"", ""nbtstat.exe"", ""net.exe"", ""net1.exe"", ""netsh.exe"", ""netstat.exe"", ""nltest.exe"", ""odbcconf.exe"",
                ""ping.exe"", ""powershell.exe"", ""pwsh.exe"", ""qprocess.exe"", ""quser.exe"", ""qwinsta.exe"", ""rcsi.exe"", ""reg.exe"", ""regasm.exe"",
                ""regsvcs.exe"", ""regsvr32.exe"", ""sc.exe"", ""schtasks.exe"", ""systeminfo.exe"", ""tasklist.exe"", ""tracert.exe"", ""whoami.exe"",
                ""wmic.exe"", ""wscript.exe"", ""xwizard.exe"", ""explorer.exe"", ""rundll32.exe"", ""hh.exe"", ""msdt.exe"")
",medium,['T1566'],"{'netstat', 'net.exe', 'forfiles', 'tasklist', 'arp', 'ipconfig', 'nbtstat', 'nltest', 'dsquery', 'netsh', 'systeminfo', 'microsoft office', 'certutil', 'stop', 'ping', 'ftp', 'schtasks', 'bitsadmin', 'rundll32'}",,"['microsoft', 'processes', 'malicious', 'applications', 'office']"
e396,Suspicious MS Outlook Child Process,"Identifies suspicious child processes of Microsoft Outlook. These child processes are often associated with spear
phishing activity.
","process where event.type == ""start"" and
  process.parent.name : ""outlook.exe"" and
  process.name : (""Microsoft.Workflow.Compiler.exe"", ""arp.exe"", ""atbroker.exe"", ""bginfo.exe"", ""bitsadmin.exe"",
                  ""cdb.exe"", ""certutil.exe"", ""cmd.exe"", ""cmstp.exe"", ""cscript.exe"", ""csi.exe"", ""dnx.exe"", ""dsget.exe"",
                  ""dsquery.exe"", ""forfiles.exe"", ""fsi.exe"", ""ftp.exe"", ""gpresult.exe"", ""hostname.exe"", ""ieexec.exe"",
                  ""iexpress.exe"", ""installutil.exe"", ""ipconfig.exe"", ""mshta.exe"", ""msxsl.exe"", ""nbtstat.exe"", ""net.exe"",
                  ""net1.exe"", ""netsh.exe"", ""netstat.exe"", ""nltest.exe"", ""odbcconf.exe"", ""ping.exe"", ""powershell.exe"",
                  ""pwsh.exe"", ""qprocess.exe"", ""quser.exe"", ""qwinsta.exe"", ""rcsi.exe"", ""reg.exe"", ""regasm.exe"",
                  ""regsvcs.exe"", ""regsvr32.exe"", ""sc.exe"", ""schtasks.exe"", ""systeminfo.exe"", ""tasklist.exe"",
                  ""tracert.exe"", ""whoami.exe"", ""wmic.exe"", ""wscript.exe"", ""xwizard.exe"")
",low,['T1566'],"{'netstat', 'ipconfig', 'nbtstat', 'netsh', 'nltest', 'net.exe', 'systeminfo', 'schtasks', 'forfiles', 'calendar', 'bitsadmin', 'tasklist', 'arp', 'certutil', 'stop', 'ping', 'dsquery', 'ftp'}",,"['outlook', 'phishing', 'microsoft', 'suspicious', 'spear']"
e397,Unusual Child Process of dns.exe,"Identifies an unexpected process spawning from dns.exe, the process responsible for Windows DNS server services, which
may indicate activity related to remote code execution or other forms of exploitation.
","process where event.type == ""start"" and process.parent.name : ""dns.exe"" and
  not process.name : ""conhost.exe""
",high,['T1133'],"{'netstat', 'systeminfo', 'exe', 'cve-2020-1350', 'tasklist', 'dns', 'rundll32'}",,"['dns', 'process', 'exe', 'server', 'execution']"
e398,Unusual File Modification by dns.exe,"Identifies an unexpected file being modified by dns.exe, the process responsible for Windows DNS Server services, which
may indicate activity related to remote code execution or other forms of exploitation.
","file where process.name : ""dns.exe"" and event.type in (""creation"", ""deletion"", ""change"") and
  not file.name : ""dns.log""
",high,['T1133'],"{'exe', 'cve-2020-1350', 'dns'}",,"['dns', 'exe', 'file', 'process', 'server']"
e399,Suspicious Explorer Child Process,"Identifies a suspicious Windows explorer child process. Explorer.exe can be abused to launch malicious scripts or
executables from a trusted parent process.
","process where event.type == ""start"" and
  (
   process.name : (""cscript.exe"", ""wscript.exe"", ""powershell.exe"", ""rundll32.exe"", ""cmd.exe"", ""mshta.exe"", ""regsvr32.exe"") or
   process.pe.original_file_name in (""cscript.exe"", ""wscript.exe"", ""PowerShell.EXE"", ""RUNDLL32.EXE"", ""Cmd.Exe"", ""MSHTA.EXE"", ""REGSVR32.EXE"")
  ) and
  /* Explorer started via DCOM */
  process.parent.name : ""explorer.exe"" and process.parent.args : ""-Embedding"" and
  not process.parent.args:
          (
            /* Noisy CLSID_SeparateSingleProcessExplorerHost Explorer COM Class IDs   */
            ""/factory,{5BD95610-9434-43C2-886C-57852CC8A120}"",
            ""/factory,{ceff45ee-c862-41de-aee2-a022c81eda92}""
          )
",medium,['T1566'],"{'exe', 'rundll32'}",178.0,"['explorer', 'executables', 'malicious', 'exe', 'suspicious']"
e400,Service Command Lateral Movement,"Identifies use of sc.exe to create, modify, or start services on remote hosts. This could be indicative of adversary
lateral movement but will be noisy if commonly done by admins.
","sequence by process.entity_id with maxspan = 1m
  [process where event.type == ""start"" and
     (process.name : ""sc.exe"" or process.pe.original_file_name : ""sc.exe"") and
      process.args : ""\\\\*"" and process.args : (""binPath=*"", ""binpath=*"") and
      process.args : (""create"", ""config"", ""failure"", ""start"")]
  [network where process.name : ""sc.exe"" and destination.ip != ""127.0.0.1""]
",low,"['T1569', 'T1543', 'T1021']",{'exe'},248.0,"['exe', 'sc', 'services', 'hosts', 'admins']"
e401,Incoming DCOM Lateral Movement via MSHTA,"Identifies the use of Distributed Component Object Model (DCOM) to execute commands from a remote host, which are
launched via the HTA Application COM Object. This behavior may indicate an attacker abusing a DCOM application to move
laterally while attempting to evade detection.
","sequence with maxspan=1m
  [process where event.type == ""start"" and
     process.name : ""mshta.exe"" and process.args : ""-Embedding""
  ] by host.id, process.entity_id
  [network where event.type == ""start"" and process.name : ""mshta.exe"" and
     network.direction : (""incoming"", ""ingress"") and network.transport == ""tcp"" and
     source.port > 49151 and destination.port > 49151 and source.ip != ""127.0.0.1"" and source.ip != ""::1""
  ] by host.id, process.entity_id
",high,"['T1218', 'T1021']",,39.0,"['dcom', 'application', 'detection', 'attacker', 'component']"
e402,Incoming DCOM Lateral Movement with MMC,"Identifies the use of Distributed Component Object Model (DCOM) to run commands from a remote host, which are launched
via the MMC20 Application COM Object. This behavior may indicate an attacker abusing a DCOM application to move
laterally.
","sequence by host.id with maxspan=1m
 [network where event.type == ""start"" and process.name : ""mmc.exe"" and source.port >= 49152 and
 destination.port >= 49152 and source.ip != ""127.0.0.1"" and source.ip != ""::1"" and
  network.direction : (""incoming"", ""ingress"") and network.transport == ""tcp""
 ] by process.entity_id
 [process where event.type == ""start"" and process.parent.name : ""mmc.exe""
 ] by process.parent.entity_id
",high,['T1021'],,39.0,"['dcom', 'mmc20', 'attacker', 'abusing', 'component']"
e403,Incoming DCOM Lateral Movement with ShellBrowserWindow or ShellWindows,"Identifies use of Distributed Component Object Model (DCOM) to run commands from a remote host, which are launched via
the ShellBrowserWindow or ShellWindows Application COM Object. This behavior may indicate an attacker abusing a DCOM
application to stealthily move laterally.
","sequence by host.id with maxspan=5s
 [network where event.type == ""start"" and process.name : ""explorer.exe"" and
  network.direction : (""incoming"", ""ingress"") and network.transport == ""tcp"" and
  source.port > 49151 and destination.port > 49151 and source.ip != ""127.0.0.1"" and source.ip != ""::1""
 ] by process.entity_id
 [process where event.type == ""start"" and
  process.parent.name : ""explorer.exe""
 ] by process.parent.entity_id
",medium,['T1021'],"{'shell', 'browser'}",39.0,"['dcom', 'shellbrowserwindow', 'shellwindows', 'attacker', 'application']"
e404,NullSessionPipe Registry Modification,"Identifies NullSessionPipe registry modifications that specify which pipes can be accessed anonymously. This could
be indicative of adversary lateral movement preparation by making the added pipe available to everyone.
","registry where
registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\services\\LanmanServer\\Parameters\\NullSessionPipes"" and
registry.data.strings != null
",medium,['T1021'],"{'registry modification', 'turla'}",263.0,"['nullsessionpipe', 'pipes', 'pipe', 'anonymously', 'adversary']"
e405,Direct Outbound SMB Connection,"Identifies unexpected processes making network connections over port 445. Windows File Sharing is typically implemented
over Server Message Block (SMB), which communicates between hosts using port 445. When legitimate, these network
connections are established by the kernel. Processes making 445/tcp connections may be port scanners, exploits, or
suspicious user-level processes moving laterally.
","sequence by process.entity_id
  [process where event.type == ""start"" and host.os.name == ""Windows"" and process.pid != 4 and
   not (process.executable : ""D:\\EnterpriseCare\\tools\\jre.1\\bin\\java.exe"" and process.args : ""com.emeraldcube.prism.launcher.Invoker"") and
   not (process.executable : ""C:\\Docusnap 11\\Tools\\nmap\\nmap.exe"" and process.args : ""smb-os-discovery.nse"") and
   not process.executable :
              (""?:\\Program Files\\SentinelOne\\Sentinel Agent *\\Ranger\\SentinelRanger.exe"",
               ""?:\\Program Files\\Ivanti\\Security Controls\\ST.EngineHost.exe"",
               ""?:\\Program Files (x86)\\Fortinet\\FSAE\\collectoragent.exe"",
               ""?:\\Program Files (x86)\\Nmap\\nmap.exe"",
               ""?:\\Program Files\\Azure Advanced Threat Protection Sensor\\*\\Microsoft.Tri.Sensor.exe"",
               ""?:\\Program Files\\CloudMatters\\auvik\\AuvikService-release-*\\AuvikService.exe"",
               ""?:\\Program Files\\uptime software\\uptime\\UptimeDataCollector.exe"",
               ""?:\\Program Files\\CloudMatters\\auvik\\AuvikAgentService.exe"",
               ""?:\\Program Files\\Rumble\\rumble-agent-*.exe"")]
  [network where destination.port == 445 and process.pid != 4 and
     not cidrmatch(destination.ip, ""127.0.0.1"", ""::1"")]
",medium,['T1021'],"{'stop', 'prism', 'network'}",235.0,"['tcp', 'smb', 'port', '445', 'network']"
e406,Abnormally Large DNS Response,"Specially crafted DNS requests can manipulate a known overflow vulnerability in some Windows DNS servers, resulting in
Remote Code Execution (RCE) or a Denial of Service (DoS) from crashing the service.
","event.category:(network or network_traffic) and destination.port:53 and
  (event.dataset:zeek.dns or type:dns or event.type:connection) and network.bytes > 60000
",medium,['T1210'],"{'leverage', 'cve-2020-1350', 'dns'}",,"['dns', 'overflow', 'vulnerability', 'dos', 'servers']"
e407,Potential Remote Desktop Shadowing Activity,"Identifies the modification of the Remote Desktop Protocol (RDP) Shadow registry or the execution of processes
indicative of an active RDP shadowing session. An adversary may abuse the RDP Shadowing feature to spy on or control
other users active RDP sessions.
","/* Identifies the modification of RDP Shadow registry or
  the execution of processes indicative of active shadow RDP session */

any where
  (event.category == ""registry"" and
     registry.path : ""HKLM\\Software\\Policies\\Microsoft\\Windows NT\\Terminal Services\\Shadow""
  ) or
  (event.category == ""process"" and
     (process.name : (""RdpSaUacHelper.exe"", ""RdpSaProxy.exe"") and process.parent.name : ""svchost.exe"") or
     (process.pe.original_file_name : ""mstsc.exe"" and process.args : ""/shadow:*"")
  )
",high,['T1021'],{'rdp'},264.0,"['rdp', 'shadowing', 'shadow', 'desktop', 'session']"
e408,Potential Lateral Tool Transfer via SMB Share,"Identifies the creation or change of a Windows executable file over network shares. Adversaries may transfer tools or
other files between systems in a compromised environment.
","sequence by host.id with maxspan=30s
  [network where event.type == ""start"" and process.pid == 4 and destination.port == 445 and
   network.direction : (""incoming"", ""ingress"") and
   network.transport == ""tcp"" and source.ip != ""127.0.0.1"" and source.ip != ""::1""
  ] by process.entity_id
  /* add more executable extensions here if they are not noisy in your environment */
  [file where event.type in (""creation"", ""change"") and process.pid == 4 and file.extension : (""exe"", ""dll"", ""bat"", ""cmd"")] by process.entity_id
",medium,"['T1570', 'T1021']","{'leverage', 'stop'}",242.0,"['executable', 'file', 'files', 'compromised', 'windows']"
e409,Execution via TSClient Mountpoint,"Identifies execution from the Remote Desktop Protocol (RDP) shared mountpoint tsclient on the target host. This may
indicate a lateral movement attempt.
","process where event.type == ""start"" and process.executable : ""\\Device\\Mup\\tsclient\\*.exe""
",high,['T1021'],{'rdp'},19.0,"['tsclient', 'rdp', 'mountpoint', 'desktop', 'remote']"
e410,Remote Execution via File Shares,"Identifies the execution of a file that was created by the virtual system process. This may indicate lateral movement
via network file shares.
","sequence with maxspan=1m
  [file where event.type in (""creation"", ""change"") and process.pid == 4 and file.extension : ""exe""] by host.id, file.path
  [process where event.type == ""start""] by host.id, process.executable
",medium,['T1021'],{'stop'},241.0,"['virtual', 'file', 'process', 'movement', 'execution']"
e411,Incoming Execution via WinRM Remote Shell,"Identifies remote execution via Windows Remote Management (WinRM) remote shell on a target host. This could be an
indication of lateral movement.
","sequence by host.id with maxspan=30s
   [network where process.pid == 4 and network.direction : (""incoming"", ""ingress"") and
    destination.port in (5985, 5986) and network.protocol == ""http"" and source.ip != ""127.0.0.1"" and source.ip != ""::1""
   ]
   [process where event.type == ""start"" and process.parent.name : ""winrshost.exe"" and not process.name : ""conhost.exe""]
",medium,['T1021'],{'shell'},7.0,"['lateral', 'shell', 'winrm', 'remote', 'movement']"
e412,WMI Incoming Lateral Movement,"Identifies processes executed via Windows Management Instrumentation (WMI) on a remote host. This could be indicative of
adversary lateral movement, but could be noisy if administrators use WMI to remotely manage hosts.
","sequence by host.id with maxspan = 2s

 /* Accepted Incoming RPC connection by Winmgmt service */

  [network where process.name : ""svchost.exe"" and network.direction : (""incoming"", ""ingress"") and
   source.ip != ""127.0.0.1"" and source.ip != ""::1"" and source.port >= 49152 and destination.port >= 49152
  ]

  /* Excluding Common FPs Nessus and SCCM */

  [process where event.type == ""start"" and process.parent.name : ""WmiPrvSE.exe"" and
   not process.args : (""C:\\windows\\temp\\nessus_*.txt"", 
                       ""C:\\windows\\TEMP\\nessus_*.TMP"", 
                       ""C:\\Windows\\CCM\\SystemTemp\\*"", 
                       ""C:\\Windows\\CCMCache\\*"",
                       ""C:\\CCM\\Cache\\*"")
   ]
",medium,['T1047'],{'wmi'},60.0,"['processes', 'hosts', 'administrators', 'wmi', 'remotely']"
e413,Mounting Hidden or WebDav Remote Shares,"Identifies the use of net.exe to mount a WebDav or hidden remote share. This may indicate lateral movement or
preparation for data exfiltration.
","process where event.type == ""start"" and
 ((process.name : ""net.exe"" or process.pe.original_file_name == ""net.exe"") or ((process.name : ""net1.exe"" or process.pe.original_file_name == ""net1.exe"") and
 not process.parent.name : ""net.exe"")) and
 process.args : ""use"" and
 /* including hidden and webdav based online shares such as onedrive  */
 process.args : (""\\\\*\\*$*"", ""\\\\*@SSL\\*"", ""http*"") and
 /* excluding shares deletion operation */
 not process.args : ""/d*""
",medium,['T1021'],"{'net.exe', 'exe'}",163.0,"['webdav', 'net', 'exe', 'exfiltration', 'mount']"
e414,Incoming Execution via PowerShell Remoting,"Identifies remote execution via Windows PowerShell remoting. Windows PowerShell remoting allows a user to run any Windows
PowerShell command on one or more remote computers. This could be an indication of lateral movement.
","sequence by host.id with maxspan = 30s
   [network where network.direction : (""incoming"", ""ingress"") and destination.port in (5985, 5986) and
    network.protocol == ""http"" and source.ip != ""127.0.0.1"" and source.ip != ""::1""
   ]
   [process where event.type == ""start"" and process.parent.name : ""wsmprovhost.exe"" and not process.name : ""conhost.exe""]
",medium,['T1021'],{'powershell'},5.0,"['powershell', 'remoting', 'remote', 'execution', 'movement']"
e415,RDP Enabled via Registry,"Identifies registry write modifications to enable Remote Desktop Protocol (RDP) access. This could be indicative of
adversary lateral movement preparation.
","registry where event.type in (""creation"", ""change"") and
  registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\Control\\Terminal Server\\fDenyTSConnections"" and
  registry.data.strings : (""0"", ""0x00000000"") and not (process.name : ""svchost.exe"" and user.domain == ""NT AUTHORITY"") and
  not process.executable : ""C:\\Windows\\System32\\SystemPropertiesRemote.exe""
",medium,['T1021'],"{'registry modification', 'rdp', 'psexec'}",91.0,"['rdp', 'registry', 'protocol', 'desktop', 'remote']"
e416,Potential SharpRDP Behavior,"Identifies potential behavior of SharpRDP, which is a tool that can be used to perform authenticated command execution
against a remote target via Remote Desktop Protocol (RDP) for the purposes of lateral movement.
","/* Incoming RDP followed by a new RunMRU string value set to cmd, powershell, taskmgr or tsclient, followed by process execution within 1m */

sequence by host.id with maxspan=1m
  [network where event.type == ""start"" and process.name : ""svchost.exe"" and destination.port == 3389 and
   network.direction : (""incoming"", ""ingress"") and network.transport == ""tcp"" and
   source.ip != ""127.0.0.1"" and source.ip != ""::1""
  ]

  [registry where process.name : ""explorer.exe"" and
   registry.path : (""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU\\*"") and
   registry.data.strings : (""cmd.exe*"", ""powershell.exe*"", ""taskmgr*"", ""\\\\tsclient\\*.exe\\*"")
  ]

  [process where event.type == ""start"" and
   (process.parent.name : (""cmd.exe"", ""powershell.exe"", ""taskmgr.exe"") or process.args : (""\\\\tsclient\\*.exe"")) and
   not process.name : ""conhost.exe""
   ]
",high,['T1021'],{'rdp'},265.0,"['sharprdp', 'rdp', 'protocol', 'remote', 'tool']"
e417,Remote File Copy to a Hidden Share,"Identifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging
activity.
","process where event.type == ""start"" and
  process.name : (""cmd.exe"", ""powershell.exe"", ""robocopy.exe"", ""xcopy.exe"") and
  process.args : (""copy*"", ""move*"", ""cp"", ""mv"") and process.args : ""*$*""
",medium,['T1021'],{'network'},241.0,"['file', 'network', 'share', 'copy', 'movement']"
e418,Remotely Started Services via RPC,"Identifies remote execution of Windows services over remote procedure call (RPC). This could be indicative of lateral
movement, but will be noisy if commonly done by administrators.""
","sequence with maxspan=1s
   [network where process.name : ""services.exe"" and
      network.direction : (""incoming"", ""ingress"") and network.transport == ""tcp"" and
      source.port >= 49152 and destination.port >= 49152 and source.ip != ""127.0.0.1"" and source.ip != ""::1""
   ] by host.id, process.entity_id

   [process where event.type == ""start"" and process.parent.name : ""services.exe"" and 
       not (process.name : ""svchost.exe"" and process.args : ""tiledatamodelsvc"") and
       not (process.name : ""msiexec.exe"" and process.args : ""/V"") and
       not process.executable :
               (""?:\\Windows\\ADCR_Agent\\adcrsvc.exe"",
                ""?:\\Windows\\System32\\VSSVC.exe"",
                ""?:\\Windows\\servicing\\TrustedInstaller.exe"",
                ""?:\\Windows\\System32\\svchost.exe"",
                ""?:\\Program Files (x86)\\*.exe"",
                ""?:\\Program Files\\*.exe"",
                ""?:\\Windows\\PSEXESVC.EXE"",
                ""?:\\Windows\\System32\\sppsvc.exe"",
                ""?:\\Windows\\System32\\wbem\\WmiApSrv.exe"",
                ""?:\\WINDOWS\\RemoteAuditService.exe"",
                ""?:\\Windows\\VeeamVssSupport\\VeeamGuestHelper.exe"",
                ""?:\\Windows\\VeeamLogShipper\\VeeamLogShipper.exe"",
                ""?:\\Windows\\CAInvokerService.exe"",
                ""?:\\Windows\\System32\\upfc.exe"",
                ""?:\\Windows\\AdminArsenal\\PDQ*.exe"",
                ""?:\\Windows\\System32\\vds.exe"",
                ""?:\\Windows\\Veeam\\Backup\\VeeamDeploymentSvc.exe"",
                ""?:\\Windows\\ProPatches\\Scheduler\\STSchedEx.exe"",
                ""?:\\Windows\\System32\\certsrv.exe"",
                ""?:\\Windows\\eset-remote-install-service.exe"",
                ""?:\\Pella Corporation\\Pella Order Management\\GPAutoSvc.exe"",
                ""?:\\Pella Corporation\\OSCToGPAutoService\\OSCToGPAutoSvc.exe"",
                ""?:\\Pella Corporation\\Pella Order Management\\GPAutoSvc.exe"",
                ""?:\\Windows\\SysWOW64\\NwxExeSvc\\NwxExeSvc.exe"",
                ""?:\\Windows\\System32\\taskhostex.exe"")
   ] by host.id, process.parent.entity_id
",medium,['T1021'],{'stop'},7.0,"['rpc', 'services', 'execution', 'remote', 'windows']"
e419,Remote Logon followed by Scheduled Task Creation,"Identifies a remote logon followed by a scheduled task creation on the target host. This could be indicative of
adversary lateral movement.
","/* Network Logon followed by Scheduled Task creation  */

sequence by host.id with maxspan=1m
  [authentication where event.action == ""logged-in"" and
   winlog.logon.type == ""Network"" and event.outcome == ""success"" and
   not user.name == ""ANONYMOUS LOGON"" and not winlog.event_data.SubjectUserName : ""*$"" and
   not user.domain == ""NT AUTHORITY"" and source.ip != ""127.0.0.1"" and source.ip !=""::1""] by winlog.event_data.TargetLogonId

  [iam where event.action == ""scheduled-task-created""] by winlog.event_data.SubjectLogonId
",medium,"['T1053', 'T1021']",{'winlog'},,"['logon', 'remote', 'host', 'adversary', 'task']"
e420,Remote Scheduled Task Creation,Identifies remote scheduled task creations on a target host. This could be indicative of adversary lateral movement.,"/* Task Scheduler service incoming connection followed by TaskCache registry modification  */

sequence by host.id, process.entity_id with maxspan = 1m
   [network where process.name : ""svchost.exe"" and
   network.direction : (""incoming"", ""ingress"") and source.port >= 49152 and destination.port >= 49152 and
   source.ip != ""127.0.0.1"" and source.ip != ""::1""
   ]
   [registry where registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\*\\Actions""]
",medium,"['T1053', 'T1021']",{'registry modification'},147.0,"['task', 'remote', 'adversary', 'movement', 'scheduled']"
e421,Service Control Spawned via Script Interpreter,"Identifies Service Control (sc.exe) spawning from script interpreter processes to create, modify, or start services.
This could be indicative of adversary lateral movement but will be noisy if commonly done by admins.
","/* This rule is not compatible with Sysmon due to user.id issues */

process where event.type == ""start"" and
  (process.name : ""sc.exe"" or process.pe.original_file_name == ""sc.exe"") and
  process.parent.name : (""cmd.exe"", ""wscript.exe"", ""rundll32.exe"", ""regsvr32.exe"",
                         ""wmic.exe"", ""mshta.exe"",""powershell.exe"", ""pwsh.exe"") and
  process.args:(""config"", ""create"", ""start"", ""delete"", ""stop"", ""pause"") and
  /* exclude SYSTEM SID - look for service creations by non-SYSTEM user */
  not user.id : ""S-1-5-18""
",low,['T1021'],"{'exe', 'stop', 'rundll32'}",271.0,"['processes', 'services', 'service', 'exe', 'interpreter']"
e422,Suspicious RDP ActiveX Client Loaded,"Identifies suspicious Image Loading of the Remote Desktop Services ActiveX Client (mstscax), this may indicate the
presence of RDP lateral movement capability.
","any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
 (dll.name : ""mstscax.dll"" or file.name : ""mstscax.dll"") and
   /* depending on noise in your env add here extra paths  */
  process.executable :
    (
    ""C:\\Windows\\*"",
    ""C:\\Users\\Public\\*"",
    ""C:\\Users\\Default\\*"",
    ""C:\\Intel\\*"",
    ""C:\\PerfLogs\\*"",
    ""C:\\ProgramData\\*"",
    ""\\Device\\Mup\\*"",
    ""\\\\*""
    ) and
    /* add here FPs */
  not process.executable : (""C:\\Windows\\System32\\mstsc.exe"", ""C:\\Windows\\SysWOW64\\mstsc.exe"")
",medium,['T1021'],{'rdp'},266.0,"['mstscax', 'rdp', 'activex', 'desktop', 'client']"
e423,Lateral Movement via Startup Folder,"Identifies suspicious file creations in the startup folder of a remote system. An adversary could abuse this to move
laterally by dropping a malicious script or executable that will be executed after a reboot or user logon.
","file where event.type in (""creation"", ""change"") and

 /* via RDP TSClient mounted share or SMB */
  (process.name : ""mstsc.exe"" or process.pid == 4) and

   file.path : (""?:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\*"",
                ""?:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\*"")
",high,"['T1547', 'T1021']",,46.0,"['malicious', 'startup', 'executable', 'suspicious', 'file']"
e424,Adobe Hijack Persistence,Detects writing executable files that will be automatically launched by Adobe on launch.,"file where event.type == ""creation"" and
  file.path : (""?:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\AcroCEF\\RdrCEF.exe"",
               ""?:\\Program Files\\Adobe\\Acrobat Reader DC\\Reader\\AcroCEF\\RdrCEF.exe"") and
  not process.name : ""msiexec.exe""
",low,['T1574'],{'stop'},267.0,"['adobe', 'executable', 'launch', 'launched', 'files']"
e425,AdminSDHolder Backdoor,"Detects modifications in the AdminSDHolder object. Attackers can abuse the SDProp process to implement a persistent
backdoor in Active Directory. SDProp compares the permissions on protected objects with those defined on the
AdminSDHolder object. If the permissions on any of the protected accounts and groups do not match, the permissions on
the protected accounts and groups are reset to match those of the domain's AdminSDHolder object, regaining their
Administrative Privileges.
","event.action:""Directory Service Changes"" and event.code:5136 and winlog.event_data.ObjectDN:CN=AdminSDHolder,CN=System*
",high,,"{'winlog', 'privilege'}",,"['adminsdholder', 'sdprop', 'privileges', 'administrative', 'protected']"
e426,Registry Persistence via AppCert DLL,"Detects attempts to maintain persistence by creating registry keys using AppCert DLLs. AppCert DLLs are loaded by every
process using the common API functions to create processes.
","registry where
/* uncomment once stable length(bytes_written_string) > 0 and */
  registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\Control\\Session Manager\\AppCertDLLs\\*""
",medium,['T1546'],"{'dll', 'registry modification'}",29.0,"['registry', 'persistence', 'appcert', 'dlls', 'maintain']"
e427,Registry Persistence via AppInit DLL,"Attackers may maintain persistence by creating registry keys using AppInit DLLs. AppInit DLLs are loaded by every
process using the common library, user32.dll.
","registry where
   registry.path : (""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_Dlls"",
                    ""HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_Dlls"") and
   not process.executable : (""C:\\Windows\\System32\\msiexec.exe"",
                             ""C:\\Windows\\SysWOW64\\msiexec.exe"",
                             ""C:\\Program Files\\Commvault\\ContentStore*\\Base\\cvd.exe"",
                             ""C:\\Program Files (x86)\\Commvault\\ContentStore*\\Base\\cvd.exe"")
",medium,['T1546'],"{'dll', 'registry modification'}",57.0,"['dlls', 'dll', 'registry', 'persistence', 'attackers']"
e428,Installation of Custom Shim Databases,"Identifies the installation of custom Application Compatibility Shim databases. This Windows functionality has been
abused by attackers to stealthily gain persistence and arbitrary code execution in legitimate Windows processes.
","sequence by process.entity_id with maxspan = 5m
  [process where event.type == ""start"" and
    not (process.name : ""sdbinst.exe"" and process.parent.name : ""msiexec.exe"")]
  [registry where event.type in (""creation"", ""change"") and
    registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\\*.sdb""]
",medium,['T1546'],,7.0,"['application', 'databases', 'compatibility', 'execution', 'windows']"
e429,Account Configured with Never-Expiring Password,"Detects the creation and modification of an account with the ""Don't Expire Password"" option Enabled. Attackers can abuse
this misconfiguration to persist in the domain and maintain long-term access using compromised accounts with this
property.
","event.action:""modified-user-account"" and event.code:""4738"" and message:""'Don't Expire Password' - Enabled"" and not user.id:""S-1-5-18""
",medium,['T1098'],{'password'},134.0,"['expire', 'password', 'accounts', 'account', 'compromised']"
e430,Creation of a Hidden Local User Account,"Identifies the creation of a hidden local user account by appending the dollar sign to the account name. This is
sometimes done by attackers to increase access to a system and avoid appearing in the results of accounts listing using
the net users command.
","registry where registry.path : ""HKLM\\SAM\\SAM\\Domains\\Account\\Users\\Names\\*$\\""
",high,['T1136'],,134.0,"['accounts', 'account', 'users', 'identifies', 'appearing']"
e431,Image File Execution Options Injection,"The Debugger and SilentProcessExit registry keys can allow an adversary to intercept the execution of files, causing a
different process to be executed. This functionality can be abused by an adversary to establish persistence.
","registry where length(registry.data.strings) > 0 and
 registry.path : (""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\*.exe\\Debugger"",
                  ""HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\*\\Debugger"",
                  ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\*\\MonitorProcess"",
                  ""HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\*\\MonitorProcess"") and
   /* add FPs here */
 not registry.data.strings regex~ (""""""C:\\Program Files( \(x86\))?\\ThinKiosk\\thinkiosk\.exe"""""", """""".*\\PSAppDeployToolkit\\.*"""""")
",medium,['T1546'],{'registry modification'},268.0,"['silentprocessexit', 'debugger', 'registry', 'execution', 'files']"
e432,Suspicious Startup Shell Folder Modification,"Identifies suspicious startup shell folder modifications to change the default Startup directory in order to bypass
detections monitoring file creation in the Windows Startup folder.
","registry where
 registry.path : (
     ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\\Common Startup"",
     ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Common Startup"",
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\\Startup"",
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Startup""
     ) and
  registry.data.strings != null and
  /* Normal Startup Folder Paths */
  not registry.data.strings : (
           ""C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"",
           ""%ProgramData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"",
           ""%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"",
           ""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup""
           )
",high,['T1547'],"{'leverage', 'shell', 'registry modification'}",66.0,"['startup', 'suspicious', 'folder', 'shell', 'directory']"
e433,Creation or Modification of a new GPO Scheduled Task or Service,"Detects the creation or modification of a new Group Policy based scheduled task or service. These methods are used for
legitimate system administration, but can also be abused by an attacker with domain admin permissions to execute a
malicious payload remotely on all or a subset of the domain joined machines.
","file where event.type != ""deletion"" and
  file.path : (""?:\\Windows\\SYSVOL\\domain\\Policies\\*\\MACHINE\\Preferences\\ScheduledTasks\\ScheduledTasks.xml"",
               ""?:\\Windows\\SYSVOL\\domain\\Policies\\*\\MACHINE\\Preferences\\Services\\Services.xml"") and
  not process.name : ""dfsrs.exe""
",low,['T1053'],,55.0,"['scheduled', 'administration', 'service', 'detects', 'policy']"
e434,Persistence via Scheduled Job Creation,"A job can be used to schedule programs or scripts to be executed at a specified date and time. Adversaries may abuse
task scheduling functionality to facilitate initial or recurring execution of malicious code.
","file where event.type != ""deletion"" and
 file.path : ""?:\\Windows\\Tasks\\*"" and file.extension : ""job""
",medium,['T1053'],,269.0,"['scheduling', 'schedule', 'execution', 'scripts', 'job']"
e435,Local Scheduled Task Creation,"Indicates the creation of a scheduled task. Adversaries can use these to establish persistence, move laterally, and/or
escalate privileges.
","sequence with maxspan=1m
  [process where event.type != ""end"" and
    ((process.name : (""cmd.exe"", ""wscript.exe"", ""rundll32.exe"", ""regsvr32.exe"", ""wmic.exe"", ""mshta.exe"",
                      ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"", ""WmiPrvSe.exe"", ""wsmprovhost.exe"", ""winrshost.exe"") or
    process.pe.original_file_name : (""cmd.exe"", ""wscript.exe"", ""rundll32.exe"", ""regsvr32.exe"", ""wmic.exe"", ""mshta.exe"",
                                     ""powershell.exe"", ""pwsh.dll"", ""powershell_ise.exe"", ""WmiPrvSe.exe"", ""wsmprovhost.exe"",
                                     ""winrshost.exe"")) or
    process.code_signature.trusted == false)] by process.entity_id
  [process where event.type == ""start"" and
    (process.name : ""schtasks.exe"" or process.pe.original_file_name == ""schtasks.exe"") and
    process.args : (""/create"", ""-create"") and process.args : (""/RU"", ""/SC"", ""/TN"", ""/TR"", ""/F"", ""/XML"") and
    /* exclude SYSTEM Integrity Level - look for task creations by non-SYSTEM user */
    not (?process.Ext.token.integrity_level_name : ""System"" or ?winlog.event_data.IntegrityLevel : ""System"")
  ] by process.parent.entity_id
",low,['T1053'],"{'schtasks', 'winlog', 'privilege', 'rundll32'}",,"['adversaries', 'task', 'privileges', 'escalate', 'persistence']"
e436,Scheduled Task Created by a Windows Script,"A scheduled task was created by a Windows script via cscript.exe, wscript.exe or powershell.exe. This can be abused by
an adversary to establish persistence.
","sequence by host.id with maxspan = 30s
  [any where (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
   (dll.name : ""taskschd.dll"" or file.name : ""taskschd.dll"") and
   process.name : (""cscript.exe"", ""wscript.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"")]
  [registry where registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\*\\Actions""]
",medium,['T1053'],{'powershell'},227.0,"['scheduled', 'cscript', 'persistence', 'script', 'powershell']"
e437,KRBTGT Delegation Backdoor,"Identifies the modification of the msDS-AllowedToDelegateTo attribute to KRBTGT. Attackers can use this technique to
maintain persistence to the domain by having the ability to request tickets for the KRBTGT service.
","event.action:modified-user-account and event.code:4738 and winlog.event_data.AllowedToDelegateTo:*krbtgt*
",high,"['T1558', 'T1098']",{'winlog'},,"['krbtgt', 'msds', 'attackers', 'allowedtodelegateto', 'persistence']"
e438,Persistence via Microsoft Office AddIns,Detects attempts to establish persistence on an endpoint by abusing Microsoft Office add-ins.,"file where event.type != ""deletion"" and
 file.extension : (""wll"",""xll"",""ppa"",""ppam"",""xla"",""xlam"") and
 file.path :
    (
    ""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Word\\Startup\\*"",
    ""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\AddIns\\*"",
    ""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\*""
    )
",high,['T1137'],{'microsoft office'},64.0,"['microsoft', 'persistence', 'office', 'endpoint', 'attempts']"
e439,Persistence via Microsoft Outlook VBA,Detects attempts to establish persistence on an endpoint by installing a rogue Microsoft Outlook VBA Template.,"file where event.type != ""deletion"" and
 file.path : ""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Outlook\\VbaProject.OTM""
",medium,['T1137'],{'rogue'},96.0,"['outlook', 'vba', 'persistence', 'microsoft', 'endpoint']"
e440,New ActiveSyncAllowedDeviceID Added via PowerShell,"Identifies the use of the Exchange PowerShell cmdlet, Set-CASMailbox, to add a new ActiveSync allowed device.
Adversaries may target user email to collect sensitive information.
","process where event.type == ""start"" and
  process.name: (""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and process.args : ""Set-CASMailbox*ActiveSyncAllowedDeviceIDs*""
",medium,['T1098'],"{'dark', 'powershell', 'email'}",270.0,"['casmailbox', 'exchange', 'activesync', 'email', 'powershell']"
e441,Potential Modification of Accessibility Binaries,"Windows contains accessibility features that may be launched with a key combination before a user has logged in. An
adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the
system.
","process where event.type == ""start"" and
 process.parent.name : (""Utilman.exe"", ""winlogon.exe"") and user.name == ""SYSTEM"" and
 process.args :
    (
    ""C:\\Windows\\System32\\osk.exe"",
    ""C:\\Windows\\System32\\Magnify.exe"",
    ""C:\\Windows\\System32\\Narrator.exe"",
    ""C:\\Windows\\System32\\Sethc.exe"",
    ""utilman.exe"",
    ""ATBroker.exe"",
    ""DisplaySwitch.exe"",
    ""sethc.exe""
    )
 and not process.pe.original_file_name in
    (
    ""osk.exe"",
    ""sethc.exe"",
    ""utilman2.exe"",
    ""DisplaySwitch.exe"",
    ""ATBroker.exe"",
    ""ScreenMagnifier.exe"",
    ""SR.exe"",
    ""Narrator.exe"",
    ""magnify.exe"",
    ""MAGNIFY.EXE""
    )

/* uncomment once in winlogbeat to avoid bypass with rogue process with matching pe original file name */
/* and process.code_signature.subject_name == ""Microsoft Windows"" and process.code_signature.status == ""trusted"" */
",high,['T1546'],"{'rogue', 'stop'}",7.0,"['windows', 'accessibility', 'programs', 'backdoor', 'prompt']"
e442,Uncommon Registry Persistence Change,"Detects changes to registry persistence keys that are not commonly used or modified by legitimate programs. This could be
an indication of an adversary's attempt to persist in a stealthy manner.
","registry where
  /* uncomment once stable length(registry.data.strings) > 0 and */
 registry.path : (
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\Install\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\*"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Terminal Server\\Install\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Runonce\\*"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Run"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\IconServiceLib"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AppSetup"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Taskman"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\VmApplet"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\*"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Shell"",
      ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Logoff\\Script"",
      ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Logon\\Script"",
      ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Shutdown\\Script"",
      ""HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Startup\\Script"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\*"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Shell"",
      ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Logoff\\Script"",
      ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Logon\\Script"",
      ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Shutdown\\Script"",
      ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Startup\\Script"",
      ""HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\*\\ShellComponent"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnConnect\\MicrosoftActiveSync"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows CE Services\\AutoStartOnDisconnect\\MicrosoftActiveSync"",
      ""HKLM\\SOFTWARE\\Microsoft\\Ctf\\LangBarAddin\\*\\FilePath"",
      ""HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions\\*\\Exec"",
      ""HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions\\*\\Script"",
      ""HKLM\\SOFTWARE\\Microsoft\\Command Processor\\Autorun"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Ctf\\LangBarAddin\\*\\FilePath"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions\\*\\Exec"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions\\*\\Script"",
      ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Command Processor\\Autorun"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\*\\VerifierDlls"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\GpExtensions\\*\\DllName"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\SafeBoot\\AlternateShell"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\Terminal Server\\Wds\\rdpwd\\StartupPrograms"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\InitialProgram"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\Session Manager\\BootExecute"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\Session Manager\\SetupExecute"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\Session Manager\\Execute"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\Session Manager\\S0InitialCommand"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\ServiceControlManagerExtension"",
      ""HKLM\\SYSTEM\\ControlSet*\\Control\\BootVerificationProgram\\ImagePath"",
      ""HKLM\\SYSTEM\\Setup\\CmdLine"",
      ""HKEY_USERS\\*\\Environment\\UserInitMprLogonScript"") and

 not registry.data.strings : (""C:\\Windows\\system32\\userinit.exe"", ""cmd.exe"", ""C:\\Program Files (x86)\\*.exe"",
                              ""C:\\Program Files\\*.exe"") and
 not (process.name : ""rundll32.exe"" and registry.path : ""*\\Software\\Microsoft\\Internet Explorer\\Extensions\\*\\Script"") and
 not process.executable : (""C:\\Windows\\System32\\msiexec.exe"",
                           ""C:\\Windows\\SysWOW64\\msiexec.exe"",
                           ""C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\*\\MsMpEng.exe"",
                           ""C:\\Program Files\\*.exe"",
                           ""C:\\Program Files (x86)\\*.exe"")
",medium,"['T1547', 'T1112']","{'registry modification', 'rundll32'}",29.0,"['registry', 'persistence', 'stealthy', 'persist', 'detects']"
e443,Account Password Reset Remotely,"Identifies an attempt to reset a potentially privileged account password remotely. Adversaries may manipulate account
passwords to maintain access or evade password duration policies and preserve compromised credentials.
","sequence by host.id with maxspan=5m
  [authentication where event.action == ""logged-in"" and
    /* event 4624 need to be logged */
    winlog.logon.type : ""Network"" and event.outcome == ""success"" and source.ip != null and
    source.ip != ""127.0.0.1"" and source.ip != ""::1""] by winlog.event_data.TargetLogonId
   /* event 4724 need to be logged */
  [iam where event.action == ""reset-password"" and
   (
    /*
       This rule is very noisy if not scoped to privileged accounts, duplicate the
       rule and add your own naming convention and accounts of interest here.
     */
    winlog.event_data.TargetUserName: (""*Admin*"", ""*super*"", ""*SVC*"", ""*DC0*"", ""*service*"", ""*DMZ*"", ""*ADM*"") or
    winlog.event_data.TargetSid : ""S-1-5-21-*-500""
    )
  ] by winlog.event_data.SubjectLogonId
",medium,['T1098'],"{'winlog', 'mimikatz', 'password'}",,"['passwords', 'password', 'compromised', 'credentials', 'reset']"
e444,Execution of Persistent Suspicious Program,"Identifies execution of suspicious persistent programs (scripts, rundll32, etc.) by looking at process lineage and
command line usage.
","/* userinit followed by explorer followed by early child process of explorer (unlikely to be launched interactively) within 1m */
sequence by host.id, user.name with maxspan=1m
  [process where event.type == ""start"" and process.name : ""userinit.exe"" and process.parent.name : ""winlogon.exe""]
  [process where event.type == ""start"" and process.name : ""explorer.exe""]
  [process where event.type == ""start"" and process.parent.name : ""explorer.exe"" and
   /* add suspicious programs here */
   process.pe.original_file_name in (""cscript.exe"",
                                     ""wscript.exe"",
                                     ""PowerShell.EXE"",
                                     ""MSHTA.EXE"",
                                     ""RUNDLL32.EXE"",
                                     ""REGSVR32.EXE"",
                                     ""RegAsm.exe"",
                                     ""MSBuild.exe"",
                                     ""InstallUtil.exe"") and
    /* add potential suspicious paths here */
    process.args : (""C:\\Users\\*"", ""C:\\ProgramData\\*"", ""C:\\Windows\\Temp\\*"", ""C:\\Windows\\Tasks\\*"", ""C:\\PerfLogs\\*"", ""C:\\Intel\\*"")
   ]
",medium,['T1547'],"{'dll', 'msbuild', 'rundll32'}",186.0,"['rundll32', 'process', 'execution', 'suspicious', 'persistent']"
e445,Startup or Run Key Registry Modification,"Identifies run key or startup key registry modifications. In order to survive reboots and other system interrupts,
attackers will modify run keys within the registry or leverage startup folder items as a form of persistence.
","registry where registry.data.strings != null and
 registry.path : (
     /* Machine Hive */
     ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\*"",
     ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*"",
     ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\*"",
     ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\*"",
     ""HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\\*"",
     /* Users Hive */
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\*"",
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*"",
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\*"",
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\*"",
     ""HKEY_USERS\\*\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\\*""
     ) and
  /* add common legitimate changes without being too restrictive as this is one of the most abused AESPs */
  not registry.data.strings : ""ctfmon.exe /n"" and
  not (registry.value : ""Application Restart #*"" and process.name : ""csrss.exe"") and
  user.id not in (""S-1-5-18"", ""S-1-5-19"", ""S-1-5-20"") and
  not registry.data.strings : (""?:\\Program Files\\*.exe"", ""?:\\Program Files (x86)\\*.exe"") and
  not process.executable : (""?:\\Windows\\System32\\msiexec.exe"", ""?:\\Windows\\SysWOW64\\msiexec.exe"") and
  not (process.name : ""OneDriveSetup.exe"" and
       registry.value : (""Delete Cached Standalone Update Binary"", ""Delete Cached Update Binary"", ""amd64"", ""Uninstall *"") and
       registry.data.strings : ""?:\\Windows\\system32\\cmd.exe /q /c * \""?:\\Users\\*\\AppData\\Local\\Microsoft\\OneDrive\\*\"""")
",low,['T1547'],"{'leverage', 'hive', 'registry modification', 'stop'}",,"['registry', 'startup', 'attackers', 'reboots', 'interrupts']"
e446,A scheduled task was created,"Indicates the creation of a scheduled task using Windows event logs. Adversaries can use these to establish persistence,
move laterally, and/or escalate privileges.
","iam where event.action == ""scheduled-task-created"" and

 /* excluding tasks created by the computer account */
 not user.name : ""*$"" and

 /* TaskContent is not parsed, exclude by full taskname noisy ones */
 not winlog.event_data.TaskName :
             (""\\OneDrive Standalone Update Task-S-1-5-21*"",
              ""\\Hewlett-Packard\\HP Web Products Detection"",
              ""\\Hewlett-Packard\\HPDeviceCheck"")
",low,['T1053'],"{'winlog', 'privilege'}",,"['logs', 'scheduled', 'task', 'event', 'privileges']"
e447,A scheduled task was updated,"Indicates the update of a scheduled task using Windows event logs. Adversaries can use these to establish persistence,
by changing the configuration of a legit scheduled task. Some changes such as disabling or enabling a scheduled task are
common and may may generate noise.
","iam where event.action == ""scheduled-task-updated"" and

 /* excluding tasks created by the computer account */
 not user.name : ""*$"" and
 not winlog.event_data.TaskName :
          (""\\User_Feed_Synchronization-*"",
           ""\\OneDrive Reporting Task-S-1-5-21*"",
           ""\\Hewlett-Packard\\HP Web Products Detection"",
           ""\\Hewlett-Packard\\HPDeviceCheck"")
",low,['T1053'],{'winlog'},,"['persistence', 'scheduled', 'logs', 'task', 'disabling']"
e448,AdminSDHolder SDProp Exclusion Added,"Identifies a modification on the dsHeuristics attribute on the bit that holds the configuration of groups excluded from
the SDProp process. The SDProp compares the permissions on protected objects with those defined on the AdminSDHolder
object. If the permissions on any of the protected accounts and groups do not match, the permissions on the protected
accounts and groups are reset to match those of the domain's AdminSDHolder object, meaning that groups excluded will
remain unchanged. Attackers can abuse this misconfiguration to maintain long-term access to privileged accounts in these
groups.
","any where event.action == ""Directory Service Changes"" and
  event.code == ""5136"" and
  winlog.event_data.AttributeLDAPDisplayName : ""dSHeuristics"" and
  length(winlog.event_data.AttributeValue) > 15 and
  winlog.event_data.AttributeValue regex~ ""[0-9]{15}([1-9a-f]).*""
",high,,"{'permission', 'winlog', 'privilege'}",,"['sdprop', 'privileged', 'permissions', 'adminsdholder', 'protected']"
e449,Unusual Persistence via Services Registry,"Identifies processes modifying the services registry key directly, instead of through the expected Windows APIs. This
could be an indication of an adversary attempting to stealthily persist through abnormal service creation or
modification of an existing service.
","registry where registry.path : (""HKLM\\SYSTEM\\ControlSet*\\Services\\*\\ServiceDLL"", ""HKLM\\SYSTEM\\ControlSet*\\Services\\*\\ImagePath"") and
  not registry.data.strings : (""?:\\windows\\system32\\Drivers\\*.sys"",
                               ""\\SystemRoot\\System32\\drivers\\*.sys"",
                               ""\\??\\?:\\Windows\\system32\\Drivers\\*.SYS"",
                               ""system32\\DRIVERS\\USBSTOR"") and
  not (process.name : ""procexp??.exe"" and registry.data.strings : ""?:\\*\\procexp*.sys"") and
  not process.executable : (""?:\\Program Files\\*.exe"",
                            ""?:\\Program Files (x86)\\*.exe"",
                            ""?:\\Windows\\System32\\svchost.exe"",
                            ""?:\\Windows\\winsxs\\*\\TiWorker.exe"",
                            ""?:\\Windows\\System32\\drvinst.exe"",
                            ""?:\\Windows\\System32\\services.exe"",
                            ""?:\\Windows\\System32\\msiexec.exe"",
                            ""?:\\Windows\\System32\\regsvr32.exe"")
",low,['T1543'],{'registry modification'},29.0,"['registry', 'services', 'service', 'processes', 'apis']"
e450,Startup Persistence by a Suspicious Process,"Identifies files written to or modified in the startup folder by commonly abused processes. Adversaries may use this
technique to maintain persistence.
","file where event.type != ""deletion"" and
  user.domain != ""NT AUTHORITY"" and
  file.path : (""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\*"",
               ""C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\*"") and
  process.name : (""cmd.exe"",
                  ""powershell.exe"",
                  ""wmic.exe"",
                  ""mshta.exe"",
                  ""pwsh.exe"",
                  ""cscript.exe"",
                  ""wscript.exe"",
                  ""regsvr32.exe"",
                  ""RegAsm.exe"",
                  ""rundll32.exe"",
                  ""EQNEDT32.EXE"",
                  ""WINWORD.EXE"",
                  ""EXCEL.EXE"",
                  ""POWERPNT.EXE"",
                  ""MSPUB.EXE"",
                  ""MSACCESS.EXE"",
                  ""iexplore.exe"",
                  ""InstallUtil.exe"")
",medium,['T1547'],"{'stop', 'rundll32'}",66.0,"['persistence', 'processes', 'startup', 'files', 'maintain']"
e451,Startup Folder Persistence via Unsigned Process,"Identifies files written or modified in the startup folder by unsigned processes. Adversaries may abuse this technique
to maintain persistence in an environment.
","sequence by host.id, process.entity_id with maxspan=5s
  [process where event.type == ""start"" and process.code_signature.trusted == false and
  /* suspicious paths can be added here  */
   process.executable : (""C:\\Users\\*.exe"",
                         ""C:\\ProgramData\\*.exe"",
                         ""C:\\Windows\\Temp\\*.exe"",
                         ""C:\\Windows\\Tasks\\*.exe"",
                         ""C:\\Intel\\*.exe"",
                         ""C:\\PerfLogs\\*.exe"")
   ]
   [file where event.type != ""deletion"" and user.domain != ""NT AUTHORITY"" and
    file.path : (""C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\*"",
                 ""C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\*"")
   ]
",medium,['T1547'],{'stop'},66.0,"['processes', 'startup', 'files', 'unsigned', 'persistence']"
e452,Persistent Scripts in the Startup Directory,"Identifies script engines creating files in the Startup folder, or the creation of script files in the Startup folder.
Adversaries may abuse this technique to maintain persistence in an environment.
","file where event.type != ""deletion"" and user.domain != ""NT AUTHORITY"" and

  /* detect shortcuts created by wscript.exe or cscript.exe */
  (file.path : ""C:\\*\\Programs\\Startup\\*.lnk"" and
     process.name : (""wscript.exe"", ""cscript.exe"")) or

  /* detect vbs or js files created by any process */
  file.path : (""C:\\*\\Programs\\Startup\\*.vbs"",
               ""C:\\*\\Programs\\Startup\\*.vbe"",
               ""C:\\*\\Programs\\Startup\\*.wsh"",
               ""C:\\*\\Programs\\Startup\\*.wsf"",
               ""C:\\*\\Programs\\Startup\\*.js"")
",medium,['T1547'],{'stop'},66.0,"['startup', 'script', 'persistence', 'files', 'engines']"
e453,Component Object Model Hijacking,"Identifies Component Object Model (COM) hijacking via registry modification. Adversaries may establish persistence by
executing malicious content triggered by hijacked references to COM objects.
","registry where
 (registry.path : ""HK*}\\InprocServer32\\"" and registry.data.strings: (""scrobj.dll"", ""C:\\*\\scrobj.dll"") and
 not registry.path : ""*\\{06290BD*-48AA-11D2-8432-006008C3FBFC}\\*"")
 or
 /* in general COM Registry changes on Users Hive is less noisy and worth alerting */
 (registry.path : (""HKEY_USERS\\*Classes\\*\\InprocServer32\\"",
                   ""HKEY_USERS\\*Classes\\*\\LocalServer32\\"",
                   ""HKEY_USERS\\*Classes\\*\\DelegateExecute\\"",
                   ""HKEY_USERS\\*Classes\\*\\TreatAs\\"",
                   ""HKEY_USERS\\*Classes\\CLSID\\*\\ScriptletURL\\"") and
 not (process.executable : ""?:\\Program Files*\\Veeam\\Backup and Replication\\Console\\veeam.backup.shell.exe"" and
      registry.path : ""HKEY_USERS\\S-1-5-21-*_Classes\\CLSID\\*\\LocalServer32\\"") and
 /* not necessary but good for filtering privileged installations */
 user.domain != ""NT AUTHORITY""
 ) and
 /* removes false-positives generated by OneDrive and Teams */
 not process.name : (""OneDrive.exe"",""OneDriveSetup.exe"",""FileSyncConfig.exe"",""Teams.exe"") and
 /* Teams DLL loaded by regsvr */
 not (process.name: ""regsvr32.exe"" and
 registry.data.strings : ""*Microsoft.Teams.*.dll"")
",medium,['T1546'],"{'hive', 'registry modification', 'stop'}",,"['hijacking', 'malicious', 'registry', 'hijacked', 'adversaries']"
e454,Suspicious Image Load (taskschd.dll) from MS Office,"Identifies a suspicious image load (taskschd.dll) from Microsoft Office processes. This behavior may indicate
adversarial activity where a scheduled task is configured via Windows Component Object Model (COM). This technique can
be used to configure persistence and evade monitoring by avoiding the usage of the traditional Windows binary
(schtasks.exe) used to manage scheduled tasks.
","any where
 (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
  process.name : (""WINWORD.EXE"", ""EXCEL.EXE"", ""POWERPNT.EXE"", ""MSPUB.EXE"", ""MSACCESS.EXE"") and
  (dll.name : ""taskschd.dll"" or file.name : ""taskschd.dll"")
",low,['T1053'],{'schtasks'},147.0,"['schtasks', 'taskschd', 'tasks', 'task', 'microsoft']"
e455,Suspicious Execution via Scheduled Task,Identifies execution of a suspicious program via scheduled tasks by looking at process lineage and command line usage.,"process where event.type == ""start"" and
    /* Schedule service cmdline on Win10+ */
    process.parent.name : ""svchost.exe"" and process.parent.args : ""Schedule"" and
    /* add suspicious programs here */
    process.pe.original_file_name in
                                (
                                  ""cscript.exe"",
                                  ""wscript.exe"",
                                  ""PowerShell.EXE"",
                                  ""Cmd.Exe"",
                                  ""MSHTA.EXE"",
                                  ""RUNDLL32.EXE"",
                                  ""REGSVR32.EXE"",
                                  ""MSBuild.exe"",
                                  ""InstallUtil.exe"",
                                  ""RegAsm.exe"",
                                  ""RegSvcs.exe"",
                                  ""msxsl.exe"",
                                  ""CONTROL.EXE"",
                                  ""EXPLORER.EXE"",
                                  ""Microsoft.Workflow.Compiler.exe"",
                                  ""msiexec.exe""
                                  ) and
    /* add suspicious paths here */
    process.args : (
       ""C:\\Users\\*"",
       ""C:\\ProgramData\\*"",
       ""C:\\Windows\\Temp\\*"",
       ""C:\\Windows\\Tasks\\*"",
       ""C:\\PerfLogs\\*"",
       ""C:\\Intel\\*"",
       ""C:\\Windows\\Debug\\*"",
       ""C:\\HP\\*"") and

     not (process.name : ""cmd.exe"" and process.args : ""?:\\*.bat"" and process.working_directory : ""?:\\Windows\\System32\\"") and
     not (process.name : ""cscript.exe"" and process.args : ""?:\\Windows\\system32\\calluxxprovider.vbs"") and
     not (process.name : ""powershell.exe"" and process.args : (""-File"", ""-PSConsoleFile"") and user.id : ""S-1-5-18"") and
     not (process.name : ""msiexec.exe"" and user.id : ""S-1-5-18"")
",medium,['T1053'],"{'msbuild', 'rundll32'}",186.0,"['process', 'execution', 'suspicious', 'program', 'tasks']"
e456,Suspicious ImagePath Service Creation,"Identifies the creation of a suspicious ImagePath value. This could be an indication of an adversary attempting to
stealthily persist or escalate privileges through abnormal service creation.
","registry where registry.path : ""HKLM\\SYSTEM\\ControlSet*\\Services\\*\\ImagePath"" and
 /* add suspicious registry ImagePath values here */
 registry.data.strings : (""%COMSPEC%*"", ""*\\.\\pipe\\*"")
",high,['T1543'],,46.0,"['imagepath', 'suspicious', 'service', 'adversary', 'abnormal']"
e457,System Shells via Services,"Windows services typically run as SYSTEM and can be used as a privilege escalation opportunity. Malware or penetration
testers may run a shell as a service to gain SYSTEM permissions.
","process where event.type == ""start"" and
  process.parent.name : ""services.exe"" and
  process.name : (""cmd.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"") and

  /* Third party FP's */
  not process.args : ""NVDisplay.ContainerLocalSystem""
",medium,['T1543'],"{'malware', 'permission', 'privilege'}",271.0,"['services', 'privilege', 'service', 'malware', 'permissions']"
e458,Potential Persistence via Time Provider Modification,"Identifies modification of the Time Provider. Adversaries may establish persistence by registering and enabling a
malicious DLL as a time provider. Windows uses the time provider architecture to obtain accurate time stamps from other
network devices or clients in the network. Time providers are implemented in the form of a DLL file which resides in the
System32 folder. The service W32Time initiates during the startup of Windows and loads w32time.dll.
","registry where event.type:""change"" and
  registry.path:""HKLM\\SYSTEM\\*ControlSet*\\Services\\W32Time\\TimeProviders\\*"" and
  registry.data.strings:""*.dll""
",medium,['T1547'],{'dll'},272.0,"['w32time', 'dll', 'system32', 'providers', 'provider']"
e459,User Added to Privileged Group in Active Directory,"Identifies a user being added to a privileged group in Active Directory. Privileged accounts and groups in Active
Directory are those to which powerful rights, privileges, and permissions are granted that allow them to perform nearly
any action in Active Directory and on domain-joined systems.
","iam where event.action == ""added-member-to-group"" and
  group.name : (""Admin*"",
                ""Local Administrators"",
                ""Domain Admins"",
                ""Enterprise Admins"",
                ""Backup Admins"",
                ""Schema Admins"",
                ""DnsAdmins"",
                ""Exchange Organization Administrators"")
",medium,['T1098'],"{'permission', 'privilege'}",273.0,"['privileges', 'privileged', 'groups', 'permissions', 'accounts']"
e460,User Account Creation,"Identifies attempts to create new users. This is sometimes done by attackers to increase access or establish persistence
on a system or domain.
","process where event.type == ""start"" and
  process.name : (""net.exe"", ""net1.exe"") and
  not process.parent.name : ""net.exe"" and
  (process.args : ""user"" and process.args : (""/ad"", ""/add""))
",low,['T1136'],{'net.exe'},17.0,"['attackers', 'users', 'create', 'persistence', 'new']"
e462,Potential Application Shimming via Sdbinst,"The Application Shim was created to allow for backward compatibility of software as the operating system codebase
changes over time. This Windows functionality has been abused by attackers to stealthily gain persistence and arbitrary
code execution in legitimate Windows processes.
","process where event.type == ""start"" and process.name : ""sdbinst.exe""
",low,['T1546'],,274.0,"['application', 'software', 'windows', 'shim', 'codebase']"
e463,Persistence via BITS Job Notify Cmdline,"An adversary can use the Background Intelligent Transfer Service (BITS) SetNotifyCmdLine method to execute a program
that runs after a job finishes transferring data or after a job enters a specified state in order to persist on a
system.
","process where event.type == ""start"" and
  process.parent.name : ""svchost.exe"" and process.parent.args : ""BITS"" and
  not process.executable :
              (""?:\\Windows\\System32\\WerFaultSecure.exe"",
               ""?:\\Windows\\System32\\WerFault.exe"",
               ""?:\\Windows\\System32\\wermgr.exe"",
               ""?:\\WINDOWS\\system32\\directxdatabaseupdater.exe"")
",medium,['T1197'],{'bitsadmin'},27.0,"['adversary', 'program', 'transfer', 'background', 'bits']"
e464,Persistence via Hidden Run Key Detected,"Identifies a persistence mechanism that utilizes the NtSetValueKey native API to create a hidden (null terminated)
registry key. An adversary may use this method to hide from system utilities such as the Registry Editor (regedit).
","/* Registry Path ends with backslash */
registry where /* length(registry.data.strings) > 0 and */
 registry.path : (""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\"",
                  ""HKU\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\"",
                  ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\"",
                  ""HKLM\\Software\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\"",
                  ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\"",
                  ""HKU\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\"",
                  ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\"")
",high,['T1547'],"{'hidden', 'registry modification'}",29.0,"['registry', 'ntsetvaluekey', 'regedit', 'persistence', 'hidden']"
e465,Installation of Security Support Provider,"Identifies registry modifications related to the Windows Security Support Provider (SSP) configuration. Adversaries may
abuse this to establish persistence in an environment.
","registry where
   registry.path : (""HKLM\\SYSTEM\\*ControlSet*\\Control\\Lsa\\Security Packages*"",
                    ""HKLM\\SYSTEM\\*ControlSet*\\Control\\Lsa\\OSConfig\\Security Packages*"") and
   not process.executable : (""C:\\Windows\\System32\\msiexec.exe"", ""C:\\Windows\\SysWOW64\\msiexec.exe"")
",medium,['T1547'],{'registry modification'},29.0,"['registry', 'ssp', 'security', 'provider', 'adversaries']"
e466,Persistence via TelemetryController Scheduled Task Hijack,"Detects the successful hijack of Microsoft Compatibility Appraiser scheduled task to establish persistence with an
integrity level of system.
","process where event.type == ""start"" and
  process.parent.name : ""CompatTelRunner.exe"" and process.args : ""-cv*"" and
  not process.name : (""conhost.exe"",
                      ""DeviceCensus.exe"",
                      ""CompatTelRunner.exe"",
                      ""DismHost.exe"",
                      ""rundll32.exe"",
                      ""powershell.exe"")
",high,['T1053'],{'rundll32'},275.0,"['appraiser', 'persistence', 'integrity', 'microsoft', 'compatibility']"
e467,Persistence via Update Orchestrator Service Hijack,"Identifies potential hijacking of the Microsoft Update Orchestrator Service to establish persistence with an integrity
level of SYSTEM.
","process where event.type == ""start"" and
  process.parent.executable : ""C:\\Windows\\System32\\svchost.exe"" and
  process.parent.args : ""UsoSvc"" and
  not process.executable :
          (""?:\\ProgramData\\Microsoft\\Windows\\UUS\\Packages\\*\\amd64\\MoUsoCoreWorker.exe"",
          ""?:\\Windows\\System32\\UsoClient.exe"",
          ""?:\\Windows\\System32\\MusNotification.exe"",
          ""?:\\Windows\\System32\\MusNotificationUx.exe"",
          ""?:\\Windows\\System32\\MusNotifyIcon.exe"",
          ""?:\\Windows\\System32\\WerFault.exe"",
          ""?:\\Windows\\System32\\WerMgr.exe"",
          ""?:\\Windows\\UUS\\amd64\\MoUsoCoreWorker.exe"",
          ""?:\\Windows\\System32\\MoUsoCoreWorker.exe"",
          ""?:\\Windows\\UUS\\amd64\\UsoCoreWorker.exe"",
          ""?:\\Windows\\System32\\UsoCoreWorker.exe"",
          ""?:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\OfficeC2RClient.exe"") and
  not process.name : (""MoUsoCoreWorker.exe"", ""OfficeC2RClient.exe"")
",high,['T1543'],"{'leverage', 'cve-2020-1313', 'stop'}",,"['orchestrator', 'persistence', 'integrity', 'hijacking', 'service']"
e468,Persistence via WMI Event Subscription,"An adversary can use Windows Management Instrumentation (WMI) to install event filters, providers, consumers, and
bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an
event and execute arbitrary code when that event occurs, providing persistence on a system.
","process where event.type == ""start"" and
  (process.name : ""wmic.exe"" or process.pe.original_file_name == ""wmic.exe"") and
  process.args : ""create"" and
  process.args : (""ActiveScriptEventConsumer"", ""CommandLineEventConsumer"")
",low,['T1546'],{'wmi'},23.0,"['wmi', 'adversary', 'adversaries', 'event', 'windows']"
e469,Persistence via WMI Standard Registry Provider,"Identifies use of the Windows Management Instrumentation StdRegProv (registry provider) to modify commonly abused
registry locations for persistence.
","registry where
 registry.data.strings != null and process.name : ""WmiPrvSe.exe"" and
 registry.path : (
                  ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\*"",
                  ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\*"",
                  ""HKLM\\Software\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\*"",
                  ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\*"",
                  ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\*"",
                  ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*"",
                  ""HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\*"",
                  ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*"",
                  ""HKEY_USERS\\*\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\*"",
                  ""HKLM\\SYSTEM\\*ControlSet*\\Services\\*\\ServiceDLL"",
                  ""HKLM\\SYSTEM\\*ControlSet*\\Services\\*\\ImagePath"",
                  ""HKEY_USERS\\*\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell\\*"",
                  ""HKEY_USERS\\*\\Environment\\UserInitMprLogonScript"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Shell"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Logoff\\Script"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Logon\\Script"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Shutdown\\Script"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\Scripts\\Startup\\Script"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Ctf\\LangBarAddin\\*\\FilePath"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions\\*\\Exec"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Internet Explorer\\Extensions\\*\\Script"",
                  ""HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Command Processor\\Autorun""
                  )
",high,"['T1547', 'T1543', 'T1047']","{'registry modification', 'wmi'}",29.0,"['registry', 'persistence', 'instrumentation', 'windows', 'management']"
e470,Web Shell Detection: Script Process Child of Common Web Processes,"Identifies suspicious commands executed via a web server, which may suggest a vulnerability and remote shell access.","process where event.type == ""start"" and
  process.parent.name : (""w3wp.exe"", ""httpd.exe"", ""nginx.exe"", ""php.exe"", ""php-cgi.exe"", ""tomcat.exe"") and
  process.name : (""cmd.exe"", ""cscript.exe"", ""powershell.exe"", ""pwsh.exe"", ""powershell_ise.exe"", ""wmic.exe"", ""wscript.exe"")
",high,"['T1505', 'T1190']","{'shell', 'stop'}",186.0,"['vulnerability', 'shell', 'suspicious', 'commands', 'server']"
e471,Process Creation via Secondary Logon,"Identifies process creation with alternate credentials. Adversaries may create a new process with a different token to
escalate privileges and bypass access controls.
","sequence by host.id with maxspan=1m

[authentication where event.action:""logged-in"" and
 event.outcome == ""success"" and user.id:""S-1-5-21-*"" and

 /* seclogon service */
 process.name == ""svchost.exe"" and 
 winlog.event_data.LogonProcessName : ""seclogo*"" and source.ip == ""::1"" ] by winlog.event_data.TargetLogonId

[process where event.type == ""start""] by winlog.event_data.TargetLogonId
",medium,['T1134'],"{'winlog', 'privilege'}",,"['privileges', 'process', 'credentials', 'token', 'adversaries']"
e472,Disabling User Account Control via Registry Modification,"User Account Control (UAC) can help mitigate the impact of malware on Windows hosts. With UAC, apps and tasks always run
in the security context of a non-administrator account, unless an administrator specifically authorizes
administrator-level access to the system. This rule identifies registry value changes to bypass User Access Control
(UAC) protection.
","registry where event.type == ""change"" and
  registry.path :
    (
      ""HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin"",
      ""HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop""
    ) and
  registry.data.strings : (""0"", ""0x00000000"")
",medium,['T1548'],"{'registry modification', 'page', 'uac', 'stop', 'malware'}",276.0,"['uac', 'malware', 'administrator', 'registry', 'security']"
e473,Startup/Logon Script added to Group Policy Object,"Detects the modification of Group Policy Objects (GPO) to add a startup/logon script to users or computer objects.
","(
 event.code:5136 and winlog.event_data.AttributeLDAPDisplayName:(gPCMachineExtensionNames or gPCUserExtensionNames) and
   winlog.event_data.AttributeValue:(*42B5FAAE-6536-11D2-AE5A-0000F87571E3* and
                                      (*40B66650-4972-11D1-A7CA-0000F87571E3* or *40B6664F-4972-11D1-A7CA-0000F87571E3*))
)
or
(
 event.code:5145 and winlog.event_data.ShareName:\\\\*\\SYSVOL and
   winlog.event_data.RelativeTargetName:(*\\scripts.ini or *\\psscripts.ini) and
   (message:WriteData or winlog.event_data.AccessList:*%%4417*)
)
",medium,"['T1547', 'T1484']",{'winlog'},,"['gpo', 'startup', 'logon', 'policy', 'script']"
e474,Group Policy Abuse for Privilege Addition,"Detects the first occurrence of a modification to Group Policy Object Attributes to add privileges to user accounts or
use them to add users as local admins.
","event.code: ""5136"" and winlog.event_data.AttributeLDAPDisplayName:""gPCMachineExtensionNames"" and
winlog.event_data.AttributeValue:(*827D319E-6EAC-11D2-A4EA-00C04F79F83A* and *803E14A0-B4FB-11D0-A0D0-00A0C90F574B*)
",high,['T1484'],"{'winlog', 'privilege'}",,"['privileges', 'admins', 'attributes', 'policy', 'users']"
e475,Scheduled Task Execution at Scale via GPO,"Detects the modification of Group Policy Object attributes to execute a scheduled task in the objects controlled by the GPO.
","(event.code: ""5136"" and winlog.event_data.AttributeLDAPDisplayName:(""gPCMachineExtensionNames"" or ""gPCUserExtensionNames"") and
   winlog.event_data.AttributeValue:(*CAB54552-DEEA-4691-817E-ED4A4D1AFC72* and *AADCED64-746C-4633-A97C-D61349046527*))
or
(event.code: ""5145"" and winlog.event_data.ShareName: ""\\\\*\\SYSVOL"" and winlog.event_data.RelativeTargetName: *ScheduledTasks.xml and
  (message: WriteData or winlog.event_data.AccessList: *%%4417*))
",medium,"['T1053', 'T1484']",{'winlog'},,"['gpo', 'scheduled', 'policy', 'task', 'detects']"
e476,Potential Privilege Escalation via InstallerFileTakeOver,"Identifies a potential exploitation of InstallerTakeOver (CVE-2021-41379) default PoC execution. Successful exploitation
allows an unprivileged user to escalate privileges to SYSTEM.
","/* This rule is compatible with both Sysmon and Elastic Endpoint */

process where event.type == ""start"" and
    (?process.Ext.token.integrity_level_name : ""System"" or
    ?winlog.event_data.IntegrityLevel : ""System"") and
    (
      (process.name : ""elevation_service.exe"" and
       not process.pe.original_file_name == ""elevation_service.exe"") or

      (process.parent.name : ""elevation_service.exe"" and
       process.name : (""rundll32.exe"", ""cmd.exe"", ""powershell.exe""))
    )
",high,['T1068'],"{'cve-2021-41379', 'stop', 'winlog', 'rundll32', 'privilege'}",,"['installertakeover', 'poc', 'execution', 'privileges', 'cve']"
e477,Service Creation via Local Kerberos Authentication,"Identifies a suspicious local successful logon event where the Logon Package is Kerberos, the remote address is set to
localhost, followed by a sevice creation from the same LogonId. This may indicate an attempt to leverage a Kerberos
relay attack variant that can be used to elevate privilege locally from a domain joined user to local System privileges.
","sequence by host.id with maxspan=5m
 [authentication where

  /* event 4624 need to be logged */
  event.action == ""logged-in"" and event.outcome == ""success"" and

  /* authenticate locally using relayed kerberos Ticket */
  winlog.event_data.AuthenticationPackageName :""Kerberos"" and winlog.logon.type == ""Network"" and
  cidrmatch(source.ip, ""127.0.0.0/8"", ""::1"") and source.port > 0] by winlog.event_data.TargetLogonId

  [any where
   /* event 4697 need to be logged */
   event.action : ""service-installed""] by winlog.event_data.SubjectLogonId
",high,"['T1558', 'T1543']","{'kerberos', 'winlog', 'leverage'}",,"['logonid', 'logon', 'kerberos', 'localhost', 'attack']"
e478,Potential LSA Authentication Package Abuse,"Adversaries can use the autostart mechanism provided by the Local Security Authority (LSA) authentication packages for
privilege escalation or persistence by placing a reference to a binary in the Windows registry. The binary will then be
executed by SYSTEM when the authentication packages are loaded.
","registry where event.type == ""change"" and
  registry.path : ""HKLM\\SYSTEM\\*ControlSet*\\Control\\Lsa\\Authentication Packages"" and
  /* exclude SYSTEM SID - look for changes by non-SYSTEM user */
  not user.id : ""S-1-5-18""
",medium,['T1547'],{'registry modification'},246.0,"['authentication', 'registry', 'autostart', 'adversaries', 'security']"
e479,Privilege Escalation via Named Pipe Impersonation,"Identifies a privilege escalation attempt via named pipe impersonation. An adversary may abuse this technique by
utilizing a framework such Metasploit's meterpreter getsystem command.
","process where event.type == ""start"" and
 process.pe.original_file_name in (""Cmd.Exe"", ""PowerShell.EXE"") and
 process.args : ""echo"" and process.args : "">"" and process.args : ""\\\\.\\pipe\\*""
",high,['T1134'],"{'meterpreter', 'privilege'}",277.0,"['impersonation', 'metasploit', 'privilege', 'pipe', 'escalation']"
e480,Suspicious DLL Loaded for Persistence or Privilege Escalation,"Identifies the loading of a non Microsoft signed DLL that is missing on a default Windows install (phantom DLL) or one
that can be loaded from a different location by a native Windows process. This may be abused to persist or elevate
privileges via privileged file write vulnerabilities.
","any where
 (event.category == ""library"" or (event.category == ""process"" and event.action : ""Image loaded*"")) and
 (
  /* compatible with Elastic Endpoint Library Events */
  (dll.name : (""wlbsctrl.dll"", ""wbemcomn.dll"", ""WptsExtensions.dll"", ""Tsmsisrv.dll"", ""TSVIPSrv.dll"", ""Msfte.dll"",
               ""wow64log.dll"", ""WindowsCoreDeviceInfo.dll"", ""Ualapi.dll"", ""wlanhlp.dll"", ""phoneinfo.dll"", ""EdgeGdi.dll"",
               ""cdpsgshims.dll"", ""windowsperformancerecordercontrol.dll"", ""diagtrack_win.dll"")
   and (dll.code_signature.trusted == false or dll.code_signature.exists == false)) or

  /* compatible with Sysmon EventID 7 - Image Load */
  (file.name : (""wlbsctrl.dll"", ""wbemcomn.dll"", ""WptsExtensions.dll"", ""Tsmsisrv.dll"", ""TSVIPSrv.dll"", ""Msfte.dll"",
               ""wow64log.dll"", ""WindowsCoreDeviceInfo.dll"", ""Ualapi.dll"", ""wlanhlp.dll"", ""phoneinfo.dll"", ""EdgeGdi.dll"",
               ""cdpsgshims.dll"", ""windowsperformancerecordercontrol.dll"", ""diagtrack_win.dll"")
   and not file.code_signature.status == ""Valid"")
  )
",high,['T1574'],"{'dll', 'stop', 'privilege'}",57.0,"['dll', 'microsoft', 'windows', 'privileged', 'loading']"
e481,Potential Port Monitor or Print Processor Registration Abuse,"Identifies port monitor and print processor registry modifications. Adversaries may abuse port monitor and print
processors to run malicious DLLs during system boot that will be executed as SYSTEM for privilege escalation and/or
persistence, if permissions allow writing a fully-qualified pathname for that DLL.
","registry where event.type in (""creation"", ""change"") and
  registry.path : (""HKLM\\SYSTEM\\*ControlSet*\\Control\\Print\\Monitors\\*"",
    ""HKLM\\SYSTEM\\*ControlSet*\\Control\\Print\\Environments\\Windows*\\Print Processors\\*"") and
  registry.data.strings : ""*.dll"" and
  /* exclude SYSTEM SID - look for changes by non-SYSTEM user */
  not user.id : ""S-1-5-18""
",medium,['T1547'],"{'dll', 'registry modification', 'winnti'}",57.0,"['dlls', 'dll', 'port', 'malicious', 'registry']"
e482,PowerShell Script with Token Impersonation Capabilities,"Detects scripts that contain PowerShell functions, structures, or Windows API functions related to token
impersonation/theft. Attackers may duplicate then impersonate another user's token to escalate privileges and bypass
access controls.
","event.category:process and
  powershell.file.script_block_text:(
    ""Invoke-TokenManipulation"" or
    ""ImpersonateNamedPipeClient"" or
    ""NtImpersonateThread"" or
    (
      ""STARTUPINFOEX"" and
      ""UpdateProcThreadAttribute""
    ) or
    (
      ""AdjustTokenPrivileges"" and
      ""SeDebugPrivilege""
    ) or
    (
      (""DuplicateToken"" or
      ""DuplicateTokenEx"") and
      (""SetThreadToken"" or
      ""ImpersonateLoggedOnUser"" or 
	  ""CreateProcessWithTokenW"" or 
	  ""CreatePRocessAsUserW"" or 
	  ""CreateProcessAsUserA"")
    ) 
  )
",medium,"['T1106', 'T1059', 'T1134']","{'ps1', 'powershell', 'empire', 'powersploit'}",,"['powershell', 'impersonation', 'scripts', 'impersonate', 'token']"
e483,Suspicious Print Spooler Point and Print DLL,"Detects attempts to exploit a privilege escalation vulnerability (CVE-2020-1030) related to the print spooler service.
Exploitation involves chaining multiple primitives to load an arbitrary DLL into the print spooler process running as
SYSTEM.
","sequence by host.id with maxspan=30s
[registry where
 registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\*\\SpoolDirectory"" and
 registry.data.strings : ""C:\\Windows\\System32\\spool\\drivers\\x64\\4""]
[registry where
 registry.path : ""HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Print\\Printers\\*\\CopyFiles\\Payload\\Module"" and
 registry.data.strings : ""C:\\Windows\\System32\\spool\\drivers\\x64\\4\\*""]
",high,['T1068'],"{'dll', 'cve-2020-1030'}",,"['vulnerability', 'exploit', 'spooler', 'dll', 'cve']"
e484,Suspicious PrintSpooler Service Executable File Creation,"Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service. For more
information refer to the following CVE's - CVE-2020-1048, CVE-2020-1337 and CVE-2020-1300 and verify that the impacted
system is patched.
","file where event.type != ""deletion"" and process.name : ""spoolsv.exe"" and
  file.extension : (""exe"", ""dll"") and
  not file.path : (""?:\\Windows\\System32\\spool\\*"", ""?:\\Windows\\Temp\\*"", ""?:\\Users\\*"")
",high,['T1068'],{'cve-2020-1048'},,"['spooler', 'vulnerabilities', 'cve', 'print', 'exploit']"
e485,Suspicious Print Spooler File Deletion,"Detects deletion of print driver files by an unusual process. This may indicate a clean up attempt post successful
privilege escalation via Print Spooler service related vulnerabilities.
","file where event.type : ""deletion"" and
 not process.name : (""spoolsv.exe"", ""dllhost.exe"", ""explorer.exe"") and
 file.path : ""?:\\Windows\\System32\\spool\\drivers\\x64\\3\\*.dll""
",medium,['T1068'],"{'driver', 'privilege', 'cve-2021-34527'}",,"['print', 'driver', 'spooler', 'deletion', 'privilege']"
e486,Suspicious Print Spooler SPL File Created,"Detects attempts to exploit privilege escalation vulnerabilities related to the Print Spooler service including
CVE-2020-1048 and CVE-2020-1337.
","file where event.type != ""deletion"" and
  file.extension : ""spl"" and
  file.path : ""?:\\Windows\\System32\\spool\\PRINTERS\\*"" and
  not process.name : (""spoolsv.exe"",
                      ""printfilterpipelinesvc.exe"",
                      ""PrintIsolationHost.exe"",
                      ""splwow64.exe"",
                      ""msiexec.exe"",
                      ""poqexec.exe"")
",high,['T1068'],"{'stop', 'cve-2020-1337'}",,"['spooler', 'vulnerabilities', 'exploit', 'cve', 'print']"
e487,Privilege Escalation via Windir Environment Variable,"Identifies a privilege escalation attempt via a rogue Windows directory (Windir) environment variable. This is a known
primitive that is often combined with other vulnerabilities to elevate privileges.
","registry where registry.path : (""HKEY_USERS\\*\\Environment\\windir"", ""HKEY_USERS\\*\\Environment\\systemroot"") and
 not registry.data.strings : (""C:\\windows"", ""%SystemRoot%"")
",high,['T1574'],"{'interception', 'rogue', 'privilege'}",,"['windir', 'vulnerabilities', 'privileges', 'windows', 'privilege']"
e488,Potential Privileged Escalation via SamAccountName Spoofing,"Identifies a suspicious computer account name rename event, which may indicate an attempt to exploit CVE-2021-42278 to
elevate privileges from a standard domain user to a user with domain admin privileges. CVE-2021-42278 is a security
vulnerability that allows potential attackers to impersonate a domain controller via samAccountName attribute spoofing.
","iam where event.action == ""renamed-user-account"" and
  /* machine account name renamed to user like account name */
  winlog.event_data.OldTargetUserName : ""*$"" and not winlog.event_data.NewTargetUserName : ""*$""
",high,"['T1098', 'T1078']","{'winlog', 'cve-2021-42278'}",,"['cve', 'vulnerability', 'samaccountname', 'exploit', 'rename']"
e489,Remote Computer Account DnsHostName Update,"Identifies the remote update to a computer account's DnsHostName attribute. If the new value set is a valid domain
controller DNS hostname and the subject computer name is not a domain controller, then it's highly likely a preparation
step to exploit CVE-2022-26923 in an attempt to elevate privileges from a standard domain user to domain admin privileges.
","sequence by host.id with maxspan=5m

  [authentication where event.action == ""logged-in"" and
   winlog.logon.type == ""Network"" and event.outcome == ""success"" and
   not user.name == ""ANONYMOUS LOGON"" and not winlog.event_data.SubjectUserName : ""*$"" and
   not user.domain == ""NT AUTHORITY"" and source.ip != ""127.0.0.1"" and source.ip !=""::1""] by winlog.event_data.TargetLogonId

  [iam where event.action == ""changed-computer-account"" and

   /* if DnsHostName value equal a DC DNS hostname then it's highly suspicious */
    winlog.event_data.DnsHostName : ""??*""] by winlog.event_data.SubjectLogonId
",high,"['T1078', 'T1068']","{'dns', 'winlog', 'cve-2022-26923'}",,"['cve', 'dnshostname', 'hostname', 'domain', 'dns']"
e490,UAC Bypass Attempt with IEditionUpgradeManager Elevated COM Interface,"Identifies attempts to bypass User Account Control (UAC) by abusing an elevated COM Interface to launch a rogue Windows
ClipUp program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions.
","process where event.type == ""start"" and process.name : ""Clipup.exe"" and
  not process.executable : ""C:\\Windows\\System32\\ClipUp.exe"" and process.parent.name : ""dllhost.exe"" and
  /* CLSID of the Elevated COM Interface IEditionUpgradeManager */
  process.parent.args : ""/Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41}""
",high,['T1548'],"{'uac', 'permission', 'rogue', 'uacme'}",278.0,"['uac', 'abusing', 'permissions', 'clipup', 'attackers']"
e491,UAC Bypass Attempt via Elevated COM Internet Explorer Add-On Installer,"Identifies User Account Control (UAC) bypass attempts by abusing an elevated COM Interface to launch a malicious
program. Attackers may attempt to bypass UAC to stealthily execute code with elevated permissions.
","process where event.type == ""start"" and
 process.executable : ""C:\\*\\AppData\\*\\Temp\\IDC*.tmp\\*.exe"" and
 process.parent.name : ""ieinstal.exe"" and process.parent.args : ""-Embedding""

 /* uncomment once in winlogbeat */
 /* and not (process.code_signature.subject_name == ""Microsoft Corporation"" and process.code_signature.trusted == true) */
",medium,['T1548'],"{'uac', 'permission'}",278.0,"['uac', 'abusing', 'permissions', 'attackers', 'malicious']"
e492,UAC Bypass via ICMLuaUtil Elevated COM Interface,"Identifies User Account Control (UAC) bypass attempts via the ICMLuaUtil Elevated COM interface. Attackers may attempt
to bypass UAC to stealthily execute code with elevated permissions.
","process where event.type == ""start"" and
 process.parent.name == ""dllhost.exe"" and
 process.parent.args in (""/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}"", ""/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}"") and
 process.pe.original_file_name != ""WerFault.exe""
",high,['T1548'],"{'uac', 'permission'}",278.0,"['uac', 'permissions', 'attackers', 'icmluautil', 'elevated']"
e493,UAC Bypass via DiskCleanup Scheduled Task Hijack,"Identifies User Account Control (UAC) bypass via hijacking DiskCleanup Scheduled Task. Attackers bypass UAC to
stealthily execute code with elevated permissions.
","process where event.type == ""start"" and
 process.args : ""/autoclean"" and process.args : ""/d"" and
 not process.executable : (""C:\\Windows\\System32\\cleanmgr.exe"",
                           ""C:\\Windows\\SysWOW64\\cleanmgr.exe"",
                           ""C:\\Windows\\System32\\taskhostw.exe"")
",medium,['T1548'],"{'uac', 'permission'}",278.0,"['diskcleanup', 'uac', 'permissions', 'attackers', 'control']"
e494,UAC Bypass Attempt via Privileged IFileOperation COM Interface,"Identifies attempts to bypass User Account Control (UAC) via DLL side-loading. Attackers may attempt to bypass UAC to
stealthily execute code with elevated permissions.
","file where event.type : ""change"" and process.name : ""dllhost.exe"" and
  /* Known modules names side loaded into process running with high or system integrity level for UAC Bypass, update here for new modules */
  file.name : (""wow64log.dll"", ""comctl32.dll"", ""DismCore.dll"", ""OskSupport.dll"", ""duser.dll"", ""Accessibility.ni.dll"") and
  /* has no impact on rule logic just to avoid OS install related FPs */
  not file.path : (""C:\\Windows\\SoftwareDistribution\\*"", ""C:\\Windows\\WinSxS\\*"")
",high,['T1548'],"{'dll', 'permission', 'uacme', 'uac'}",278.0,"['dll', 'uac', 'permissions', 'attackers', 'bypass']"
e495,Bypass UAC via Event Viewer,"Identifies User Account Control (UAC) bypass via eventvwr.exe. Attackers bypass UAC to stealthily execute code with
elevated permissions.
","process where event.type == ""start"" and
  process.parent.name : ""eventvwr.exe"" and
  not process.executable :
            (""?:\\Windows\\SysWOW64\\mmc.exe"",
             ""?:\\Windows\\System32\\mmc.exe"",
             ""?:\\Windows\\SysWOW64\\WerFault.exe"",
             ""?:\\Windows\\System32\\WerFault.exe"")
",high,['T1548'],"{'uac', 'permission', 'stop', 'page'}",278.0,"['eventvwr', 'uac', 'permissions', 'attackers', 'elevated']"
e496,UAC Bypass Attempt via Windows Directory Masquerading,"Identifies an attempt to bypass User Account Control (UAC) by masquerading as a Microsoft trusted Windows directory.
Attackers may bypass UAC to stealthily execute code with elevated permissions.
","process where event.type == ""start"" and
  process.args : (""C:\\Windows \\system32\\*.exe"", ""C:\\Windows \\SysWOW64\\*.exe"")
",high,['T1548'],"{'uac', 'permission', 'stop', 'page'}",278.0,"['uac', 'microsoft', 'permissions', 'attackers', 'windows']"
e497,UAC Bypass via Windows Firewall Snap-In Hijack,"Identifies attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows
Firewall snap-in. Attackers bypass UAC to stealthily execute code with elevated permissions.
","process where event.type == ""start"" and
 process.parent.name == ""mmc.exe"" and
 /* process.Ext.token.integrity_level_name == ""high"" can be added in future for tuning */
 /* args of the Windows Firewall SnapIn */
  process.parent.args == ""WF.msc"" and process.name != ""WerFault.exe""
",medium,['T1548'],"{'uac', 'stop', 'page'}",278.0,"['uac', 'mmc', 'microsoft', 'attackers', 'firewall']"
e499,Unusual Parent-Child Relationship,"Identifies Windows programs run from unexpected parent processes. This could indicate masquerading or other strange
activity on a system.
","process where event.type == ""start"" and
process.parent.name != null and
 (
   /* suspicious parent processes */
   (process.name:""autochk.exe"" and not process.parent.name:""smss.exe"") or
   (process.name:(""fontdrvhost.exe"", ""dwm.exe"") and not process.parent.name:(""wininit.exe"", ""winlogon.exe"")) or
   (process.name:(""consent.exe"", ""RuntimeBroker.exe"", ""TiWorker.exe"") and not process.parent.name:""svchost.exe"") or
   (process.name:""SearchIndexer.exe"" and not process.parent.name:""services.exe"") or
   (process.name:""SearchProtocolHost.exe"" and not process.parent.name:(""SearchIndexer.exe"", ""dllhost.exe"")) or
   (process.name:""dllhost.exe"" and not process.parent.name:(""services.exe"", ""svchost.exe"")) or
   (process.name:""smss.exe"" and not process.parent.name:(""System"", ""smss.exe"")) or
   (process.name:""csrss.exe"" and not process.parent.name:(""smss.exe"", ""svchost.exe"")) or
   (process.name:""wininit.exe"" and not process.parent.name:""smss.exe"") or
   (process.name:""winlogon.exe"" and not process.parent.name:""smss.exe"") or
   (process.name:(""lsass.exe"", ""LsaIso.exe"") and not process.parent.name:""wininit.exe"") or
   (process.name:""LogonUI.exe"" and not process.parent.name:(""wininit.exe"", ""winlogon.exe"")) or
   (process.name:""services.exe"" and not process.parent.name:""wininit.exe"") or
   (process.name:""svchost.exe"" and not process.parent.name:(""MsMpEng.exe"", ""services.exe"")) or
   (process.name:""spoolsv.exe"" and not process.parent.name:""services.exe"") or
   (process.name:""taskhost.exe"" and not process.parent.name:(""services.exe"", ""svchost.exe"")) or
   (process.name:""taskhostw.exe"" and not process.parent.name:(""services.exe"", ""svchost.exe"")) or
   (process.name:""userinit.exe"" and not process.parent.name:(""dwm.exe"", ""winlogon.exe"")) or
   (process.name:(""wmiprvse.exe"", ""wsmprovhost.exe"", ""winrshost.exe"") and not process.parent.name:""svchost.exe"") or
   /* suspicious child processes */
   (process.parent.name:(""SearchProtocolHost.exe"", ""taskhost.exe"", ""csrss.exe"") and not process.name:(""werfault.exe"", ""wermgr.exe"", ""WerFaultSecure.exe"")) or
   (process.parent.name:""autochk.exe"" and not process.name:(""chkdsk.exe"", ""doskey.exe"", ""WerFault.exe"")) or
   (process.parent.name:""smss.exe"" and not process.name:(""autochk.exe"", ""smss.exe"", ""csrss.exe"", ""wininit.exe"", ""winlogon.exe"", ""setupcl.exe"", ""WerFault.exe"")) or
   (process.parent.name:""wermgr.exe"" and not process.name:(""WerFaultSecure.exe"", ""wermgr.exe"", ""WerFault.exe"")) or
   (process.parent.name:""conhost.exe"" and not process.name:(""mscorsvw.exe"", ""wermgr.exe"", ""WerFault.exe"", ""WerFaultSecure.exe""))
  )
",medium,['T1055'],{'stop'},60.0,"['processes', 'windows', 'programs', 'unexpected', 'activity']"
e500,Unusual Print Spooler Child Process,"Detects unusual Print Spooler service (spoolsv.exe) child processes. This may indicate an attempt to exploit privilege
escalation vulnerabilities related to the Printing Service on Windows.
","process where event.type == ""start"" and
 process.parent.name : ""spoolsv.exe"" and
 (?process.Ext.token.integrity_level_name : ""System"" or
 ?winlog.event_data.IntegrityLevel : ""System"") and

 /* exclusions for FP control below */
 not process.name : (""splwow64.exe"", ""PDFCreator.exe"", ""acrodist.exe"", ""spoolsv.exe"", ""msiexec.exe"", ""route.exe"", ""WerFault.exe"") and
 not process.command_line : ""*\\WINDOWS\\system32\\spool\\DRIVERS*"" and
 not (process.name : ""net.exe"" and process.command_line : (""*stop*"", ""*start*"")) and
 not (process.name : (""cmd.exe"", ""powershell.exe"") and process.command_line : (""*.spl*"", ""*\\program files*"", ""*route add*"")) and
 not (process.name : ""netsh.exe"" and process.command_line : (""*add portopening*"", ""*rule name*"")) and
 not (process.name : ""regsvr32.exe"" and process.command_line : ""*PrintConfig.dll*"")
",medium,['T1068'],"{'netsh', 'net.exe', 'exe', 'stop', 'winlog', 'route', 'cve-2021-34527'}",,"['spoolsv', 'printing', 'print', 'spooler', 'exe']"
e501,Unusual Service Host Child Process - Childless Service,"Identifies unusual child processes of Service Host (svchost.exe) that traditionally do not spawn any child processes.
This may indicate a code injection or an equivalent form of exploitation.
","process where event.type == ""start"" and
     process.parent.name : ""svchost.exe"" and

     /* based on svchost service arguments -s svcname where the service is known to be childless */

    process.parent.args : (""WdiSystemHost"",""LicenseManager"",
      ""StorSvc"",""CDPSvc"",""cdbhsvc"",""BthAvctpSvc"",""SstpSvc"",""WdiServiceHost"",
      ""imgsvc"",""TrkWks"",""WpnService"",""IKEEXT"",""PolicyAgent"",""CryptSvc"",
      ""netprofm"",""ProfSvc"",""StateRepository"",""camsvc"",""LanmanWorkstation"",
      ""NlaSvc"",""EventLog"",""hidserv"",""DisplayEnhancementService"",""ShellHWDetection"",
      ""AppHostSvc"",""fhsvc"",""CscService"",""PushToInstall"") and

      /* unknown FPs can be added here */

     not process.name : (""WerFault.exe"",""WerFaultSecure.exe"",""wermgr.exe"") and
     not (process.executable : ""?:\\Windows\\System32\\RelPost.exe"" and process.parent.args : ""WdiSystemHost"") and
     not (process.name : ""rundll32.exe"" and
          process.args : ""?:\\WINDOWS\\System32\\winethc.dll,ForceProxyDetectionOnNextRun"" and process.parent.args : ""WdiServiceHost"") and
     not (process.executable : (""?:\\Program Files\\*"", ""?:\\Program Files (x86)\\*"", ""?:\\Windows\\System32\\Kodak\\kds_i4x50\\lib\\lexexe.exe"") and
          process.parent.args : ""imgsvc"")
",medium,['T1055'],{'rundll32'},279.0,"['svchost', 'processes', 'service', 'exploitation', 'spawn']"
e502,Privilege Escalation via Rogue Named Pipe Impersonation,"Identifies a privilege escalation attempt via rogue named pipe impersonation. An adversary may abuse this technique by
masquerading as a known named pipe and manipulating a privileged process to connect to it.
","file where event.action : ""Pipe Created*"" and
 /* normal sysmon named pipe creation events truncate the pipe keyword */
  file.name : ""\\*\\Pipe\\*""
",high,['T1134'],"{'rogue', 'privilege'}",,"['pipe', 'impersonation', 'masquerading', 'privilege', 'privileged']"
e503,Windows Service Installed via an Unusual Client,"Identifies the creation of a Windows service by an unusual client process. Services may be created with administrator
privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from
administrator to SYSTEM.
","event.action:""service-installed""  and (winlog.event_data.ClientProcessId:""0"" or winlog.event_data.ParentProcessId:""0"")
",high,['T1543'],"{'winlog', 'privilege'}",,"['services', 'service', 'privileges', 'administrator', 'process']"
s0,Detect Risky SPL using Pretrained ML Model,"The following analytic uses a pretrained machine learning text classifier to detect potentially risky commands. The model is trained independently and then the model file is packaged within ESCU for usage. A command is deemed risky based on the presence of certain trigger keywords, along with the context and the role of the user (please see references). The model uses custom features to predict whether a SPL is risky using text classification. The model takes as input the command text, user and search type and outputs a risk score between [0,1]. A high score indicates higher likelihood of a command being risky. This model is on-prem only.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Splunk_Audit.Search_Activity where Search_Activity.search_type=adhoc Search_Activity.user!=splunk-system-user by Search_Activity.search Search_Activity.user Search_Activity.search_type | eval spl_text = 'Search_Activity.search'. "" "" .'Search_Activity.user'. "" "" .'Search_Activity.search_type'| dedup spl_text | apply risky_spl_pre_trained_model | where risk_score > 0.5 | `drop_dm_object_name(Search_Activity)` | table search, user, search_type, risk_score | `detect_risky_spl_using_pretrained_ml_model_filter`",50,['T1059'],{'cve-2022-32154'},,"['risk', 'classifier', 'classification', 'trigger', 'text']"
s1,Path traversal SPL injection,"On May 3rd, 2022, Splunk published a security advisory for a Path traversal in search parameter that can potentiall allow SPL injection. An attacker can cause the application to load data from incorrect endpoints, urls leading to outcomes such as running arbitrary SPL queries."," `path_traversal_spl_injection` | search ""\/..\/..\/..\/..\/..\/..\/..\/..\/..\/""  | stats count by status clientip method uri_path uri_query | `path_traversal_spl_injection_filter`",50,['T1083'],{'cve-2022-26889'},,"['splunk', 'spl', 'potentiall', 'path', 'endpoints']"
s2,Splunk Command and Scripting Interpreter Delete Usage,"The following analytic identifies the use of the risky command - Delete - that may be utilized in Splunk to delete some or all data queried for. In order to use Delete in Splunk, one must be assigned the role. This is typically not used and should generate an anomaly if it is used.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Splunk_Audit.Search_Activity where Search_Activity.search IN (""*| delete*"") Search_Activity.search_type=adhoc Search_Activity.user!=splunk-system-user by Search_Activity.search Search_Activity.info Search_Activity.total_run_time Search_Activity.user Search_Activity.search_type | `drop_dm_object_name(Search_Activity)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `splunk_command_and_scripting_interpreter_delete_usage_filter`",90,['T1059'],{'cve-2022-32154'},,"['splunk', 'delete', 'command', 'role', 'risky']"
s3,Splunk Command and Scripting Interpreter Risky Commands,"The Splunk platform contains built-in search processing language (SPL) safeguards to warn you when you are about to unknowingly run a search that contains commands that might be a security risk. This warning appears when you click a link or type a URL that loads a search that contains risky commands. The warning does not appear when you create ad hoc searches. This warning alerts you to the possibility of unauthorized actions by a malicious user. Unauthorized actions include - Copying or transferring data (data exfiltration), Deleting data and Overwriting data. All risky commands may be found here https://docs.splunk.com/Documentation/Splunk/latest/Security/SPLsafeguards#Commands_that_trigger_the_warninga. A possible scenario when this might occur is when a malicious actor creates a search that includes commands that exfiltrate or damage data. The malicious actor then sends an unsuspecting user a link to the search. The URL contains a query string (q) and a search identifier (sid), but the sid is not valid. The malicious actor hopes the user will use the link and the search will run. During analysis, pivot based on user name and filter any user or queries not needed. Queries ran from a dashboard are seen as adhoc queries. When a query runs from a dashboard it will not show in audittrail logs the source dashboard name. The query defaults to adhoc and no Splunk system user activity. In addition, modify this query by removing key commands that generate too much noise, or too little, and create separate queries with higher confidence to alert on.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Splunk_Audit.Search_Activity where Search_Activity.search IN (""*| runshellscript *"", ""*| collect *"",""*| delete *"", ""*| fit *"", ""*| outputcsv *"", ""*| outputlookup *"", ""*| run *"", ""*| script *"", ""*| sendalert *"", ""*| sendemail *"", ""*| tscolle*"") Search_Activity.search_type=adhoc Search_Activity.user!=splunk-system-user by Search_Activity.search Search_Activity.info Search_Activity.total_run_time Search_Activity.user Search_Activity.search_type | `drop_dm_object_name(Search_Activity)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `splunk_command_and_scripting_interpreter_risky_commands_filter`",50,['T1059'],{'cve-2022-32154'},,"['splunk', 'commands_that_trigger_the_warninga', 'warn', 'warning', 'spl']"
s4,Splunk Command and Scripting Interpreter Risky SPL MLTK,"This detection utilizes machine learning model named ""risky_command_abuse"" trained from ""Splunk Command and Scripting Interpreter Risky SPL MLTK Baseline"". It should be scheduled to run hourly to detect whether a user has run searches containing risky SPL from this list https://docs.splunk.com/Documentation/Splunk/latest/Security/SPLsafeguards#Commands_that_trigger_the_warninga with abnormally long running time in the past one hour, comparing with his/her past seven days history. This search uses the trained baseline to infer whether a search is an outlier (isOutlier ~= 1.0) or not (isOutlier~= 0.0)","| tstats sum(Search_Activity.total_run_time) AS run_time, values(Search_Activity.search) as searches, count FROM datamodel=Splunk_Audit.Search_Activity WHERE (Search_Activity.user!="""") AND (Search_Activity.total_run_time>1) AND (earliest=-1h@h latest=now) AND (Search_Activity.search IN (""*| runshellscript *"", ""*| collect *"",""*| delete *"", ""*| fit *"", ""*| outputcsv *"", ""*| outputlookup *"", ""*| run *"", ""*| script *"", ""*| sendalert *"", ""*| sendemail *"", ""*| tscolle*"")) AND (Search_Activity.search_type=adhoc) AND (Search_Activity.user!=splunk-system-user) BY _time, Search_Activity.user span=1h | apply risky_command_abuse | fields _time, Search_Activity.user, searches, run_time, IsOutlier(run_time) | rename IsOutlier(run_time) as isOutlier, _time as timestamp | where isOutlier>0.5 | `splunk_command_and_scripting_interpreter_risky_spl_mltk_filter`",50,['T1059'],{'cve-2022-32154'},,"['risky_command_abuse', 'splunk', 'commands_that_trigger_the_warninga', 'outlier', 'detect']"
s5,Splunk Digital Certificates Infrastructure Version,This search will check the TLS validation is properly configured on the search head it is run from as well as its search peers after Splunk version 9. Other components such as additional search heads or anything this rest command cannot be distributed to will need to be manually checked.,"| rest /services/server/info | table splunk_server version server_roles | join splunk_server [| rest /servicesNS/nobody/search/configs/conf-server/ search=""sslConfig""| table splunk_server sslVerifyServerCert sslVerifyServerName serverCert] | fillnull value=""Not Set"" | rename sslVerifyServerCert as ""Server.conf:SslConfig:sslVerifyServerCert"", sslVerifyServerName as ""Server.conf:SslConfig:sslVerifyServerName"", serverCert as ""Server.conf:SslConfig:serverCert"" | `splunk_digital_certificates_infrastructure_version_filter`",50,['T1587.003'],"{'tls', 'cve-2022-32153'}",,"['splunk', 'tls', 'search', 'check', 'checked']"
s6,Splunk Digital Certificates Lack of Encryption,"On June 14th, 2022, Splunk released a security advisory relating to the authentication that happens between Universal Forwarders and Deployment Servers. In some circumstances, an unauthenticated client can download forwarder bundles from the Deployment Server. In other circumstances, a client may be allowed to publish a forwarder bundle to other clients, which may allow for arbitrary code execution. The fixes for these require upgrading to at least Splunk 9.0 on the forwarder as well. This is a great opportunity to configure TLS across the environment. This search looks for forwarders that are not using TLS and adds risk to those entities.","`splunkd` group=""tcpin_connections"" ssl=""false"" | stats values(sourceIp) latest(fwdType) latest(version) by hostname | `splunk_digital_certificates_lack_of_encryption_filter`",25,['T1587.003'],"{'authenticate', 'tls', 'cve-2022-32151'}",,"['tls', 'forwarders', 'splunk', 'forwarder', 'unauthenticated']"
s7,Splunk DoS via Malformed S2S Request,"On March 24th, 2022, Splunk published a security advisory for a possible Denial of Service stemming from the lack of validation in a specific key-value field in the Splunk-to-Splunk (S2S) protocol. This detection will alert on attempted exploitation in patched versions of Splunk.","`splunkd` log_level=""ERROR"" component=""TcpInputProc"" thread_name=""FwdDataReceiverThread"" ""Invalid _meta atom"" | table host, src | `splunk_dos_via_malformed_s2s_request_filter`",50,['T1498'],{'cve-2021-3422'},,"['splunk', 's2s', 'security', 'advisory', 'protocol']"
s8,Splunk Endpoint Denial of Service DoS Zip Bomb,"This search allows operator to identify Splunk search app crashes resulting from specially crafted ZIP file using file monitoring that affects UF versions 8.1.11 and 8.2 versions below 8.2.7.1. It is not possible to detect Zip Bomb attack before crash. This search will provide Universal Forwarder errors from uploaded binary files (zip compression) which are used for this attack. If an analyst sees results from this search we suggest you investigate and triage what zip file was uploaded, zip compressed files may have different extensions.",`splunkd` component=FileClassifierManager event_message=*invalid* event_message=*binary* |stats count by host component event_message | `splunk_endpoint_denial_of_service_dos_zip_bomb_filter`,100,['T1499'],{'cve-2022-37439'},,"['splunk', 'zip', 'search', 'compressed', 'crash']"
s9,Splunk Process Injection Forwarder Bundle Downloads,"On June 14th, 2022, Splunk released a security advisory relating to the authentication that happens between Universal Forwarders and Deployment Servers. In some circumstances, an unauthenticated client can download forwarder bundles from the Deployment Server. This hunting search pulls a full list of forwarder bundle downloads where the peer column is the forwarder, the host column is the Deployment Server, and then you have a list of the apps downloaded and the serverclasses in which the peer is a member of. You should look for apps or clients that you do not recognize as being part of your environment.","`splunkd` component=""PackageDownloadRestHandler"" | stats values(app) values(serverclass) by peer, host | `splunk_process_injection_forwarder_bundle_downloads_filter`",50,['T1055'],"{'authenticate', 'cve-2022-32157'}",,"['splunk', 'deployment', 'forwarder', 'unauthenticated', 'forwarders']"
s10,Splunk Protocol Impersonation Weak Encryption Configuration,"On June 14th, 2022, Splunk released a security advisory relating to TLS validation occuring within the httplib and urllib python libraries shipped with Splunk. In addition to upgrading to Splunk Enterprise 9.0 or later, several configuration settings need to be set. This search will check those configurations on the search head it is run from as well as its search peers. In addition to these settings, the PYTHONHTTPSVERIFY setting in $SPLUNK_HOME/etc/splunk-launch.conf needs to be enabled as well. Other components such as additional search heads or anything this rest command cannot be distributed to will need to be manually checked.","| rest /services/server/info | table splunk_server version server_roles | join splunk_server [| rest /servicesNS/nobody/search/configs/conf-server/ search=""PythonSslClientConfig"" | table splunk_server sslVerifyServerCert sslVerifyServerName] | join splunk_server [| rest /servicesNS/nobody/search/configs/conf-web/settings |  table splunk_server serverCert sslVersions] | rename sslVerifyServerCert as ""Server.conf:PythonSSLClientConfig:sslVerifyServerCert"", sslVerifyServerName as ""Server.conf:PythonSSLClientConfig:sslVerifyServerName"", serverCert as ""Web.conf:Settings:serverCert"", sslVersions as ""Web.conf:Settings:sslVersions"" | `splunk_protocol_impersonation_weak_encryption_configuration_filter`",50,['T1001.003'],"{'tls', 'cve-2022-32151'}",,"['splunk_home', 'pythonhttpsverify', 'splunk', 'tls', 'httplib']"
s11,Splunk protocol impersonation weak encryption selfsigned,"On June 14th 2022, Splunk released vulnerability advisory addresing Python TLS validation which was not set before Splunk version 9. This search displays events showing WARNING of using Splunk issued default selfsigned certificates.","`splunkd` certificate event_message=""X509 certificate* should not be used*"" | stats count by host CN component log_level | `splunk_protocol_impersonation_weak_encryption_selfsigned_filter`",50,['T1588.004'],"{'cve-2022-32152', 'tls'}",,"['splunk', 'tls', 'certificates', 'vulnerability', 'warning']"
s12,Splunk protocol impersonation weak encryption simplerequest,On Splunk version 9 on Python3 client libraries verify server certificates by default and use CA certificate store. This search warns a user about a failure to validate a certificate using python3 request.,"`splunk_python` ""simpleRequest SSL certificate validation is enabled without hostname verification"" | stats count by host path | `splunk_protocol_impersonation_weak_encryption_simplerequest_filter`",50,['T1588.004'],{'cve-2022-32152'},,"['splunk', 'certificates', 'certificate', 'python3', 'validate']"
s13,Splunk User Enumeration Attempt,"On May 3rd, 2022, Splunk published a security advisory for  username enumeration stemming from verbose login failure messages present on some REST endpoints. This detection will alert on attempted exploitation in patched versions of Splunk as well as actual exploitation in unpatched version of Splunk."," `splunkd_failed_auths` | stats count(user) as auths by user, src | where auths>5 | stats values(user) as ""Users"", sum(auths) as TotalFailedAuths by src | `splunk_user_enumeration_attempt_filter`",50,['T1078'],{'cve-2021-33845'},,"['splunk', 'security', 'login', 'messages', 'endpoints']"
s14,Splunk XSS in Monitoring Console,"On May 3rd, 2022, Splunk published a security advisory for a reflective Cross-Site Scripting (XSS) vulnerability stemming from the lack of input validation in the Distributed Monitoring Console app. This detection will alert on attempted exploitation in patched versions of Splunk as well as actual exploitation in unpatched version of Splunk."," `splunkd_web` method=""GET"" uri_query=""description=%3C*"" | table _time host status clientip user uri | `splunk_xss_in_monitoring_console_filter`",50,['T1189'],{'cve-2022-27183'},,"['splunk', 'vulnerability', 'monitoring', 'xss', 'exploitation']"
s15,Abnormally High Number Of Cloud Infrastructure API Calls,This search will detect a spike in the number of API calls made to your cloud infrastructure environment by a user.,"| tstats count as api_calls values(All_Changes.command) as command from datamodel=Change where All_Changes.user!=unknown All_Changes.status=success by All_Changes.user _time span=1h | `drop_dm_object_name(""All_Changes"")` | eval HourOfDay=strftime(_time, ""%H"") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, ""%w"") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join user HourOfDay isWeekend [ summary cloud_excessive_api_calls_v1] | where cardinality >=16 | apply cloud_excessive_api_calls_v1 threshold=0.005 | rename ""IsOutlier(api_calls)"" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), "":""), 0) | where api_calls > expected_upper_threshold | eval distance_from_threshold = api_calls - expected_upper_threshold | table _time, user, command, api_calls, expected_upper_threshold, distance_from_threshold | `abnormally_high_number_of_cloud_infrastructure_api_calls_filter`",30,"['T1078.004', 'T1078']",{'cloud computing'},285.0,"['api', 'cloud', 'search', 'detect', 'infrastructure']"
s16,Abnormally High Number Of Cloud Security Group API Calls,This search will detect a spike in the number of API calls made to your cloud infrastructure environment about security groups by a user.,"| tstats count as security_group_api_calls values(All_Changes.command) as command from datamodel=Change where All_Changes.object_category=firewall AND All_Changes.status=success by All_Changes.user _time span=1h | `drop_dm_object_name(""All_Changes"")` | eval HourOfDay=strftime(_time, ""%H"") | eval HourOfDay=floor(HourOfDay/4)*4 | eval DayOfWeek=strftime(_time, ""%w"") | eval isWeekend=if(DayOfWeek >= 1 AND DayOfWeek <= 5, 0, 1) | join user HourOfDay isWeekend [ summary cloud_excessive_security_group_api_calls_v1] | where cardinality >=16 | apply cloud_excessive_security_group_api_calls_v1 threshold=0.005 | rename ""IsOutlier(security_group_api_calls)"" as isOutlier | where isOutlier=1 | eval expected_upper_threshold = mvindex(split(mvindex(BoundaryRanges, -1), "":""), 0) | where security_group_api_calls > expected_upper_threshold | eval distance_from_threshold = security_group_api_calls - expected_upper_threshold | table _time, user, command, security_group_api_calls, expected_upper_threshold, distance_from_threshold | `abnormally_high_number_of_cloud_security_group_api_calls_filter`",30,"['T1078.004', 'T1078']",{'cloud computing'},285.0,"['api', 'search', 'groups', 'cloud', 'security']"
s17,AWS CreateAccessKey,"This search looks for AWS CloudTrail events where a user A who has already permission to create access keys, makes an API call to create access keys for another user B. Attackers have been know to use this technique for Privilege Escalation in case new victim(user B) has more permissions than old victim(user B)","`cloudtrail` eventName = CreateAccessKey userAgent !=console.amazonaws.com errorCode = success | eval match=if(match(userIdentity.userName,requestParameters.userName),1,0) | search match=0 | stats count min(_time) as firstTime max(_time) as lastTime by requestParameters.userName src eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` |`aws_createaccesskey_filter`",70,"['T1136.003', 'T1136']","{'permission', 'cloudtrail', 'privilege'}",280.0,"['permissions', 'cloudtrail', 'privilege', 'permission', 'aws']"
s18,AWS CreateLoginProfile,"This search looks for AWS CloudTrail events where a user A(victim A) creates a login profile for user B, followed by a AWS Console login event from user B from the same src_ip as user B. This correlated event can be indicative of privilege escalation since both events happened from the same src_ip",`cloudtrail` eventName = CreateLoginProfile | rename requestParameters.userName as new_login_profile | table src_ip eventName new_login_profile userIdentity.userName  | join new_login_profile src_ip [| search `cloudtrail` eventName = ConsoleLogin | rename userIdentity.userName  as new_login_profile | stats count values(eventName) min(_time) as firstTime max(_time) as lastTime by eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn new_login_profile src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`] | `aws_createloginprofile_filter`,90,"['T1136.003', 'T1136']","{'cloudtrail', 'privilege'}",280.0,"['aws', 'privilege', 'cloudtrail', 'event', 'events']"
s19,AWS Create Policy Version to allow all resources,This search looks for AWS CloudTrail events where a user created a policy version that allows them to access any resource in their account.,"`cloudtrail` eventName=CreatePolicyVersion eventSource = iam.amazonaws.com errorCode = success | spath input=requestParameters.policyDocument output=key_policy_statements path=Statement{} | mvexpand key_policy_statements | spath input=key_policy_statements output=key_policy_action_1 path=Action | where key_policy_action_1 = ""*"" | stats count min(_time) as firstTime max(_time) as lastTime values(key_policy_statements) as policy_added by eventName eventSource aws_account_id errorCode userAgent eventID awsRegion user user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`aws_create_policy_version_to_allow_all_resources_filter`",70,"['T1078.004', 'T1078']",{'cloudtrail'},280.0,"['aws', 'cloudtrail', 'access', 'policy', 'account']"
s20,AWS Credential Access Failed Login,"It shows that there have been an unsuccessful attempt to log in using the user identity to the AWS management console. Since the user identity has access to AWS account services and resources, an attacker might try to brute force the password for that identity.","| tstats count earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Authentication where Authentication.action = failure Authentication.app=AwsConsoleSignIn Authentication.signature=ConsoleLogin BY Authentication.app Authentication.signature Authentication.dest  Authentication.user Authentication.action Authentication.user_id Authentication.src | `drop_dm_object_name(Authentication)`  | `security_content_ctime(firstTime)`|  `security_content_ctime(lastTime)` | `aws_credential_access_failed_login_filter`",70,['T1110.001'],"{'cloudtrail', 'password'}",280.0,"['aws', 'password', 'brute', 'account', 'user']"
s21,AWS Credential Access GetPasswordData,This detection analytic identifies more than 10 GetPasswordData API calls made to your AWS account with a time window of 5 minutes. Attackers can retrieve the encrypted administrator password for a running Windows instance.,`cloudtrail` eventName=GetPasswordData eventSource = ec2.amazonaws.com |  bin _time span=5m |  stats count values(errorCode) as errorCode dc(requestParameters.instanceId) as distinct_instance_ids values(requestParameters.instanceId) as instance_ids by aws_account_id src_ip user_arn userAgent eventName _time |  where distinct_instance_ids > 10 | `aws_credential_access_getpassworddata_filter`,70,['T1552'],"{'cloudtrail', 'password'}",280.0,"['getpassworddata', 'aws', 'password', 'administrator', 'attackers']"
s22,AWS Credential Access RDS Password reset,"The master user password for Amazon RDS DB instance can be reset using the Amazon RDS console. Using this technique, the attacker can get access to the sensitive data from the DB. Usually, the production databases may have sensitive data like Credit card information, PII, Health care Data. This event should be investigated further.","`cloudtrail` eventSource=""rds.amazonaws.com"" eventName=ModifyDBInstance ""requestParameters.masterUserPassword""=* | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.dBInstanceIdentifier) as DB by sourceIPAddress awsRegion eventName userAgent| `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `aws_credential_access_rds_password_reset_filter`",70,['T1110.002'],"{'cloudtrail', 'password'}",141.0,"['rds', 'password', 'databases', 'reset', 'db']"
s23,AWS Cross Account Activity From Previously Unseen Account,This search looks for AssumeRole events where an IAM role in a different account is requested for the first time.,"| tstats min(_time) as firstTime max(_time) as lastTime from datamodel=Authentication where Authentication.signature=AssumeRole by Authentication.vendor_account Authentication.user Authentication.src Authentication.user_role | `drop_dm_object_name(Authentication)` | rex field=user_role ""arn:aws:sts:*:(?<dest_account>.*):"" | where vendor_account != dest_account | rename vendor_account as requestingAccountId dest_account as requestedAccountId | lookup previously_seen_aws_cross_account_activity requestingAccountId, requestedAccountId, OUTPUTNEW firstTime | eval status = if(firstTime > relative_time(now(), ""-24h@h""),""New Cross Account Activity"",""Previously Seen"") |  where status = ""New Cross Account Activity"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `aws_cross_account_activity_from_previously_unseen_account_filter`",30,,{'rex'},285.0,"['assumerole', 'role', 'iam', 'account', 'search']"
s24,AWS Defense Evasion Delete Cloudtrail,"This analytic identifies AWS `DeleteTrail` events within CloudTrail logs. Adversaries often try to impair their target's defenses by stopping their malicious activity from being logged, so that they may operate with stealth and avoid detection. When the adversary has the right type of permissions in the compromised AWS environment, they may delete the the entire cloudtrail that is logging activities in the environment.",`cloudtrail` eventName = DeleteTrail eventSource = cloudtrail.amazonaws.com userAgent !=console.amazonaws.com errorCode = success| stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.name) as deleted_cloudtrail_name by src region eventName userAgent user_arn aws_account_id | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `aws_defense_evasion_delete_cloudtrail_filter`,100,"['T1562.008', 'T1562']",{'cloudtrail'},281.0,"['cloudtrail', 'deletetrail', 'logs', 'logging', 'aws']"
s25,AWS Defense Evasion Delete CloudWatch Log Group,"This analytic identifies AWS `DeleteLogGroup` events in CloudTrail logs. Attackers may evade the logging capability by deleting the log group in CloudWatch. This will stop sending the logs and metrics to CloudWatch. When the adversary has the right type of permissions within the compromised AWS environment, they may delete the CloudWatch log group that is logging activities in the environment.",`cloudtrail` eventName = DeleteLogGroup eventSource = logs.amazonaws.com userAgent !=console.amazonaws.com errorCode = success| stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.logGroupName) as log_group_name by src region eventName userAgent user_arn aws_account_id | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `aws_defense_evasion_delete_cloudwatch_log_group_filter`,100,"['T1562', 'T1562.008']","{'cloudtrail', 'stop'}",281.0,"['cloudwatch', 'deleteloggroup', 'logs', 'logging', 'cloudtrail']"
s26,AWS Defense Evasion Impair Security Services,"This analytic looks for several delete specific API calls made to AWS Security Services like CloudWatch, GuardDuty and Web Application Firewalls. These API calls are often leveraged by adversaries to weaken existing security defenses by deleting logging configurations in the CloudWatch alarm, delete a set of detectors from your Guardduty environment or simply delete a bunch of CloudWatch alarms to remain stealthy and avoid detection.","`cloudtrail` eventName IN (""DeleteLogStream"",""DeleteDetector"",""DeleteIPSet"",""DeleteWebACL"",""DeleteRule"",""DeleteRuleGroup"",""DeleteLoggingConfiguration"",""DeleteAlarms"") | stats count min(_time) as firstTime max(_time) as lastTime values(eventName)  as eventName values(eventSource) as eventSource values(requestParameters.*) as * by src region user_arn aws_account_id user_type user_agent errorCode| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|  `aws_defense_evasion_impair_security_services_filter`",70,"['T1562.008', 'T1562']",{'cloudtrail'},280.0,"['cloudwatch', 'aws', 'alarms', 'deleting', 'alarm']"
s27,AWS Defense Evasion PutBucketLifecycle,"This analytic identifies `PutBucketLifecycle` events in CloudTrail logs where a user has created a new lifecycle rule for an S3 bucket with a short expiration period. Attackers may use this API call to impair the CloudTrail logging by removing logs from the S3 bucket by changing the object expiration day to 1 day, in which case the CloudTrail logs will be deleted.",`cloudtrail` eventName=PutBucketLifecycle user_type=IAMUser errorCode=success |  spath path=requestParameters{}.LifecycleConfiguration{}.Rule{}.Expiration{}.Days output=expiration_days |  spath path=requestParameters{}.bucketName output=bucket_name | stats count min(_time) as firstTime max(_time) as lastTime  by src region eventName userAgent user_arn aws_account_id expiration_days  bucket_name user_type| `security_content_ctime(firstTime)` |  `security_content_ctime(lastTime)` | where expiration_days < 3 | `aws_defense_evasion_putbucketlifecycle_filter`,50,"['T1562.008', 'T1562']",{'cloudtrail'},282.0,"['putbucketlifecycle', 'cloudtrail', 'logs', 'lifecycle', 's3']"
s28,AWS Defense Evasion Stop Logging Cloudtrail,"This analytic identifies `StopLogging` events in CloudTrail logs. Adversaries often try to impair their target's defenses by stopping their macliious activity from being logged, so that they may operate with stealth and avoid detection. When the adversary has the right type of permissions in the compromised AWS environment, they may easily stop logging.",`cloudtrail` eventName = StopLogging eventSource = cloudtrail.amazonaws.com userAgent !=console.amazonaws.com errorCode = success| stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.name) as stopped_cloudtrail_name by src region eventName userAgent user_arn aws_account_id | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `aws_defense_evasion_stop_logging_cloudtrail_filter`,100,"['T1562.008', 'T1562']","{'cloudtrail', 'stop'}",281.0,"['logs', 'logging', 'stoplogging', 'cloudtrail', 'aws']"
s29,AWS Defense Evasion Update Cloudtrail,"This analytic identifies `UpdateTrail` events in CloudTrail logs. Attackers may evade the logging capability by updating the settings and impairing them with wrong parameters. For example, Attackers may change the multi-regional log into a single region logs, which evades the logging for other regions. When the adversary has the right type of permissions in the compromised AWS environment, they may update the CloudTrail settings that is logging activities in your environment.",`cloudtrail` eventName = UpdateTrail eventSource = cloudtrail.amazonaws.com userAgent !=console.amazonaws.com errorCode = success| stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.name) as cloudtrail_name by src region eventName userAgent user_arn aws_account_id | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `aws_defense_evasion_update_cloudtrail_filter`,100,"['T1562', 'T1562.008']",{'cloudtrail'},281.0,"['cloudtrail', 'logs', 'logging', 'log', 'aws']"
s30,AWS Detect Users creating keys with encrypt policy without MFA,This search provides detection of KMS keys where action kms:Encrypt is accessible for everyone (also outside of your organization). This is an indicator that your account is compromised and the attacker uses the encryption key to compromise another company.,"`cloudtrail` eventName=CreateKey OR eventName=PutKeyPolicy | spath input=requestParameters.policy output=key_policy_statements path=Statement{} | mvexpand key_policy_statements | spath input=key_policy_statements output=key_policy_action_1 path=Action | spath input=key_policy_statements output=key_policy_action_2 path=Action{} | eval key_policy_action=mvappend(key_policy_action_1, key_policy_action_2) | spath input=key_policy_statements output=key_policy_principal path=Principal.AWS | search key_policy_action=""kms:Encrypt"" AND key_policy_principal=""*"" | stats count min(_time) as firstTime max(_time) as lastTime by eventName eventSource eventID awsRegion userIdentity.principalId | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_detect_users_creating_keys_with_encrypt_policy_without_mfa_filter`",50,['T1486'],{'cloudtrail'},283.0,"['encrypt', 'kms', 'encryption', 'compromised', 'key']"
s31,AWS Detect Users with KMS keys performing encryption S3,This search provides detection of users with KMS keys performing encryption specifically against S3 buckets.,"`cloudtrail` eventName=CopyObject requestParameters.x-amz-server-side-encryption=""aws:kms"" | rename requestParameters.bucketName AS bucket_name, requestParameters.x-amz-copy-source AS src_file, requestParameters.key AS dest_file | stats count min(_time) as firstTime max(_time) as lastTime values(src_file) AS src_file values(dest_file) AS dest_file values(userAgent) AS userAgent values(region) AS region values(src) AS src by user | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_detect_users_with_kms_keys_performing_encryption_s3_filter`",30,['T1486'],{'cloudtrail'},283.0,"['encryption', 'kms', 's3', 'buckets', 'search']"
s32,AWS ECR Container Scanning Findings High,This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). You need to activate image scanning in order to get the event DescribeImageScanFindings with the results.,"`cloudtrail` eventSource=ecr.amazonaws.com eventName=DescribeImageScanFindings | spath path=responseElements.imageScanFindings.findings{} output=findings | mvexpand findings | spath input=findings| search severity=HIGH | rename name as finding_name, description as finding_description, requestParameters.imageId.imageDigest as imageDigest, requestParameters.repositoryName as image | eval finding = finding_name."", "".finding_description | eval phase=""release"" | eval severity=""high"" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, imageDigest, image, userName, src_ip, finding, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_scanning_findings_high_filter`",70,"['T1204.003', 'T1204']",{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'describeimagescanfindings', 'events', 'event']"
s33,AWS ECR Container Scanning Findings Low Informational Unknown,This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). You need to activate image scanning in order to get the event DescribeImageScanFindings with the results.,"`cloudtrail` eventSource=ecr.amazonaws.com eventName=DescribeImageScanFindings | spath path=responseElements.imageScanFindings.findings{} output=findings | mvexpand findings | spath input=findings| search severity IN (""LOW"", ""INFORMATIONAL"", ""UNKNOWN"") | rename name as finding_name, description as finding_description, requestParameters.imageId.imageDigest as imageDigest, requestParameters.repositoryName as repositoryName | eval finding = finding_name."", "".finding_description | eval phase=""release"" | eval severity=""low"" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, imageDigest, repositoryName, userName, src_ip, finding, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_scanning_findings_low_informational_unknown_filter`",10,"['T1204.003', 'T1204']",{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'describeimagescanfindings', 'events', 'event']"
s34,AWS ECR Container Scanning Findings Medium,This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). You need to activate image scanning in order to get the event DescribeImageScanFindings with the results.,"`cloudtrail` eventSource=ecr.amazonaws.com eventName=DescribeImageScanFindings | spath path=responseElements.imageScanFindings.findings{} output=findings | mvexpand findings | spath input=findings| search severity=MEDIUM | rename name as finding_name, description as finding_description, requestParameters.imageId.imageDigest as imageDigest, requestParameters.repositoryName as image | eval finding = finding_name."", "".finding_description | eval phase=""release"" | eval severity=""medium"" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, imageDigest, image, userName, src_ip, finding, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_scanning_findings_medium_filter`",30,"['T1204.003', 'T1204']",{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'describeimagescanfindings', 'events', 'event']"
s35,AWS ECR Container Upload Outside Business Hours,"This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). A upload of a new container is normally done during business hours. When done outside business hours, we want to take a look into it.","`cloudtrail` eventSource=ecr.amazonaws.com eventName=PutImage date_hour>=20 OR date_hour<8 NOT (date_wday=saturday OR date_wday=sunday) | rename requestParameters.* as * | rename repositoryName AS image | eval phase=""release"" | eval severity=""medium"" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, user, userName, src_ip, imageTag, registryId, image, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_upload_outside_business_hours_filter`",70,"['T1204.003', 'T1204']",{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'events', 'upload', 'container']"
s36,AWS ECR Container Upload Unknown User,"This search looks for AWS CloudTrail events from AWS Elastic Container Service (ECR). A upload of a new container is normally done from only a few known users. When the user was never seen before, we should have a closer look into the event.","`cloudtrail` eventSource=ecr.amazonaws.com eventName=PutImage NOT `aws_ecr_users` | rename requestParameters.* as * | rename repositoryName AS image | eval phase=""release"" | eval severity=""high"" | stats min(_time) as firstTime max(_time) as lastTime by awsRegion, eventName, eventSource, user, userName, src_ip, imageTag, registryId, image, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_ecr_container_upload_unknown_user_filter`",70,"['T1204.003', 'T1204']",{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'upload', 'event', 'user']"
s37,AWS Excessive Security Scanning,This search looks for AWS CloudTrail events and analyse the amount of eventNames which starts with Describe by a single user. This indicates that this user scans the configuration of your AWS cloud environment.,`cloudtrail` eventName=Describe* OR eventName=List* OR eventName=Get*  | stats dc(eventName) as dc_events min(_time) as firstTime max(_time) as lastTime values(eventName) as eventName values(src) as src values(userAgent) as userAgent by user userIdentity.arn | where dc_events > 50 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`|`aws_excessive_security_scanning_filter`,30,['T1526'],"{'cloud computing', 'cloudtrail'}",280.0,"['cloudtrail', 'aws', 'cloud', 'eventnames', 'events']"
s38,AWS IAM AccessDenied Discovery Events,"The following detection identifies excessive AccessDenied events within an hour timeframe. It is possible that an access key to AWS may have been stolen and is being misused to perform discovery events. In these instances, the access is not available with the key stolen therefore these events will be generated.","`cloudtrail` (errorCode = ""AccessDenied"") user_type=IAMUser (userAgent!=*.amazonaws.com) | bucket _time span=1h | stats count as failures min(_time) as firstTime max(_time) as lastTime, dc(eventName) as methods, dc(eventSource) as sources by src_ip, userIdentity.arn, _time | where failures >= 5 and methods >= 1 and sources >= 1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_accessdenied_discovery_events_filter`",20,['T1580'],{'cloudtrail'},280.0,"['aws', 'accessdenied', 'events', 'discovery', 'access']"
s39,AWS IAM Assume Role Policy Brute Force,"The following detection identifies any malformed policy document exceptions with a status of `failure`. A malformed policy document exception occurs in instances where roles are attempted to be assumed, or brute forced. In a brute force attempt, using a tool like CloudSploit or Pacu, an attempt will look like `arn:aws:iam::111111111111:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS`.  Meaning, when an adversary is attempting to identify a role name, multiple failures will occur. This detection focuses on the errors of a remote attempt that is failing.",`cloudtrail` (errorCode=MalformedPolicyDocumentException) status=failure (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.policyName) as policy_name by src eventName eventSource aws_account_id errorCode requestParameters.policyDocument userAgent eventID awsRegion userIdentity.principalId user_arn | where count >= 2 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_assume_role_policy_brute_force_filter`,40,"['T1580', 'T1110']",{'cloudtrail'},280.0,"['failures', 'awsserviceroleforrds', 'aws', 'failure', 'exceptions']"
s40,AWS IAM Delete Policy,"The following detection identifes when a policy is deleted on AWS. This does not identify whether successful or failed, but the error messages tell a story of suspicious attempts. There is a specific process to follow when deleting a policy. First, detach the policy from all users, groups, and roles that the policy is attached to, using DetachUserPolicy , DetachGroupPolicy , or DetachRolePolicy.",`cloudtrail` eventName=DeletePolicy (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.policyArn) as policyArn by src eventName eventSource aws_account_id errorCode errorMessage userAgent eventID awsRegion userIdentity.principalId userIdentity.arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_delete_policy_filter`,20,['T1098'],{'cloudtrail'},280.0,"['aws', 'policy', 'detachuserpolicy', 'deleting', 'detachrolepolicy']"
s41,AWS IAM Failure Group Deletion,"This detection identifies failure attempts to delete groups. We want to identify when a group is attempting to be deleted, but either access is denied, there is a conflict or there is no group. This is indicative of administrators performing an action, but also could be suspicious behavior occurring. Review parallel IAM events - recently added users, new groups and so forth.","`cloudtrail` eventSource=iam.amazonaws.com eventName=DeleteGroup errorCode IN (NoSuchEntityException,DeleteConflictException, AccessDenied) (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.groupName) as group_name by src eventName eventSource aws_account_id errorCode errorMessage userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_failure_group_deletion_filter`",10,['T1098'],{'cloudtrail'},7.0,"['groups', 'group', 'detection', 'administrators', 'behavior']"
s42,AWS IAM Successful Group Deletion,"The following query uses IAM events to track the success of a group being deleted on AWS. This is typically not indicative of malicious behavior, but a precurser to additional events thay may unfold. Review parallel IAM events - recently added users, new groups and so forth. Inversely, review failed attempts in a similar manner.",`cloudtrail` eventSource=iam.amazonaws.com eventName=DeleteGroup errorCode=success (userAgent!=*.amazonaws.com) | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.groupName) as group_deleted by src eventName eventSource errorCode user_agent awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_iam_successful_group_deletion_filter`,10,"['T1069.003', 'T1098', 'T1069']",{'cloudtrail'},280.0,"['aws', 'iam', 'events', 'group', 'groups']"
s43,AWS Lambda UpdateFunctionCode,"This analytic is designed to detect IAM users attempting to update/modify AWS lambda code via the AWS CLI to gain persistence, futher access into your AWS environment and to facilitate planting backdoors. In this instance, an attacker may upload malicious code/binary to a lambda function which will be executed automatically when the funnction is triggered.",`cloudtrail` eventSource=lambda.amazonaws.com eventName=UpdateFunctionCode*  errorCode = success  user_type=IAMUser | stats  count min(_time) as firstTime max(_time) as lastTime  values(requestParameters.functionName) as function_updated by src_ip user_arn user_agent user_type eventName aws_account_id |`aws_lambda_updatefunctioncode_filter`,70,['T1204'],{'cloudtrail'},280.0,"['lambda', 'aws', 'analytic', 'malicious', 'detect']"
s44,AWS Network Access Control List Created with All Open Ports,The search looks for AWS CloudTrail events to detect if any network ACLs were created with all the ports open to a specified CIDR.,`cloudtrail` eventName=CreateNetworkAclEntry OR eventName=ReplaceNetworkAclEntry requestParameters.ruleAction=allow requestParameters.egress=false requestParameters.aclProtocol=-1 | append [search `cloudtrail` eventName=CreateNetworkAclEntry OR eventName=ReplaceNetworkAclEntry requestParameters.ruleAction=allow requestParameters.egress=false requestParameters.aclProtocol!=-1 | eval port_range='requestParameters.portRange.to' - 'requestParameters.portRange.from' | where port_range>1024] | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by userName userIdentity.principalId eventName requestParameters.ruleAction requestParameters.egress requestParameters.aclProtocol requestParameters.portRange.to requestParameters.portRange.from src userAgent requestParameters.cidrBlock | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `aws_network_access_control_list_created_with_all_open_ports_filter`,60,"['T1562.007', 'T1562']",{'cloudtrail'},280.0,"['acls', 'aws', 'cidr', 'cloudtrail', 'ports']"
s45,AWS Network Access Control List Deleted,"Enforcing network-access controls is one of the defensive mechanisms used by cloud administrators to restrict access to a cloud instance. After the attacker has gained control of the AWS console by compromising an admin account, they can delete a network ACL and gain access to the instance from anywhere. This search will query the AWS CloudTrail logs to detect users deleting network ACLs.",`cloudtrail` eventName=DeleteNetworkAclEntry requestParameters.egress=false | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by userName userIdentity.principalId eventName requestParameters.egress src userAgent | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `aws_network_access_control_list_deleted_filter`,10,"['T1562.007', 'T1562']","{'cloud computing', 'cloudtrail'}",280.0,"['cloudtrail', 'acls', 'aws', 'acl', 'cloud']"
s46,AWS SAML Access by Provider User and Principal,"This search provides specific SAML access from specific Service Provider, user and targeted principal at AWS. This search provides specific information to detect abnormal access or potential credential hijack or forgery, specially in federated environments using SAML protocol inside the perimeter or cloud provider.",`cloudtrail` eventName=Assumerolewithsaml | stats count min(_time) as firstTime max(_time) as lastTime by requestParameters.principalArn requestParameters.roleArn requestParameters.roleSessionName recipientAccountId responseElements.issuer sourceIPAddress userAgent | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_saml_access_by_provider_user_and_principal_filter`,80,['T1078'],"{'cloudtrail', 'unc2452'}",280.0,"['saml', 'aws', 'search', 'forgery', 'credential']"
s47,AWS SAML Update identity provider,"This search provides detection of updates to SAML provider in AWS. Updates to SAML provider need to be monitored closely as they may indicate possible perimeter compromise of federated credentials, or backdoor access from another cloud provider set by attacker.",`cloudtrail` eventName=UpdateSAMLProvider | stats count min(_time) as firstTime max(_time) as lastTime by eventType eventName requestParameters.sAMLProviderArn userIdentity.sessionContext.sessionIssuer.arn sourceIPAddress userIdentity.accessKeyId userIdentity.principalId | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`aws_saml_update_identity_provider_filter`,80,['T1078'],"{'cloudtrail', 'unc2452'}",280.0,"['saml', 'aws', 'updates', 'monitored', 'provider']"
s48,AWS SetDefaultPolicyVersion,This search looks for AWS CloudTrail events where a user has set a default policy versions. Attackers have been know to use this technique for Privilege Escalation in case the previous versions of the policy had permissions to access more resources than the current version of the policy,`cloudtrail` eventName=SetDefaultPolicyVersion eventSource = iam.amazonaws.com | stats count min(_time) as firstTime max(_time) as lastTime values(requestParameters.policyArn) as policy_arn by src requestParameters.versionId eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.principalId user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_setdefaultpolicyversion_filter`,50,"['T1078.004', 'T1078']","{'cloudtrail', 'privilege'}",280.0,"['aws', 'cloudtrail', 'policy', 'privilege', 'attackers']"
s49,AWS UpdateLoginProfile,"This search looks for AWS CloudTrail events where a user A who has already permission to update login profile, makes an API call to update login profile for another user B . Attackers have been know to use this technique for Privilege Escalation in case new victim(user B) has more permissions than old victim(user B)"," `cloudtrail` eventName = UpdateLoginProfile userAgent !=console.amazonaws.com errorCode = success | eval match=if(match(userIdentity.userName,requestParameters.userName), 1,0) | search match=0 | stats count min(_time) as firstTime max(_time) as lastTime by requestParameters.userName src eventName eventSource aws_account_id errorCode userAgent eventID awsRegion userIdentity.userName user_arn | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `aws_updateloginprofile_filter`",50,"['T1136.003', 'T1136']","{'permission', 'cloudtrail'}",2.0,"['permissions', 'cloudtrail', 'attackers', 'profile', 'permission']"
s50,Azure Active Directory High Risk Sign-in,"The following analytic triggers on a high risk sign-in against Azure Active Directory identified by Azure Identity Protection. Identity Protection monitors sign-in events using heuristics and machine learning to identify potentially malicious events and categorizes them in three categories high, medium and low."," `azuread` body.category=UserRiskEvents body.properties.riskLevel=high | rename body.properties.* as * |  stats values(userPrincipalName) by _time, ipAddress, activity, riskLevel, riskEventType, additionalInfo | `azure_active_directory_high_risk_sign_in_filter`",60,"['T1110', 'T1110.003']",{'azure'},284.0,"['azure', 'triggers', 'identity', 'protection', 'risk']"
s51,Azure AD Authentication Failed During MFA Challenge,"The following analytic identifies an authentication attempt event against an Azure AD tenant that fails during the Multi Factor Authentication challenge. This behavior may represent an adversary trying to authenticate with compromised credentials. In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request."," `azuread` body.category=SignInLogs body.properties.status.errorCode=500121 | rename body.properties.* as * | stats values(userPrincipalName) by _time, ipAddress, status.additionalDetails, appDisplayName, userAgent | `azure_ad_authentication_failed_during_mfa_challenge_filter`",60,"['T1078', 'T1078.004', 'T1621']","{'azure', 'authenticate'}",225.0,"['azure', 'authenticate', 'authentication', 'mfa', 'attempts']"
s52,Azure AD Multiple Users Failing To Authenticate From Ip,"The following analytic identifies one source Ip failing to authenticate with 30 unique valid users within 5 minutes. This behavior could represent an adversary performing a Password Spraying attack against an Azure Active Directory tenant to obtain initial access or elevate privileges. Error Code 50126 represents an invalid password. This logic can be used for real time security monitoring as well as threat hunting exercises.\
Azure AD tenants can be very different depending on the organization. Users should test this detection and customize the arbitrary threshold if needed."," `azuread` body.properties.status.errorCode= 50126 body.category= SignInLogs body.properties.authenticationDetails{}.succeeded= false | rename body.properties.* as * | bucket span=5m _time | stats  dc(userPrincipalName) AS unique_accounts values(userPrincipalName) as tried_accounts by _time, ipAddress | where unique_accounts > 30 | `azure_ad_multiple_users_failing_to_authenticate_from_ip_filter`",70,"['T1110', 'T1110.003']","{'azure', 'authenticate'}",284.0,"['azure', 'authenticate', 'tenant', 'tenants', 'security']"
s53,Azure AD Multi-Factor Authentication Disabled,The following analytic identifies an attempt to disable multi-factor authentication for an Azure AD user. An adversary who has obtained access to an Azure AD tenant may disable multi-factor authentication as a way to plant a backdoor and maintain persistence using a valid account. This way the attackers can keep persistance in the environment without adding new users.,"`azuread` ""body.operationName""=""Disable Strong Authentication"" | rename body.properties.* as * | rename targetResources{}.userPrincipalName as userPrincipalName | rename targetResources{}.type as type | rename initiatedBy.user.userPrincipalName as initiatedBy | stats values(userPrincipalName) by _time, type, body.operationName, initiatedBy, result | `azure_ad_multi_factor_authentication_disabled_filter`",50,['T1556'],{'azure'},284.0,"['azure', 'authentication', 'ad', 'adversary', 'tenant']"
s54,Azure AD Successful PowerShell Authentication,"The following analytic identifies a successful authentication event against an Azure AD tenant using PowerShell commandlets. This behavior is not common for regular, non administrative users. After compromising an account in Azure AD, attackers and red teams  alike will perform enumeration and discovery techniques. One method of executing these techniques is leveraging the native PowerShell modules."," `azuread` body.category=SignInLogs body.properties.authenticationDetails{}.succeeded=true body.properties.appDisplayName=""Azure Active Directory PowerShell"" | rename body.properties.* as * |  stats values(userPrincipalName) by _time, ipAddress, appDisplayName, userAgent | `azure_ad_successful_powershell_authentication_filter`",60,"['T1078', 'T1078.004']","{'azure', 'powershell'}",284.0,"['azure', 'authentication', 'powershell', 'ad', 'attackers']"
s55,Azure AD Successful Single-Factor Authentication,"The following analytic identifies a successful authentication event against Azure Active Directory for an account without Multi-Factor Authentication enabled. This could be evidence of a missconfiguration, a policy violation or an account take over attempt that should be investigated"," `azuread`  body.category=SignInLogs body.properties.authenticationRequirement=singleFactorAuthentication body.properties.authenticationDetails{}.succeeded=true | rename body.properties.* as * |  stats values(userPrincipalName) by _time, ipAddress, appDisplayName, authenticationRequirement | `azure_ad_successful_single_factor_authentication_filter`",50,['T1003.002'],"{'dark', 'azure'}",284.0,"['azure', 'authentication', 'account', 'missconfiguration', 'factor']"
s56,Azure AD Unusual Number of Failed Authentications From Ip,"The following analytic identifies one source Ip failing to authenticate with multiple valid users. This behavior could represent an adversary performing a Password Spraying attack against an Azure Active Directory tenant to obtain initial access or elevate privileges. Error Code 50126 represents an invalid password.\
The detection calculates the standard deviation for source Ip and leverages the 3-sigma statistical rule to identify an unusual number of failed authentication attempts. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
While looking for anomalies using statistical methods like the standard deviation can have benefits, we also recommend using threshold-based detections to complement coverage. A similar analytic following the threshold model is `Azure AD Multiple Users Failing To Authenticate From Ip`."," `azuread` body.properties.status.errorCode= 50126 body.category= SignInLogs body.properties.authenticationDetails{}.succeeded= false | rename body.properties.* as * | bucket span=5m _time | stats  dc(userPrincipalName) AS unique_accounts values(userPrincipalName) as tried_accounts by _time, ipAddress | eventstats  avg(unique_accounts) as ip_avg , stdev(unique_accounts) as ip_std by ipAddress | eval  upperBound=(ip_avg+ip_std*3) | eval  isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | `azure_ad_unusual_number_of_failed_authentications_from_ip_filter`",60,"['T1110', 'T1110.003']","{'azure', 'authenticate'}",284.0,"['azure', 'authentication', 'anomalies', 'security', 'authenticate']"
s57,Circle CI Disable Security Job,This search looks for disable security job in CircleCI pipeline.,"`circleci` | rename vcs.committer_name as user vcs.subject as commit_message vcs.url as url workflows.* as *  | stats values(job_name) as job_names by workflow_id workflow_name user commit_message url branch | lookup mandatory_job_for_workflow workflow_name OUTPUTNEW job_name AS mandatory_job | search mandatory_job=* | eval mandatory_job_executed=if(like(job_names, ""%"".mandatory_job.""%""), 1, 0) | where mandatory_job_executed=0 | eval phase=""build"" | rex field=url ""(?<repository>[^\/]*\/[^\/]*)$"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `circle_ci_disable_security_job_filter`",80,['T1554'],{'rex'},249.0,"['circleci', 'disable', 'pipeline', 'security', 'job']"
s58,Circle CI Disable Security Step,This search looks for disable security step in CircleCI pipeline.,"`circleci` | rename workflows.job_id AS job_id | join job_id [ | search `circleci` | stats values(name) as step_names count by job_id job_name ] | stats count by step_names job_id job_name vcs.committer_name vcs.subject vcs.url owners{} | rename vcs.* as * , owners{} as user | lookup mandatory_step_for_job job_name OUTPUTNEW step_name AS mandatory_step | search mandatory_step=* | eval mandatory_step_executed=if(like(step_names, ""%"".mandatory_step.""%""), 1, 0) | where mandatory_step_executed=0 | rex field=url ""(?<repository>[^\/]*\/[^\/]*)$"" | eval phase=""build""  | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `circle_ci_disable_security_step_filter`",80,['T1554'],{'rex'},249.0,"['circleci', 'disable', 'pipeline', 'step', 'security']"
s59,Cloud API Calls From Previously Unseen User Roles,This search looks for new commands from each user role.,"| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where All_Changes.user_type=AssumedRole AND All_Changes.status=success by All_Changes.user, All_Changes.command All_Changes.object | `drop_dm_object_name(""All_Changes"")` | lookup previously_seen_cloud_api_calls_per_user_role user as user, command as command OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenUserApiCall=min(firstTimeSeen) | where isnull(firstTimeSeenUserApiCall) OR firstTimeSeenUserApiCall > relative_time(now(),""-24h@h"") | table firstTime, user, object, command |`security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `cloud_api_calls_from_previously_unseen_user_roles_filter`",60,['T1078'],,285.0,"['commands', 'role', 'search', 'user', 'new']"
s60,Cloud Compute Instance Created By Previously Unseen User,This search looks for cloud compute instances created by users who have not created them before.,"| tstats `security_content_summariesonly` count earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object) as dest from datamodel=Change where All_Changes.action=created by All_Changes.user All_Changes.vendor_region | `drop_dm_object_name(""All_Changes"")` | lookup previously_seen_cloud_compute_creations_by_user user as user OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenUser=min(firstTimeSeen) | where isnull(firstTimeSeenUser) OR firstTimeSeenUser > relative_time(now(), ""-24h@h"") | table firstTime, user, dest, count vendor_region | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_by_previously_unseen_user_filter`",30,"['T1078.004', 'T1078']",{'cloud computing'},285.0,"['cloud', 'instances', 'search', 'created', 'users']"
s61,Cloud Compute Instance Created In Previously Unused Region,This search looks at cloud-infrastructure events where an instance is created in any region within the last hour and then compares it to a lookup file of previously seen regions where instances have been created.,"| tstats earliest(_time) as firstTime latest(_time) as lastTime values(All_Changes.object_id) as dest, count from datamodel=Change where All_Changes.action=created by All_Changes.vendor_region, All_Changes.user | `drop_dm_object_name(""All_Changes"")` | lookup previously_seen_cloud_regions vendor_region as vendor_region OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenRegion=min(firstTimeSeen) | where isnull(firstTimeSeenRegion) OR firstTimeSeenRegion > relative_time(now(), ""-24h@h"") | table firstTime, user, dest, count , vendor_region | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_in_previously_unused_region_filter`",70,['T1535'],{'cloud computing'},285.0,"['instances', 'cloud', 'instance', 'search', 'regions']"
s62,Cloud Compute Instance Created With Previously Unseen Image,This search looks for cloud compute instances being created with previously unseen image IDs.,"| tstats count earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object_id) as dest from datamodel=Change where All_Changes.action=created by All_Changes.Instance_Changes.image_id, All_Changes.user | `drop_dm_object_name(""All_Changes"")` | `drop_dm_object_name(""Instance_Changes"")` | where image_id != ""unknown"" | lookup previously_seen_cloud_compute_images image_id as image_id OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenImage=min(firstTimeSeen) | where isnull(firstTimeSeenImage) OR firstTimeSeenImage > relative_time(now(), ""-24h@h"") | table firstTime, user, image_id, count, dest | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_with_previously_unseen_image_filter`",60,,{'cloud computing'},285.0,"['cloud', 'instances', 'image', 'ids', 'search']"
s63,Cloud Compute Instance Created With Previously Unseen Instance Type,Find EC2 instances being created with previously unseen instance types.,"| tstats earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object_id) as dest, count from datamodel=Change where All_Changes.action=created by All_Changes.Instance_Changes.instance_type, All_Changes.user | `drop_dm_object_name(""All_Changes"")` | `drop_dm_object_name(""Instance_Changes"")` | where instance_type != ""unknown"" | lookup previously_seen_cloud_compute_instance_types instance_type as instance_type OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenInstanceType=min(firstTimeSeen) | where isnull(firstTimeSeenInstanceType) OR firstTimeSeenInstanceType > relative_time(now(), ""-24h@h"") | table firstTime, user, dest, count, instance_type | `security_content_ctime(firstTime)` | `cloud_compute_instance_created_with_previously_unseen_instance_type_filter`",50,,{'aws'},285.0,"['instances', 'instance', 'ec2', 'types', 'unseen']"
s64,Cloud Instance Modified By Previously Unseen User,This search looks for cloud instances being modified by users who have not previously modified them.,"| tstats `security_content_summariesonly` count earliest(_time) as firstTime, latest(_time) as lastTime values(All_Changes.object_id) as object_id values(All_Changes.command) as command from datamodel=Change where All_Changes.action=modified All_Changes.change_type=EC2 All_Changes.status=success by All_Changes.user | `drop_dm_object_name(""All_Changes"")` | lookup previously_seen_cloud_instance_modifications_by_user user as user OUTPUTNEW firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenUser=min(firstTimeSeen) | where isnull(firstTimeSeenUser) OR firstTimeSeenUser > relative_time(now(), ""-24h@h"") | table firstTime user command object_id count | `security_content_ctime(firstTime)` | `cloud_instance_modified_by_previously_unseen_user_filter`",70,"['T1078.004', 'T1078']",{'cloud computing'},285.0,"['cloud', 'modified', 'instances', 'search', 'users']"
s65,Cloud Provisioning Activity From Previously Unseen City,This search looks for cloud provisioning activities from previously unseen cities. Provisioning activities are defined broadly as any event that runs or creates something.,"| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.command | `drop_dm_object_name(""All_Changes"")` | iplocation src | where isnotnull(City) | lookup previously_seen_cloud_provisioning_activity_sources City as City OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenCity=min(firstTimeSeen) | where isnull(firstTimeSeenCity) OR firstTimeSeenCity > relative_time(now(), `previously_unseen_cloud_provisioning_activity_window`) | table firstTime, src, City, user, object, command | `cloud_provisioning_activity_from_previously_unseen_city_filter` | `security_content_ctime(firstTime)`",30,['T1078'],{'cloud computing'},286.0,"['provisioning', 'cloud', 'activities', 'cities', 'creates']"
s66,Cloud Provisioning Activity From Previously Unseen Country,This search looks for cloud provisioning activities from previously unseen countries. Provisioning activities are defined broadly as any event that runs or creates something.,"| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.command | `drop_dm_object_name(""All_Changes"")` | iplocation src | where isnotnull(Country) | lookup previously_seen_cloud_provisioning_activity_sources Country as Country OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenCountry=min(firstTimeSeen) | where isnull(firstTimeSeenCountry) OR firstTimeSeenCountry > relative_time(now(), ""-24h@h"") | table firstTime, src, Country, user, object, command | `cloud_provisioning_activity_from_previously_unseen_country_filter` | `security_content_ctime(firstTime)`",70,['T1078'],{'cloud computing'},286.0,"['provisioning', 'cloud', 'activities', 'countries', 'creates']"
s67,Cloud Provisioning Activity From Previously Unseen IP Address,This search looks for cloud provisioning activities from previously unseen IP addresses. Provisioning activities are defined broadly as any event that runs or creates something.,"| tstats earliest(_time) as firstTime, latest(_time) as lastTime, values(All_Changes.object_id) as object_id from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.command | `drop_dm_object_name(""All_Changes"")` | lookup previously_seen_cloud_provisioning_activity_sources src as src OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenSrc=min(firstTimeSeen) | where isnull(firstTimeSeenSrc) OR firstTimeSeenSrc > relative_time(now(), `previously_unseen_cloud_provisioning_activity_window`) | table firstTime, src, user, object_id, command | `cloud_provisioning_activity_from_previously_unseen_ip_address_filter` | `security_content_ctime(firstTime)`",70,['T1078'],{'cloud computing'},286.0,"['provisioning', 'cloud', 'ip', 'addresses', 'activities']"
s68,Cloud Provisioning Activity From Previously Unseen Region,This search looks for cloud provisioning activities from previously unseen regions. Provisioning activities are defined broadly as any event that runs or creates something.,"| tstats earliest(_time) as firstTime, latest(_time) as lastTime from datamodel=Change where (All_Changes.action=started OR All_Changes.action=created) All_Changes.status=success by All_Changes.src, All_Changes.user, All_Changes.object, All_Changes.command | `drop_dm_object_name(""All_Changes"")` | iplocation src | where isnotnull(Region) | lookup previously_seen_cloud_provisioning_activity_sources Region as Region OUTPUT firstTimeSeen, enough_data | eventstats max(enough_data) as enough_data | where enough_data=1 | eval firstTimeSeenRegion=min(firstTimeSeen) | where isnull(firstTimeSeenRegion) OR firstTimeSeenRegion > relative_time(now(), `previously_unseen_cloud_provisioning_activity_window`) | table firstTime, src, Region, user, object, command | `cloud_provisioning_activity_from_previously_unseen_region_filter` | `security_content_ctime(firstTime)`",70,['T1078'],{'cloud computing'},286.0,"['provisioning', 'cloud', 'activities', 'regions', 'creates']"
s69,Correlation by Repository and Risk,This search correlations detections by repository and risk_score,`signals` | fillnull | stats sum(risk_score) as risk_score values(source) as signals values(user) as user by repository | sort - risk_score | where risk_score > 80 | `correlation_by_repository_and_risk_filter`,70,"['T1204.003', 'T1204']",,287.0,"['risk_score', 'search', 'correlations', 'repository', 'detections']"
s70,Correlation by User and Risk,This search correlations detections by user and risk_score,`signals` | fillnull | stats sum(risk_score) as risk_score values(source) as signals values(repository) as repository by user | sort - risk_score | where risk_score > 80 | `correlation_by_user_and_risk_filter`,70,"['T1204.003', 'T1204']",,287.0,"['risk_score', 'search', 'correlations', 'detections', 'user']"
s71,Detect AWS Console Login by New User,"This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour","| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user | `drop_dm_object_name(Authentication)` | join user type=outer [ inputlookup previously_seen_users_console_logins | stats min(firstTime) as earliestseen by user] | eval userStatus=if(earliestseen >= relative_time(now(), ""-24h@h"") OR isnull(earliestseen), ""First Time Logging into AWS Console"", ""Previously Seen User"") | where userStatus=""First Time Logging into AWS Console"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_aws_console_login_by_new_user_filter`",50,,{'cloudtrail'},280.0,"['alert', 'cloudtrail', 'aws', 'logged', 'event']"
s72,Detect AWS Console Login by User from New City,"This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour","| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user Authentication.src | iplocation Authentication.src | `drop_dm_object_name(Authentication)` | rename City as justSeenCity | table firstTime lastTime user justSeenCity | join user type=outer [| inputlookup previously_seen_users_console_logins | rename City as previouslySeenCity | stats min(firstTime) AS earliestseen by user previouslySeenCity | fields earliestseen user previouslySeenCity] | eval userCity=if(firstTime >= relative_time(now(), ""-24h@h""), ""New City"",""Previously Seen City"") | where userCity = ""New City"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime lastTime user previouslySeenCity justSeenCity userCity | `detect_aws_console_login_by_user_from_new_city_filter`",30,['T1535'],{'cloudtrail'},280.0,"['alert', 'cloudtrail', 'aws', 'logged', 'event']"
s73,Detect AWS Console Login by User from New Country,"This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour","| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user Authentication.src | iplocation Authentication.src | `drop_dm_object_name(Authentication)` | rename Country as justSeenCountry | table firstTime lastTime user justSeenCountry | join user type=outer [| inputlookup previously_seen_users_console_logins | rename Country as previouslySeenCountry | stats min(firstTime) AS earliestseen by user previouslySeenCountry | fields earliestseen user previouslySeenCountry] | eval userCountry=if(firstTime >= relative_time(now(), ""-24h@h""), ""New Country"",""Previously Seen Country"") | where userCountry = ""New Country"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime lastTime user previouslySeenCountry justSeenCountry userCountry | `detect_aws_console_login_by_user_from_new_country_filter`",70,['T1535'],{'cloudtrail'},280.0,"['alert', 'cloudtrail', 'aws', 'logged', 'event']"
s74,Detect AWS Console Login by User from New Region,"This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour","| tstats earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Authentication where Authentication.signature=ConsoleLogin by Authentication.user Authentication.src | iplocation Authentication.src | `drop_dm_object_name(Authentication)` | rename Region as justSeenRegion | table firstTime lastTime user justSeenRegion | join user type=outer [| inputlookup previously_seen_users_console_logins | rename Region as previouslySeenRegion | stats min(firstTime) AS earliestseen by user previouslySeenRegion | fields earliestseen user previouslySeenRegion] | eval userRegion=if(firstTime >= relative_time(now(), ""-24h@h""), ""New Region"",""Previously Seen Region"") | where userRegion= ""New Region"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime lastTime user previouslySeenRegion justSeenRegion userRegion | `detect_aws_console_login_by_user_from_new_region_filter`",60,['T1535'],{'cloudtrail'},280.0,"['alert', 'cloudtrail', 'aws', 'logged', 'event']"
s75,Detect New Open S3 buckets,This search looks for AWS CloudTrail events where a user has created an open/public S3 bucket.,"`cloudtrail` eventSource=s3.amazonaws.com eventName=PutBucketAcl | rex field=_raw ""(?<json_field>{.+})"" | spath input=json_field output=grantees path=requestParameters.AccessControlPolicy.AccessControlList.Grant{} | search grantees=* | mvexpand grantees | spath input=grantees output=uri path=Grantee.URI | spath input=grantees output=permission path=Permission | search uri IN (""http://acs.amazonaws.com/groups/global/AllUsers"",""http://acs.amazonaws.com/groups/global/AuthenticatedUsers"") | search permission IN (""READ"",""READ_ACP"",""WRITE"",""WRITE_ACP"",""FULL_CONTROL"") | rename requestParameters.bucketName AS bucketName | stats count min(_time) as firstTime max(_time) as lastTime by user_arn userIdentity.principalId userAgent uri permission bucketName | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_new_open_s3_buckets_filter` ",60,['T1530'],"{'cloudtrail', 'rex'}",280.0,"['cloudtrail', 's3', 'aws', 'bucket', 'events']"
s76,Detect New Open S3 Buckets over AWS CLI,This search looks for AWS CloudTrail events where a user has created an open/public S3 bucket over the aws cli.,"`cloudtrail` eventSource=""s3.amazonaws.com"" (userAgent=""[aws-cli*"" OR userAgent=aws-cli* ) eventName=PutBucketAcl OR requestParameters.accessControlList.x-amz-grant-read-acp IN (""*AuthenticatedUsers"",""*AllUsers"") OR requestParameters.accessControlList.x-amz-grant-write IN (""*AuthenticatedUsers"",""*AllUsers"") OR requestParameters.accessControlList.x-amz-grant-write-acp IN (""*AuthenticatedUsers"",""*AllUsers"") OR requestParameters.accessControlList.x-amz-grant-full-control IN (""*AuthenticatedUsers"",""*AllUsers"") | rename requestParameters.bucketName AS bucketName | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by userIdentity.userName userIdentity.principalId userAgent bucketName requestParameters.accessControlList.x-amz-grant-read requestParameters.accessControlList.x-amz-grant-read-acp requestParameters.accessControlList.x-amz-grant-write requestParameters.accessControlList.x-amz-grant-write-acp requestParameters.accessControlList.x-amz-grant-full-control | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_new_open_s3_buckets_over_aws_cli_filter` ",60,['T1530'],{'cloudtrail'},280.0,"['cloudtrail', 'aws', 's3', 'bucket', 'events']"
s77,Detect shared ec2 snapshot,The following analytic utilizes AWS CloudTrail events to identify when an EC2 snapshot permissions are modified to be shared with a different AWS account. This method is used by adversaries to exfiltrate the EC2 snapshot.,"`cloudtrail` eventName=ModifySnapshotAttribute | rename requestParameters.createVolumePermission.add.items{}.userId as requested_account_id | search requested_account_id != NULL | eval match=if(requested_account_id==aws_account_id,""Match"",""No Match"") | table _time user_arn src_ip requestParameters.attributeType requested_account_id aws_account_id match vendor_region user_agent | where match = ""No Match"" | `detect_shared_ec2_snapshot_filter` ",60,['T1537'],"{'permission', 'cloudtrail', 'aws'}",280.0,"['cloudtrail', 'aws', 'ec2', 'snapshot', 'permissions']"
s78,Detect Spike in AWS Security Hub Alerts for EC2 Instance,This search looks for a spike in number of of AWS security Hub alerts for an EC2 instance in 4 hours intervals,"`aws_securityhub_finding` ""Resources{}.Type""=AWSEC2Instance | bucket span=4h _time | stats count AS alerts values(Title) as Title values(Types{}) as Types values(vendor_account) as vendor_account values(vendor_region) as vendor_region values(severity) as severity by _time dest | eventstats avg(alerts) as total_alerts_avg, stdev(alerts) as total_alerts_stdev | eval threshold_value = 3 | eval isOutlier=if(alerts > total_alerts_avg+(total_alerts_stdev * threshold_value), 1, 0) | search isOutlier=1 | table _time dest alerts Title Types vendor_account vendor_region severity isOutlier total_alerts_avg | `detect_spike_in_aws_security_hub_alerts_for_ec2_instance_filter`",30,,{'aws'},280.0,"['ec2', 'alerts', 'aws', 'hub', 'security']"
s79,GitHub Actions Disable Security Workflow,This search detects a disabled security workflow in GitHub Actions. An attacker can disable a security workflow in GitHub actions to hide malicious code in it.,"`github` workflow_run.event=push OR workflow_run.event=pull_request | stats values(workflow_run.name) as workflow_run.name by workflow_run.head_commit.id workflow_run.event workflow_run.head_branch workflow_run.head_commit.author.email workflow_run.head_commit.author.name workflow_run.head_commit.message workflow_run.head_commit.timestamp workflow_run.head_repository.full_name workflow_run.head_repository.owner.id workflow_run.head_repository.owner.login workflow_run.head_repository.owner.type | rename workflow_run.head_commit.author.name as user, workflow_run.head_commit.author.email as user_email, workflow_run.head_repository.full_name as repository, workflow_run.head_branch as branch | search NOT workflow_run.name=*security-testing* | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_actions_disable_security_workflow_filter`",30,"['T1195.002', 'T1195']",{'github'},285.0,"['github', 'security', 'search', 'malicious', 'disable']"
s80,Github Commit Changes In Master,This search is to detect a pushed or commit to master or main branch. This is to avoid unwanted modification to master without a review to the changes. Ideally in terms of devsecops the changes made in a branch and do a PR for review. of course in some cases admin of the project may did a changes directly to master branch,"`github` branches{}.name = main OR branches{}.name = master |  stats count min(_time) as firstTime max(_time) as lastTime by commit.commit.author.email commit.author.login commit.commit.message repository.pushed_at commit.commit.committer.date repository.full_name | rename commit.author.login as user, repository.full_name as repository | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_commit_changes_in_master_filter`",30,['T1199'],{'github'},285.0,"['branch', 'commit', 'search', 'master', 'changes']"
s81,Github Commit In Develop,This search is to detect a pushed or commit to develop branch. This is to avoid unwanted modification to develop without a review to the changes. Ideally in terms of devsecops the changes made in a branch and do a PR for review. of course in some cases admin of the project may did a changes directly to master branch,"`github` branches{}.name = main OR branches{}.name = develop |  stats count min(_time) as firstTime max(_time) as lastTime  by commit.author.html_url commit.commit.author.email commit.author.login commit.commit.message repository.pushed_at commit.commit.committer.date | eval phase=""code"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_commit_in_develop_filter`",30,['T1199'],{'github'},285.0,"['branch', 'commit', 'search', 'develop', 'changes']"
s82,GitHub Dependabot Alert,This search looks for Dependabot Alerts in Github logs.,"`github` alert.id=* action=create | rename repository.full_name as repository, repository.html_url as repository_url sender.login as user | stats min(_time) as firstTime max(_time) as lastTime by action alert.affected_package_name alert.affected_range alert.created_at alert.external_identifier alert.external_reference alert.fixed_in alert.severity repository repository_url user | eval phase=""code"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_dependabot_alert_filter`",30,"['T1195.001', 'T1195']",{'github'},288.0,"['alerts', 'dependabot', 'github', 'logs', 'search']"
s83,GitHub Pull Request from Unknown User,This search looks for Pull Request from unknown user.,"`github` check_suite.pull_requests{}.id=* | stats count by check_suite.head_commit.author.name repository.full_name check_suite.pull_requests{}.head.ref check_suite.head_commit.message | rename check_suite.head_commit.author.name as user repository.full_name as repository check_suite.pull_requests{}.head.ref as ref_head check_suite.head_commit.message as commit_message | search NOT `github_known_users` | eval phase=""code"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `github_pull_request_from_unknown_user_filter`",30,"['T1195.001', 'T1195']",{'github'},285.0,"['search', 'user', 'request', 'pull', 'unknown']"
s84,Gsuite Drive Share In External Email,This search is to detect suspicious google drive or google docs files shared outside or externally. This behavior might be a good hunting query to monitor exfitration of data made by an attacker or insider to a targetted machine.,"`gsuite_drive` NOT (email IN("""", ""null"")) | rex field=parameters.owner ""[^@]+@(?<src_domain>[^@]+)"" | rex field=email ""[^@]+@(?<dest_domain>[^@]+)"" | where src_domain = ""internal_test_email.com"" and not dest_domain = ""internal_test_email.com"" | eval phase=""plan"" | eval severity=""low"" | stats values(parameters.doc_title) as doc_title, values(parameters.doc_type) as doc_types, values(email) as dst_email_list, values(parameters.visibility) as visibility, values(parameters.doc_id) as doc_id, count min(_time) as firstTime max(_time) as lastTime by parameters.owner ip_address phase severity  | rename parameters.owner as user ip_address as src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_drive_share_in_external_email_filter`",80,"['T1567.002', 'T1567']","{'gsuite', 'rex', 'gdrive'}",285.0,"['search', 'google', 'suspicious', 'files', 'detect']"
s85,GSuite Email Suspicious Attachment,This search is to detect a suspicious attachment file extension in Gsuite email that may related to spear phishing attack. This file type is commonly used by malware to lure user to click on it to execute malicious code to compromised targetted machine. But this search can also catch some normal files related to this file type that maybe send by employee or network admin.,"`gsuite_gmail` ""attachment{}.file_extension_type"" IN (""pl"", ""py"", ""rb"", ""sh"", ""bat"", ""exe"", ""dll"", ""cpl"", ""com"", ""js"", ""vbs"", ""ps1"", ""reg"",""swf"", ""cmd"", ""go"") | eval phase=""plan"" | eval severity=""medium"" | stats count min(_time) as firstTime max(_time) as lastTime values(attachment{}.file_extension_type) as email_attachments, values(attachment{}.sha256) as attachment_sha256, values(payload_size) as payload_size by destination{}.service num_message_attachments  subject destination{}.address source.address phase severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_email_suspicious_attachment_filter`",70,"['T1566.001', 'T1566']","{'ps1', 'gsuite', 'malware'}",54.0,"['gsuite', 'phishing', 'malware', 'file', 'attachment']"
s86,Gsuite Email Suspicious Subject With Attachment,"This search is to detect a gsuite email contains suspicious subject having known file type used in spear phishing. This technique is a common and effective entry vector of attacker to compromise a network by luring the user to click or execute the suspicious attachment send from external email account because of the effective social engineering of subject related to delivery, bank and so on. On the other hand this detection may catch a normal email traffic related to legitimate transaction so better to check the email sender, spelling and etc. avoid click link or opening the attachment if you are not expecting this type of e-mail.","`gsuite_gmail` num_message_attachments > 0 subject IN (""*dhl*"", ""* ups *"", ""*delivery*"", ""*parcel*"", ""*label*"", ""*invoice*"", ""*postal*"", ""* fedex *"", ""* usps *"", ""* express *"", ""*shipment*"", ""*Banking/Tax*"",""*shipment*"", ""*new order*"") attachment{}.file_extension_type IN (""doc"", ""docx"", ""xls"", ""xlsx"", ""ppt"", ""pptx"", ""pdf"", ""zip"", ""rar"", ""html"",""htm"",""hta"") | rex field=source.from_header_address ""[^@]+@(?<source_domain>[^@]+)"" | rex field=destination{}.address ""[^@]+@(?<dest_domain>[^@]+)"" | where not source_domain=""internal_test_email.com"" and dest_domain=""internal_test_email.com"" | eval phase=""plan"" | eval severity=""medium"" | stats count min(_time) as firstTime max(_time) as lastTime values(attachment{}.file_extension_type) as email_attachments, values(attachment{}.sha256) as attachment_sha256, values(payload_size) as payload_size by destination{}.service num_message_attachments  subject destination{}.address source.address phase severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_email_suspicious_subject_with_attachment_filter`",50,"['T1566.001', 'T1566']","{'gsuite', 'rex'}",285.0,"['gsuite', 'phishing', 'attachment', 'suspicious', 'search']"
s87,Gsuite Email With Known Abuse Web Service Link,"This analytics is to detect a gmail containing a link that are known to be abused by malware or attacker like pastebin, telegram and discord to deliver malicious payload. This event can encounter some normal email traffic within organization and external email that normally using this application and services.","`gsuite_gmail` ""link_domain{}"" IN (""*pastebin.com*"", ""*discord*"", ""*telegram*"",""t.me"") | rex field=source.from_header_address ""[^@]+@(?<source_domain>[^@]+)"" | rex field=destination{}.address ""[^@]+@(?<dest_domain>[^@]+)"" | where not source_domain=""internal_test_email.com"" and dest_domain=""internal_test_email.com"" | eval phase=""plan"" | eval severity=""low"" |stats values(link_domain{}) as link_domains min(_time) as firstTime max(_time) as lastTime count by is_spam source.address source.from_header_address subject destination{}.address phase severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_email_with_known_abuse_web_service_link_filter`",50,"['T1566.001', 'T1566']","{'gsuite', 'rex', 'email', 'malware', 'telegram'}",289.0,"['analytics', 'gmail', 'malware', 'email', 'telegram']"
s88,Gsuite Outbound Email With Attachment To External Domain,This search is to detect a suspicious outbound e-mail from internal email to external email domain. This can be a good hunting query to monitor insider or outbound email traffic for not common domain e-mail. The idea is to parse the domain of destination email check if there is a minimum outbound traffic < 20 with attachment.,"`gsuite_gmail` num_message_attachments > 0 | rex field=source.from_header_address ""[^@]+@(?<source_domain>[^@]+)"" | rex field=destination{}.address ""[^@]+@(?<dest_domain>[^@]+)"" | where source_domain=""internal_test_email.com"" and not dest_domain=""internal_test_email.com"" | eval phase=""plan"" | eval severity=""low"" | stats values(subject) as subject, values(source.from_header_address) as src_domain_list, count as numEvents, dc(source.from_header_address) as numSrcAddresses, min(_time) as firstTime max(_time) as lastTime by dest_domain phase severity | where numSrcAddresses < 20 |sort - numSrcAddresses | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_outbound_email_with_attachment_to_external_domain_filter`",30,"['T1048.003', 'T1048']","{'gsuite', 'rex', 'email'}",285.0,"['search', 'email', 'detect', 'external', 'mail']"
s89,Gsuite Suspicious Shared File Name,This search is to detect a shared file in google drive with suspicious file name that are commonly used by spear phishing campaign. This technique is very popular to lure the user by running a malicious document or click a malicious link within the shared file that will redirected to malicious website. This detection can also catch some normal email communication between organization and its external customer.,"`gsuite_drive` parameters.owner_is_team_drive=false ""parameters.doc_title"" IN (""*dhl*"", ""* ups *"", ""*delivery*"", ""*parcel*"", ""*label*"", ""*invoice*"", ""*postal*"", ""*fedex*"", ""* usps *"", ""* express *"", ""*shipment*"", ""*Banking/Tax*"",""*shipment*"", ""*new order*"") parameters.doc_type IN (""document"",""pdf"", ""msexcel"", ""msword"", ""spreadsheet"", ""presentation"") | rex field=parameters.owner ""[^@]+@(?<source_domain>[^@]+)"" | rex field=parameters.target_user ""[^@]+@(?<dest_domain>[^@]+)"" | where not source_domain=""internal_test_email.com"" and dest_domain=""internal_test_email.com"" | eval phase=""plan"" | eval severity=""low"" | stats count min(_time) as firstTime max(_time) as lastTime by email parameters.owner parameters.target_user parameters.doc_title parameters.doc_type phase severity | rename parameters.target_user AS user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `gsuite_suspicious_shared_file_name_filter`",30,"['T1566.001', 'T1566']","{'gsuite', 'rex', 'gdrive'}",46.0,"['phishing', 'file', 'malicious', 'suspicious', 'search']"
s90,Kubernetes Nginx Ingress LFI,This search uses the Kubernetes logs from a nginx ingress controller to detect local file inclusion attacks.,"`kubernetes_container_controller` | rex field=_raw ""^(?<remote_addr>\S+)\s+-\s+-\s+\[(?<time_local>[^\]]*)\]\s\""(?<request>[^\""]*)\""\s(?<status>\S*)\s(?<body_bytes_sent>\S*)\s\""(?<http_referer>[^\""]*)\""\s\""(?<http_user_agent>[^\""]*)\""\s(?<request_length>\S*)\s(?<request_time>\S*)\s\[(?<proxy_upstream_name>[^\]]*)\]\s\[(?<proxy_alternative_upstream_name>[^\]]*)\]\s(?<upstream_addr>\S*)\s(?<upstream_response_length>\S*)\s(?<upstream_response_time>\S*)\s(?<upstream_status>\S*)\s(?<req_id>\S*)"" | lookup local_file_inclusion_paths local_file_inclusion_paths AS request OUTPUT lfi_path | search lfi_path=yes | rename remote_addr AS src_ip, upstream_status as status, proxy_upstream_name as proxy | rex field=request ""^(?<http_method>\S+)\s(?<url>\S+)\s"" | eval phase=""operate"" | eval severity=""high"" | stats count min(_time) as firstTime max(_time) as lastTime by src_ip, status, url, http_method, host, http_user_agent, proxy, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kubernetes_nginx_ingress_lfi_filter`",70,['T1212'],"{'rex', 'kubernetes'}",290.0,"['kubernetes', 'ingress', 'nginx', 'logs', 'attacks']"
s91,Kubernetes Nginx Ingress RFI,This search uses the Kubernetes logs from a nginx ingress controller to detect remote file inclusion attacks.,"`kubernetes_container_controller` | rex field=_raw ""^(?<remote_addr>\S+)\s+-\s+-\s+\[(?<time_local>[^\]]*)\]\s\""(?<request>[^\""]*)\""\s(?<status>\S*)\s(?<body_bytes_sent>\S*)\s\""(?<http_referer>[^\""]*)\""\s\""(?<http_user_agent>[^\""]*)\""\s(?<request_length>\S*)\s(?<request_time>\S*)\s\[(?<proxy_upstream_name>[^\]]*)\]\s\[(?<proxy_alternative_upstream_name>[^\]]*)\]\s(?<upstream_addr>\S*)\s(?<upstream_response_length>\S*)\s(?<upstream_response_time>\S*)\s(?<upstream_status>\S*)\s(?<req_id>\S*)"" | rex field=request ""^(?<http_method>\S+)?\s(?<url>\S+)\s"" | rex field=url ""(?<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"" | search dest_ip=* | rename remote_addr AS src_ip, upstream_status as status, proxy_upstream_name as proxy | eval phase=""operate"" | eval severity=""medium"" | stats count min(_time) as firstTime max(_time) as lastTime by src_ip, dest_ip status, url, http_method, host, http_user_agent, proxy, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kubernetes_nginx_ingress_rfi_filter`",70,['T1212'],"{'rex', 'kubernetes'}",290.0,"['kubernetes', 'nginx', 'ingress', 'logs', 'attacks']"
s92,Kubernetes Scanner Image Pulling,This search uses the Kubernetes logs from Splunk Connect from Kubernetes to detect Kubernetes Security Scanner.,"`kube_objects_events` object.message IN (""Pulling image *kube-hunter*"", ""Pulling image *kube-bench*"", ""Pulling image *kube-recon*"", ""Pulling image *kube-recon*"") | rename object.* AS * | rename involvedObject.* AS * | rename source.host AS host | eval phase=""operate"" | eval severity=""high"" | stats min(_time) as firstTime max(_time) as lastTime count by host, name, namespace, kind, reason, message, phase, severity | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kubernetes_scanner_image_pulling_filter`",90,['T1526'],{'kubernetes'},290.0,"['kubernetes', 'splunk', 'logs', 'search', 'security']"
s93,O365 Added Service Principal,This search detects the creation of a new Federation setting by alerting about an specific event related to its creation.,"`o365_management_activity` Workload=AzureActiveDirectory Operation=""Add service principal credentials."" | stats min(_time) as firstTime max(_time) as lastTime values(Actor{}.ID) as Actor.ID values(ModifiedProperties{}.Name) as ModifiedProperties.Name values(ModifiedProperties{}.NewValue) as ModifiedProperties.NewValue values(Target{}.ID) as Target.ID by ActorIpAddress Operation | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `o365_added_service_principal_filter`",70,"['T1136.003', 'T1136']","{'unc2452', 'o365'}",285.0,"['federation', 'search', 'detects', 'event', 'creation']"
s94,O365 Add App Role Assignment Grant User,This search detects the creation of a new Federation setting by alerting about an specific event related to its creation.,"`o365_management_activity` Workload=AzureActiveDirectory Operation=""Add app role assignment grant to user."" | stats count min(_time) as firstTime max(_time) as lastTime values(Actor{}.ID) as Actor.ID values(Actor{}.Type) as Actor.Type by ActorIpAddress dest ResultStatus | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `o365_add_app_role_assignment_grant_user_filter`",30,"['T1136.003', 'T1136']","{'unc2452', 'o365'}",285.0,"['federation', 'search', 'detects', 'event', 'creation']"
s95,O365 Bypass MFA via Trusted IP,This search detects newly added IP addresses/CIDR blocks to the list of MFA Trusted IPs to bypass multi factor authentication. Attackers are often known to use this technique so that they can bypass the MFA system.,"`o365_management_activity` Operation=""Set Company Information."" ModifiedProperties{}.Name=StrongAuthenticationPolicy | rex max_match=100 field=ModifiedProperties{}.NewValue ""(?<ip_addresses_new_added>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2})"" | rex max_match=100 field=ModifiedProperties{}.OldValue ""(?<ip_addresses_old>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2})"" | eval ip_addresses_old=if(isnotnull(ip_addresses_old),ip_addresses_old,""0"") | mvexpand ip_addresses_new_added | where isnull(mvfind(ip_addresses_old,ip_addresses_new_added)) |stats count min(_time) as firstTime max(_time) as lastTime values(ip_addresses_old) as ip_addresses_old by user ip_addresses_new_added Operation Workload vendor_account status user_id action | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `o365_bypass_mfa_via_trusted_ip_filter`",70,"['T1562.007', 'T1562']","{'rex', 'o365'}",225.0,"['mfa', 'authentication', 'ips', 'ip', 'search']"
s96,O365 Disable MFA,"This search detects when multi factor authentication has been disabled, what entitiy performed the action and against what user","`o365_management_activity` Operation=""Disable Strong Authentication."" | stats count earliest(_time) as firstTime latest(_time) as lastTime by UserType Operation UserId ResultStatus |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `o365_disable_mfa_filter`",80,['T1556'],{'o365'},225.0,"['authentication', 'disabled', 'search', 'detects', 'factor']"
s97,O365 Excessive Authentication Failures Alert,This search detects when an excessive number of authentication failures occur this search also includes attempts against MFA prompt codes,`o365_management_activity` Workload=AzureActiveDirectory UserAuthenticationMethod=* status=failure | stats count earliest(_time) AS firstTime latest(_time) AS lastTime values(UserAuthenticationMethod) AS UserAuthenticationMethod values(UserAgent) AS UserAgent values(status) AS status values(src_ip) AS src_ip by user | where count > 10 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `o365_excessive_authentication_failures_alert_filter`,80,['T1110'],{'o365'},225.0,"['mfa', 'authentication', 'search', 'attempts', 'prompt']"
s98,O365 Excessive SSO logon errors,This search detects accounts with high number of Single Sign ON (SSO) logon errors. Excessive logon errors may indicate attempts to bruteforce of password or single sign on token hijack or reuse.,`o365_management_activity`  Workload=AzureActiveDirectory LogonError=SsoArtifactInvalidOrExpired | stats count min(_time) as firstTime max(_time) as lastTime by LogonError ActorIpAddress UserAgent UserId | where count > 5 | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `o365_excessive_sso_logon_errors_filter`,80,['T1556'],{'o365'},98.0,"['sso', 'logon', 'bruteforce', 'search', 'token']"
s99,O365 New Federated Domain Added,This search detects the addition of a new Federated domain.,"`o365_management_activity` Workload=Exchange Operation=""Add-FederatedDomain"" | stats count min(_time) as firstTime max(_time) as lastTime values(Parameters{}.Value) as Parameters.Value by ObjectId Operation OrganizationName OriginatingServer UserId UserKey | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `o365_new_federated_domain_added_filter`",80,"['T1136.003', 'T1136']","{'unc2452', 'o365'}",291.0,"['federated', 'domain', 'search', 'new', 'detects']"
s100,O365 PST export alert,This search detects when a user has performed an Ediscovery search or exported a PST file from the search. This PST file usually has sensitive information including email body content,"`o365_management_activity` Category=ThreatManagement Name=""eDiscovery search started or exported"" | stats count earliest(_time) as firstTime latest(_time) as lastTime by Source Severity AlertEntityId Operation Name |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `o365_pst_export_alert_filter`",80,['T1114'],"{'o365', 'email'}",285.0,"['search', 'ediscovery', 'pst', 'email', 'detects']"
s101,O365 Suspicious Admin Email Forwarding,This search detects when an admin configured a forwarding rule for multiple mailboxes to the same destination.,`o365_management_activity` Operation=Set-Mailbox | spath input=Parameters | rename Identity AS src_user | search ForwardingAddress=* | stats dc(src_user) AS count_src_user earliest(_time) as firstTime latest(_time) as lastTime values(src_user) AS src_user values(user) AS user by ForwardingAddress | where count_src_user > 1 |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`o365_suspicious_admin_email_forwarding_filter`,80,"['T1114.003', 'T1114']",{'o365'},285.0,"['mailboxes', 'search', 'forwarding', 'detects', 'rule']"
s102,O365 Suspicious Rights Delegation,This search detects the assignment of rights to accesss content from another mailbox. This is usually only assigned to a service account.,"`o365_management_activity` Operation=Add-MailboxPermission | spath input=Parameters | rename User AS src_user, Identity AS dest_user | search AccessRights=FullAccess OR AccessRights=SendAs OR AccessRights=SendOnBehalf | stats count earliest(_time) as firstTime latest(_time) as lastTime by user src_user dest_user Operation AccessRights |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`o365_suspicious_rights_delegation_filter`",80,"['T1114.002', 'T1114']",{'o365'},285.0,"['mailbox', 'search', 'accesss', 'content', 'assigned']"
s103,O365 Suspicious User Email Forwarding,This search detects when multiple user configured a forwarding rule to the same destination.,`o365_management_activity` Operation=Set-Mailbox | spath input=Parameters | rename Identity AS src_user | search ForwardingSmtpAddress=* | stats dc(src_user) AS count_src_user earliest(_time) as firstTime latest(_time) as lastTime values(src_user) AS src_user values(user) AS user by ForwardingSmtpAddress | where count_src_user > 1 |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`o365_suspicious_user_email_forwarding_filter`,80,"['T1114.003', 'T1114']",{'o365'},285.0,"['forwarding', 'search', 'destination', 'detects', 'rule']"
s104,Abnormally High AWS Instances Launched by User,This search looks for AWS CloudTrail events where a user successfully launches an abnormally high number of instances. This search is deprecated and have been translated to use the latest Change Datamodel,"`cloudtrail` eventName=RunInstances errorCode=success | bucket span=10m _time | stats count AS instances_launched by _time userName | eventstats avg(instances_launched) as total_launched_avg, stdev(instances_launched) as total_launched_stdev | eval threshold_value = 4 | eval isOutlier=if(instances_launched > total_launched_avg+(total_launched_stdev * threshold_value), 1, 0) | search isOutlier=1 AND _time >= relative_time(now(), ""-10m@m"") | eval num_standard_deviations_away = round(abs(instances_launched - total_launched_avg) / total_launched_stdev, 2) | table _time, userName, instances_launched, num_standard_deviations_away, total_launched_avg, total_launched_stdev | `abnormally_high_aws_instances_launched_by_user_filter`",50,['T1078.004'],{'cloudtrail'},280.0,"['cloudtrail', 'instances', 'aws', 'events', 'search']"
s105,Abnormally High AWS Instances Launched by User - MLTK,This search looks for AWS CloudTrail events where a user successfully launches an abnormally high number of instances. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventName=RunInstances errorCode=success `abnormally_high_aws_instances_launched_by_user___mltk_filter` | bucket span=10m _time  | stats count as instances_launched by _time src_user  | apply ec2_excessive_runinstances_v1  | rename ""IsOutlier(instances_launched)"" as isOutlier  | where isOutlier=1",50,['T1078.004'],"{'jason', 'cloudtrail'}",280.0,"['cloudtrail', 'instances', 'aws', 'search', 'events']"
s106,Abnormally High AWS Instances Terminated by User,This search looks for AWS CloudTrail events where an abnormally high number of instances were successfully terminated by a user in a 10-minute window. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventName=TerminateInstances errorCode=success | bucket span=10m _time | stats count AS instances_terminated by _time userName | eventstats avg(instances_terminated) as total_terminations_avg, stdev(instances_terminated) as total_terminations_stdev | eval threshold_value = 4 | eval isOutlier=if(instances_terminated > total_terminations_avg+(total_terminations_stdev * threshold_value), 1, 0) | search isOutlier=1 AND _time >= relative_time(now(), ""-10m@m"")| eval num_standard_deviations_away = round(abs(instances_terminated - total_terminations_avg) / total_terminations_stdev, 2) |table _time, userName, instances_terminated, num_standard_deviations_away, total_terminations_avg, total_terminations_stdev | `abnormally_high_aws_instances_terminated_by_user_filter`",50,['T1078.004'],{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'instances', 'terminated', 'search']"
s107,Abnormally High AWS Instances Terminated by User - MLTK,This search looks for AWS CloudTrail events where a user successfully terminates an abnormally high number of instances. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventName=TerminateInstances errorCode=success `abnormally_high_aws_instances_terminated_by_user___mltk_filter` | bucket span=10m _time  | stats count as instances_terminated by _time src_user  | apply ec2_excessive_terminateinstances_v1  | rename ""IsOutlier(instances_terminated)"" as isOutlier  | where isOutlier=1",50,['T1078.004'],"{'jason', 'cloudtrail'}",280.0,"['cloudtrail', 'aws', 'instances', 'search', 'events']"
s108,AWS Cloud Provisioning From Previously Unseen City,"This search looks for AWS provisioning activities from previously unseen cities.  Provisioning activities are defined broadly as any event that begins with ""Run"" or ""Create."" This search is deprecated and have been translated to use the latest Change Datamodel. ","`cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search City=* [search `cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search City=* | stats earliest(_time) as firstTime, latest(_time) as lastTime by sourceIPAddress, City, Region, Country | inputlookup append=t previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by sourceIPAddress, City, Region, Country | outputlookup previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by City | eval newCity=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newCity=1 | table City] | spath output=user userIdentity.arn | rename sourceIPAddress as src_ip | table _time, user, src_ip, City, eventName, errorCode | `aws_cloud_provisioning_from_previously_unseen_city_filter`",50,['T1535'],{'cloudtrail'},286.0,"['provisioning', 'aws', 'cities', 'activities', 'search']"
s109,AWS Cloud Provisioning From Previously Unseen Country,"This search looks for AWS provisioning activities from previously unseen countries. Provisioning activities are defined broadly as any event that begins with ""Run"" or ""Create."" This search is deprecated and have been translated to use the latest Change Datamodel. ","`cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search Country=* [search `cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search Country=* | stats earliest(_time) as firstTime, latest(_time) as lastTime by sourceIPAddress, City, Region, Country | inputlookup append=t previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by sourceIPAddress, City, Region, Country | outputlookup previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by Country | eval newCountry=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newCountry=1 | table Country] | spath output=user userIdentity.arn | rename sourceIPAddress as src_ip | table _time, user, src_ip, Country, eventName, errorCode | `aws_cloud_provisioning_from_previously_unseen_country_filter`",50,['T1535'],{'cloudtrail'},286.0,"['provisioning', 'aws', 'countries', 'activities', 'create']"
s110,AWS Cloud Provisioning From Previously Unseen IP Address,"This search looks for AWS provisioning activities from previously unseen IP addresses. Provisioning activities are defined broadly as any event that begins with ""Run"" or ""Create."" This search is deprecated and have been translated to use the latest Change Datamodel. ","`cloudtrail` (eventName=Run* OR eventName=Create*) [search `cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search Country=* | stats earliest(_time) as firstTime, latest(_time) as lastTime by sourceIPAddress, City, Region, Country | inputlookup append=t previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by sourceIPAddress, City, Region, Country | outputlookup previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by sourceIPAddress | eval newIP=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newIP=1 | table sourceIPAddress] | spath output=user userIdentity.arn | rename sourceIPAddress as src_ip | table _time, user, src_ip, eventName, errorCode | `aws_cloud_provisioning_from_previously_unseen_ip_address_filter`",50,,{'cloudtrail'},286.0,"['provisioning', 'aws', 'ip', 'addresses', 'search']"
s111,AWS Cloud Provisioning From Previously Unseen Region,"This search looks for AWS provisioning activities from previously unseen regions. Region in this context is similar to a state in the United States. Provisioning activities are defined broadly as any event that begins with ""Run"" or ""Create."" This search is deprecated and have been translated to use the latest Change Datamodel.","`cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search Region=* [search `cloudtrail` (eventName=Run* OR eventName=Create*) | iplocation sourceIPAddress | search Region=* | stats earliest(_time) as firstTime, latest(_time) as lastTime by sourceIPAddress, City, Region, Country | inputlookup append=t previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by sourceIPAddress, City, Region, Country | outputlookup previously_seen_provisioning_activity_src.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by Region | eval newRegion=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newRegion=1 | table Region] | spath output=user userIdentity.arn | rename sourceIPAddress as src_ip | table _time, user, src_ip, Region, eventName, errorCode | `aws_cloud_provisioning_from_previously_unseen_region_filter`",50,['T1535'],{'cloudtrail'},286.0,"['provisioning', 'aws', 'regions', 'region', 'search']"
s112,Clients Connecting to Multiple DNS Servers,This search allows you to identify the endpoints that have connected to more than five DNS servers and made DNS Queries over the time frame of the search.,"| tstats `security_content_summariesonly` count, values(DNS.dest) AS dest dc(DNS.dest) as dest_count from datamodel=Network_Resolution where DNS.message_type=QUERY by DNS.src | `drop_dm_object_name(""Network_Resolution"")` |where dest_count > 5 | `clients_connecting_to_multiple_dns_servers_filter` ",50,['T1048.003'],{'dns'},162.0,"['dns', 'search', 'endpoints', 'queries', 'servers']"
s113,Cloud Network Access Control List Deleted,"Enforcing network-access controls is one of the defensive mechanisms used by cloud administrators to restrict access to a cloud instance. After the attacker has gained control of the console by compromising an admin account, they can delete a network ACL and gain access to the instance from anywhere. This search will query the Change datamodel to detect users deleting network ACLs. Deprecated because it's a duplicate",`cloudtrail` eventName=DeleteNetworkAcl|rename userIdentity.arn as arn  | stats count min(_time) as firstTime max(_time) as lastTime values(errorMessage) values(errorCode) values(userAgent) values(userIdentity.*) by src userName arn eventName | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `cloud_network_access_control_list_deleted_filter`,50,,"{'cloud computing', 'cloudtrail'}",7.0,"['acls', 'acl', 'administrators', 'access', 'cloud']"
s114,Detection of DNS Tunnels,"This search is used to detect DNS tunneling, by calculating the sum of the length of DNS queries and DNS answers. The search also filters out potential false positives by filtering out queries made to internal systems and the queries originating from internal DNS, Web, and Email servers. Endpoints using DNS as a method of transmission for data exfiltration, command and control, or evasion of security controls can often be detected by noting an unusually large volume of DNS traffic. \
NOTE:Deprecated because existing detection is doing the same. This detection is replaced with two other variations, if you are using MLTK then you can use this search `ESCU - DNS Query Length Outliers - MLTK - Rule` or use the standard deviation version `ESCU - DNS Query Length With High Standard Deviation - Rule`, as an alternantive.","| tstats `security_content_summariesonly` dc(""DNS.query"") as count  from datamodel=Network_Resolution  where nodename=DNS ""DNS.message_type""=""QUERY"" NOT (`cim_corporate_web_domain_search(""DNS.query"")`) NOT ""DNS.query""=""*.in-addr.arpa"" NOT (""DNS.src_category""=""svc_infra_dns"" OR ""DNS.src_category""=""svc_infra_webproxy"" OR ""DNS.src_category""=""svc_infra_email*""   ) by ""DNS.src"",""DNS.query"" | rename ""DNS.src"" as src  ""DNS.query"" as message | eval length=len(message) | stats sum(length) as length by src | append [ tstats `security_content_summariesonly` dc(""DNS.answer"") as count  from datamodel=Network_Resolution  where nodename=DNS ""DNS.message_type""=""QUERY"" NOT (`cim_corporate_web_domain_search(""DNS.query"")`) NOT ""DNS.query""=""*.in-addr.arpa"" NOT (""DNS.src_category""=""svc_infra_dns"" OR ""DNS.src_category""=""svc_infra_webproxy"" OR ""DNS.src_category""=""svc_infra_email*""   ) by ""DNS.src"",""DNS.answer"" | rename ""DNS.src"" as src  ""DNS.answer"" as message | eval message=if(message==""unknown"","""", message) | eval length=len(message) | stats sum(length) as length by src ] | stats sum(length) as length by src | where length > 10000 | `detection_of_dns_tunnels_filter`",50,['T1048.003'],{'dns'},162.0,"['dns', 'search', 'detect', 'detection', 'tunneling']"
s115,Detect API activity from users without MFA,"This search looks for AWS CloudTrail events where a user logged into the AWS account, is making API calls and has not enabled Multi Factor authentication. Multi factor authentication adds a layer of security by forcing the users to type a unique authentication code from an approved authentication device when they access AWS websites or services. AWS Best Practices recommend that you enable MFA for privileged IAM users.",`cloudtrail` userIdentity.sessionContext.attributes.mfaAuthenticated=false | search NOT [| inputlookup aws_service_accounts | fields identity | rename identity as user]| stats  count min(_time) as firstTime max(_time) as lastTime values(eventName) as eventName by userIdentity.arn userIdentity.type user | `security_content_ctime(firstTime)`  | `security_content_ctime(lastTime)` | `detect_api_activity_from_users_without_mfa_filter`,50,,"{'leverage', 'cloudtrail'}",,"['aws', 'authentication', 'mfa', 'cloudtrail', 'iam']"
s116,Detect AWS API Activities From Unapproved Accounts,"This search looks for successful AWS CloudTrail activity by user accounts that are not listed in the identity table or `aws_service_accounts.csv`. It returns event names and count, as well as the first and last time a specific user or service is detected, grouped by users. Deprecated because managing this list can be quite hard.",`cloudtrail` errorCode=success | rename userName as identity | search NOT [| inputlookup identity_lookup_expanded | fields identity] | search NOT [| inputlookup aws_service_accounts | fields identity] | rename identity as user | stats count min(_time) as firstTime max(_time) as lastTime values(eventName) as eventName by user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_aws_api_activities_from_unapproved_accounts_filter`,50,['T1078.004'],"{'leverage', 'cloudtrail'}",,"['aws_service_accounts', 'cloudtrail', 'aws', 'accounts', 'users']"
s117,Detect DNS requests to Phishing Sites leveraging EvilGinx2,This search looks for DNS requests for phishing domains that are leveraging EvilGinx tools to mimic websites.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(DNS.answer) as answer from datamodel=Network_Resolution.DNS by DNS.dest DNS.src DNS.query host | `drop_dm_object_name(DNS)`| rex field=query "".*?(?<domain>[^./:]+\.(\S{2,3}|\S{2,3}.\S{2,3}))$"" | stats count values(query) as query by domain dest src answer| search `evilginx_phishlets_amazon` OR `evilginx_phishlets_facebook` OR `evilginx_phishlets_github` OR `evilginx_phishlets_0365` OR `evilginx_phishlets_outlook` OR `evilginx_phishlets_aws` OR `evilginx_phishlets_google` | search NOT [ inputlookup legit_domains.csv | fields domain]| join domain type=outer [| tstats count `security_content_summariesonly` values(Web.url) as url from datamodel=Web.Web by Web.dest Web.site | rename ""Web.*"" as * | rex field=site "".*?(?<domain>[^./:]+\.(\S{2,3}|\S{2,3}.\S{2,3}))$"" | table dest domain url] | table count src dest query answer domain url | `detect_dns_requests_to_phishing_sites_leveraging_evilginx2_filter`",50,['T1566.003'],"{'rex', 'dns'}",223.0,"['phishing', 'evilginx', 'domains', 'dns', 'requests']"
s118,Detect Long DNS TXT Record Response,"This search is used to detect attempts to use DNS tunneling, by calculating the length of responses to DNS TXT queries. Endpoints using DNS as a method of transmission for data exfiltration, command and control, or evasion of security controls can often be detected by noting unusually large volumes of DNS traffic. Deprecated because this detection should focus on DNS queries instead of DNS responses.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Resolution where DNS.message_type=response AND DNS.record_type=TXT by DNS.src DNS.dest DNS.answer DNS.record_type |  `drop_dm_object_name(""DNS"")` | eval anslen=len(answer) | search anslen>100 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename src as ""Source IP"", dest as ""Destination IP"", answer as ""DNS Answer"" anslen as ""Answer Length"" record_type as ""DNS Record Type"" firstTime as ""First Time"" lastTime as ""Last Time"" count as Count | table ""Source IP"" ""Destination IP"" ""DNS Answer"" ""DNS Record Type""  ""Answer Length"" Count ""First Time"" ""Last Time"" | `detect_long_dns_txt_record_response_filter`",50,['T1048.003'],{'dns'},222.0,"['dns', 'tunneling', 'endpoints', 'search', 'traffic']"
s119,Detect Mimikatz Via PowerShell And EventCode 4703,"This search looks for PowerShell requesting privileges consistent with credential dumping. Deprecated, looks like things changed from a logging perspective.","`wineventlog_security` signature_id=4703 Process_Name=*powershell.exe | rex field=Message ""Enabled Privileges:\s+(?<privs>\w+)\s+Disabled Privileges:"" | where privs=""SeDebugPrivilege"" | stats count min(_time) as firstTime max(_time) as lastTime by dest, Process_Name, privs, Process_ID, Message | rename privs as ""Enabled Privilege"" | rename Process_Name as process |  `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mimikatz_via_powershell_and_eventcode_4703_filter`",50,['T1003.001'],"{'rex', 'powershell', 'privilege', 'mimikatz'}",,"['powershell', 'credential', 'privileges', 'logging', 'dumping']"
s120,Detect new API calls from user roles,"This search detects new API calls that have either never been seen before or that have not been seen in the previous hour, where the identity type is `AssumedRole`.","`cloudtrail` eventType=AwsApiCall errorCode=success userIdentity.type=AssumedRole [search `cloudtrail` eventType=AwsApiCall errorCode=success  userIdentity.type=AssumedRole | stats earliest(_time) as earliest latest(_time) as latest by userName eventName |  inputlookup append=t previously_seen_api_calls_from_user_roles | stats min(earliest) as earliest, max(latest) as latest by userName eventName | outputlookup previously_seen_api_calls_from_user_roles| eval newApiCallfromUserRole=if(earliest>=relative_time(now(), ""-70m@m""), 1, 0) | where newApiCallfromUserRole=1 | `security_content_ctime(earliest)` | `security_content_ctime(latest)` | table eventName userName]  |rename userName as user| stats values(eventName) earliest(_time) as earliest latest(_time) as latest by user | `security_content_ctime(earliest)` | `security_content_ctime(latest)` | `detect_new_api_calls_from_user_roles_filter`",50,['T1078.004'],{'cloudtrail'},285.0,"['api', 'search', 'assumedrole', 'identity', 'detects']"
s121,Detect new user AWS Console Login,"This search looks for AWS CloudTrail events wherein a console login event by a user was recorded within the last hour, then compares the event to a lookup file of previously seen users (by ARN values) who have logged into the console. The alert is fired if the user has logged into the console for the first time within the last hour. Deprecated now this search is updated to use the Authentication datamodel.","`cloudtrail` eventName=ConsoleLogin | rename userIdentity.arn as user | stats earliest(_time) as firstTime latest(_time) as lastTime by user | inputlookup append=t previously_seen_users_console_logins_cloudtrail  | stats min(firstTime) as firstTime max(lastTime) as lastTime by user | eval userStatus=if(firstTime >= relative_time(now(), ""-70m@m""), ""First Time Logging into AWS Console"",""Previously Seen User"") | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)`| where userStatus =""First Time Logging into AWS Console""  | `detect_new_user_aws_console_login_filter`",50,['T1078.004'],{'cloudtrail'},225.0,"['authentication', 'alert', 'logged', 'cloudtrail', 'login']"
s122,Detect Spike in AWS API Activity,This search will detect users creating spikes of API activity in your AWS environment.  It will also update the cache file that factors in the latest data. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventType=AwsApiCall [search `cloudtrail` eventType=AwsApiCall | spath output=arn path=userIdentity.arn | stats count as apiCalls by arn | inputlookup api_call_by_user_baseline append=t | fields - latestCount | stats values(*) as * by arn | rename apiCalls as latestCount | eval newAvgApiCalls=avgApiCalls + (latestCount-avgApiCalls)/720 | eval newStdevApiCalls=sqrt(((pow(stdevApiCalls, 2)*719 + (latestCount-newAvgApiCalls)*(latestCount-avgApiCalls))/720)) | eval avgApiCalls=coalesce(newAvgApiCalls, avgApiCalls), stdevApiCalls=coalesce(newStdevApiCalls, stdevApiCalls), numDataPoints=if(isnull(latestCount), numDataPoints, numDataPoints+1) | table arn, latestCount, numDataPoints, avgApiCalls, stdevApiCalls | outputlookup api_call_by_user_baseline | eval dataPointThreshold = 15, deviationThreshold = 3 | eval isSpike=if((latestCount > avgApiCalls+deviationThreshold*stdevApiCalls) AND numDataPoints > dataPointThreshold, 1, 0) | where isSpike=1 | rename arn as userIdentity.arn | table userIdentity.arn] | spath output=user userIdentity.arn | stats values(eventName) as eventName, count as numberOfApiCalls, dc(eventName) as uniqueApisCalled by user | `detect_spike_in_aws_api_activity_filter`",50,['T1078.004'],{'cloudtrail'},285.0,"['aws', 'search', 'api', 'cache', 'data']"
s123,Detect Spike in Network ACL Activity,This search will detect users creating spikes in API activity related to network access-control lists (ACLs)in your AWS environment. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` `network_acl_events` [search `cloudtrail` `network_acl_events` | spath output=arn path=userIdentity.arn | stats count as apiCalls by arn | inputlookup network_acl_activity_baseline append=t | fields - latestCount | stats values(*) as * by arn | rename apiCalls as latestCount | eval newAvgApiCalls=avgApiCalls + (latestCount-avgApiCalls)/720 | eval newStdevApiCalls=sqrt(((pow(stdevApiCalls, 2)*719 + (latestCount-newAvgApiCalls)*(latestCount-avgApiCalls))/720)) | eval avgApiCalls=coalesce(newAvgApiCalls, avgApiCalls), stdevApiCalls=coalesce(newStdevApiCalls, stdevApiCalls), numDataPoints=if(isnull(latestCount), numDataPoints, numDataPoints+1) | table arn, latestCount, numDataPoints, avgApiCalls, stdevApiCalls | outputlookup network_acl_activity_baseline | eval dataPointThreshold = 15, deviationThreshold = 3 | eval isSpike=if((latestCount > avgApiCalls+deviationThreshold*stdevApiCalls) AND numDataPoints > dataPointThreshold, 1, 0) | where isSpike=1 | rename arn as userIdentity.arn | table userIdentity.arn] | spath output=user userIdentity.arn | stats values(eventName) as eventNames, count as numberOfApiCalls, dc(eventName) as uniqueApisCalled by user | `detect_spike_in_network_acl_activity_filter`",50,['T1562.007'],{'cloudtrail'},280.0,"['acls', 'aws', 'search', 'api', 'access']"
s124,Detect Spike in Security Group Activity,This search will detect users creating spikes in API activity related to security groups in your AWS environment.  It will also update the cache file that factors in the latest data.  This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` `security_group_api_calls` [search `cloudtrail` `security_group_api_calls` | spath output=arn path=userIdentity.arn | stats count as apiCalls by arn | inputlookup security_group_activity_baseline append=t | fields - latestCount | stats values(*) as * by arn | rename apiCalls as latestCount | eval newAvgApiCalls=avgApiCalls + (latestCount-avgApiCalls)/720 | eval newStdevApiCalls=sqrt(((pow(stdevApiCalls, 2)*719 + (latestCount-newAvgApiCalls)*(latestCount-avgApiCalls))/720)) | eval avgApiCalls=coalesce(newAvgApiCalls, avgApiCalls), stdevApiCalls=coalesce(newStdevApiCalls, stdevApiCalls), numDataPoints=if(isnull(latestCount), numDataPoints, numDataPoints+1) | table arn, latestCount, numDataPoints, avgApiCalls, stdevApiCalls | outputlookup security_group_activity_baseline | eval dataPointThreshold = 15, deviationThreshold = 3 | eval isSpike=if((latestCount > avgApiCalls+deviationThreshold*stdevApiCalls) AND numDataPoints > dataPointThreshold, 1, 0) | where isSpike=1 | rename arn as userIdentity.arn | table userIdentity.arn] | spath output=user userIdentity.arn | stats values(eventName) as eventNames, count as numberOfApiCalls, dc(eventName) as uniqueApisCalled by user | `detect_spike_in_security_group_activity_filter`",50,['T1078.004'],{'cloudtrail'},285.0,"['aws', 'search', 'api', 'cache', 'security']"
s125,Detect USB device insertion,"The search is used to detect hosts that generate Windows Event ID 4663 for successful attempts to write to or read from a removable storage and Event ID 4656 for failures, which occurs when a USB drive is plugged in. In this scenario we are querying the Change_Analysis data model to look for Windows Event ID 4656 or 4663 where the priority of the affected host is marked as high in the ES Assets and Identity Framework.","| tstats `security_content_summariesonly` count earliest(_time) AS earliest latest(_time) AS latest from datamodel=Change_Analysis where (nodename = All_Changes) All_Changes.result=""Removable Storage device"" (All_Changes.result_id=4663 OR All_Changes.result_id=4656) (All_Changes.src_priority=high) by All_Changes.dest | `drop_dm_object_name(""All_Changes"")`| `security_content_ctime(earliest)`| `security_content_ctime(latest)`  | `detect_usb_device_insertion_filter`",50,,{'usb'},285.0,"['detect', 'usb', 'change_analysis', 'event', 'search']"
s126,Detect web traffic to dynamic domain providers,This search looks for web connections to dynamic DNS providers.,"| tstats `security_content_summariesonly` count values(Web.url) as url min(_time) as firstTime from datamodel=Web where Web.status=200 by Web.src Web.dest Web.status | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `dynamic_dns_web_traffic` | `detect_web_traffic_to_dynamic_domain_providers_filter`",50,['T1071.001'],{'dns'},162.0,"['dns', 'connections', 'providers', 'web', 'dynamic']"
s127,DNS Query Requests Resolved by Unauthorized DNS Servers,This search will detect DNS requests resolved by unauthorized DNS servers. Legitimate DNS servers should be identified in the Enterprise Security Assets and Identity Framework.,"| tstats `security_content_summariesonly` count from datamodel=Network_Resolution where DNS.dest_category != dns_server AND DNS.src_category != dns_server by DNS.src DNS.dest | `drop_dm_object_name(""DNS"")` | `dns_query_requests_resolved_by_unauthorized_dns_servers_filter` ",50,['T1071.004'],{'dns'},162.0,"['dns', 'search', 'requests', 'unauthorized', 'detect']"
s128,DNS record changed,The search takes the DNS records and their answers results of the discovered_dns_records lookup and finds if any records have changed by searching DNS response from the Network_Resolution datamodel across the last day.,"| inputlookup discovered_dns_records | rename answer as discovered_answer | join domain[|tstats `security_content_summariesonly` count values(DNS.record_type) as type, values(DNS.answer) as current_answer values(DNS.src) as src from datamodel=Network_Resolution where DNS.message_type=RESPONSE DNS.answer!=""unknown"" DNS.answer!="""" by DNS.query | rename DNS.query as query | where query!=""unknown"" | rex field=query ""(?<domain>\w+\.\w+?)(?:$|/)""] | makemv delim="" "" answer |  makemv delim="" "" type | sort -count | table count,src,domain,type,query,current_answer,discovered_answer | makemv current_answer  | mvexpand current_answer | makemv discovered_answer | eval n=mvfind(discovered_answer, current_answer) | where isnull(n) | `dns_record_changed_filter`",50,['T1071.004'],"{'rex', 'network', 'dns'}",292.0,"['discovered_dns_records', 'network_resolution', 'searching', 'dns', 'search']"
s129,Dump LSASS via procdump Rename,"Detect a renamed instance of procdump.exe dumping the lsass process. This query looks for both -mm and -ma usage. -mm will produce a mini dump file and -ma will write a dump file with all process memory. Both are highly suspect and should be reviewed. Modify the query as needed.\
During triage, confirm this is procdump.exe executing. If it is the first time a Sysinternals utility has been ran, it is possible there will be a -accepteula on the command line. Review other endpoint data sources for cross process (injection) into lsass.exe.","`sysmon` OriginalFileName=procdump  process_name!=procdump*.exe  EventID=1 (CommandLine=*-ma* OR CommandLine=*-mm*) CommandLine=*lsass* | rename Computer as dest |  stats count min(_time) as firstTime max(_time) as lastTime by dest, parent_process_name, process_name, OriginalFileName, CommandLine | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dump_lsass_via_procdump_rename_filter`",80,['T1003.001'],"{'hafnium', 'lsass'}",,"['procdump', 'lsass', 'dumping', 'dump', 'process']"
s130,EC2 Instance Modified With Previously Unseen User,This search looks for EC2 instances being modified by users who have not previously modified them. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` `ec2_modification_api_calls` [search `cloudtrail` `ec2_modification_api_calls` errorCode=success | stats earliest(_time) as firstTime latest(_time) as lastTime by userIdentity.arn | rename userIdentity.arn as arn | inputlookup append=t previously_seen_ec2_modifications_by_user | stats min(firstTime) as firstTime, max(lastTime) as lastTime by arn | outputlookup previously_seen_ec2_modifications_by_user | eval newUser=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newUser=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename arn as userIdentity.arn | table userIdentity.arn] | spath output=dest responseElements.instancesSet.items{}.instanceId | spath output=user userIdentity.arn | table _time, user, dest | `ec2_instance_modified_with_previously_unseen_user_filter`",50,['T1078.004'],"{'cloudtrail', 'aws'}",285.0,"['ec2', 'search', 'modified', 'instances', 'datamodel']"
s131,EC2 Instance Started In Previously Unseen Region,This search looks for AWS CloudTrail events where an instance is started in a particular region in the last one hour and then compares it to a lookup file of previously seen regions where an instance was started,"`cloudtrail` earliest=-1h StartInstances | stats earliest(_time) as earliest latest(_time) as latest by awsRegion | inputlookup append=t previously_seen_aws_regions.csv | stats min(earliest) as earliest max(latest) as latest by awsRegion | outputlookup previously_seen_aws_regions.csv | eval regionStatus=if(earliest >= relative_time(now(),""-1d@d""), ""Instance Started in a New Region"",""Previously Seen Region"") | `security_content_ctime(earliest)` | `security_content_ctime(latest)` | where regionStatus=""Instance Started in a New Region"" | `ec2_instance_started_in_previously_unseen_region_filter`",50,['T1535'],{'cloudtrail'},280.0,"['cloudtrail', 'aws', 'search', 'instance', 'events']"
s132,EC2 Instance Started With Previously Unseen AMI,This search looks for EC2 instances being created with previously unseen AMIs.  This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventName=RunInstances [search `cloudtrail` eventName=RunInstances errorCode=success | stats earliest(_time) as firstTime latest(_time) as lastTime by requestParameters.instancesSet.items{}.imageId | rename requestParameters.instancesSet.items{}.imageId as amiID | inputlookup append=t previously_seen_ec2_amis.csv | stats min(firstTime) as firstTime max(lastTime) as lastTime by amiID | outputlookup previously_seen_ec2_amis.csv | eval newAMI=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | where newAMI=1 | rename amiID as requestParameters.instancesSet.items{}.imageId | table requestParameters.instancesSet.items{}.imageId] | rename requestParameters.instanceType as instanceType, responseElements.instancesSet.items{}.instanceId as dest, userIdentity.arn as arn, requestParameters.instancesSet.items{}.imageId as amiID | table firstTime, lastTime, arn, amiID, dest, instanceType | `ec2_instance_started_with_previously_unseen_ami_filter`",50,,"{'cloudtrail', 'aws'}",285.0,"['ec2', 'amis', 'instances', 'search', 'datamodel']"
s133,EC2 Instance Started With Previously Unseen Instance Type,This search looks for EC2 instances being created with previously unseen instance types.  This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventName=RunInstances [search `cloudtrail` eventName=RunInstances errorCode=success | fillnull value=""m1.small"" requestParameters.instanceType | stats earliest(_time) as earliest latest(_time) as latest by requestParameters.instanceType | rename requestParameters.instanceType as instanceType | inputlookup append=t previously_seen_ec2_instance_types.csv | stats min(earliest) as earliest max(latest) as latest by instanceType | outputlookup previously_seen_ec2_instance_types.csv | eval newType=if(earliest >= relative_time(now(), ""-70m@m""), 1, 0) | `security_content_ctime(earliest)` | `security_content_ctime(latest)` | where newType=1 | rename instanceType as requestParameters.instanceType | table requestParameters.instanceType] | spath output=user userIdentity.arn | rename requestParameters.instanceType as instanceType, responseElements.instancesSet.items{}.instanceId as dest | table _time, user, dest, instanceType | `ec2_instance_started_with_previously_unseen_instance_type_filter`",50,,"{'cloudtrail', 'aws'}",285.0,"['instances', 'instance', 'ec2', 'search', 'types']"
s134,EC2 Instance Started With Previously Unseen User,This search looks for EC2 instances being created by users who have not created them before. This search is deprecated and have been translated to use the latest Change Datamodel.,"`cloudtrail` eventName=RunInstances [search `cloudtrail` eventName=RunInstances errorCode=success | stats earliest(_time) as firstTime latest(_time) as lastTime by userIdentity.arn | rename userIdentity.arn as arn | inputlookup append=t previously_seen_ec2_launches_by_user.csv | stats min(firstTime) as firstTime, max(lastTime) as lastTime by arn | outputlookup previously_seen_ec2_launches_by_user.csv | eval newUser=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newUser=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename arn as userIdentity.arn | table userIdentity.arn] | rename requestParameters.instanceType as instanceType, responseElements.instancesSet.items{}.instanceId as dest, userIdentity.arn as user | table _time, user, dest, instanceType | `ec2_instance_started_with_previously_unseen_user_filter`",50,['T1078.004'],"{'cloudtrail', 'aws'}",285.0,"['ec2', 'instances', 'search', 'datamodel', 'created']"
s135,Execution of File With Spaces Before Extension,This search looks for processes launched from files with at least five spaces in the name before the extension. This is typically done to obfuscate the file extension by pushing it outside of the default view.,"| tstats `security_content_summariesonly` count values(Processes.process_path) as process_path min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*     .*"" by Processes.dest Processes.user Processes.process Processes.process_name | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | `execution_of_file_with_spaces_before_extension_filter`",50,['T1036.003'],,60.0,"['extension', 'processes', 'search', 'launched', 'files']"
s136,Extended Period Without Successful Netbackup Backups,This search returns a list of hosts that have not successfully completed a backup in over a week. Deprecated because it's a infrastructure monitoring.,"`netbackup` MESSAGE=""Disk/Partition backup completed successfully."" | stats latest(_time) as latestTime by COMPUTERNAME | `security_content_ctime(latestTime)` | rename COMPUTERNAME as dest | eval isOutlier=if(latestTime <= relative_time(now(), ""-7d@d""), 1, 0) | search isOutlier=1 | table latestTime, dest | `extended_period_without_successful_netbackup_backups_filter`",50,,{'backup'},285.0,"['backup', 'hosts', 'search', 'deprecated', 'monitoring']"
s137,First time seen command line argument,This search looks for command-line arguments that use a `/c` parameter to execute a command that has not previously been seen.,"| tstats `security_content_summariesonly` min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = cmd.exe Processes.process = ""* /c *"" by Processes.process Processes.process_name Processes.parent_process_name Processes.dest| `drop_dm_object_name(Processes)`| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search [| tstats `security_content_summariesonly` earliest(_time) as firstTime latest(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = cmd.exe Processes.process = ""* /c *"" by Processes.process | `drop_dm_object_name(Processes)` | inputlookup append=t previously_seen_cmd_line_arguments | stats min(firstTime) as firstTime, max(lastTime) as lastTime by process | outputlookup previously_seen_cmd_line_arguments | eval newCmdLineArgument=if(firstTime >= relative_time(now(), ""-70m@m""), 1, 0) | where newCmdLineArgument=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table process] | `first_time_seen_command_line_argument_filter` ",50,"['T1059.001', 'T1059.003']","{'orangeworm', 'hidden cobra', 'mudcarp'}",,"['command', 'execute', 'parameter', 'arguments', 'search']"
s138,GCP Detect accounts with high risk roles by project,This search provides detection of accounts with high risk roles by projects. Compromised accounts with high risk roles can move laterally or even scalate privileges at different projects depending on organization schema.,`google_gcp_pubsub_message` data.protoPayload.request.policy.bindings{}.role=roles/owner OR roles/editor OR roles/iam.serviceAccountUser OR roles/iam.serviceAccountAdmin OR roles/iam.serviceAccountTokenCreator OR roles/dataflow.developer OR roles/dataflow.admin OR roles/composer.admin OR roles/dataproc.admin OR roles/dataproc.editor | table data.resource.type data.protoPayload.authenticationInfo.principalEmail data.protoPayload.authorizationInfo{}.permission data.protoPayload.authorizationInfo{}.resource data.protoPayload.response.bindings{}.role data.protoPayload.response.bindings{}.members{} | `gcp_detect_accounts_with_high_risk_roles_by_project_filter`,50,['T1078'],{'privilege'},273.0,"['accounts', 'privileges', 'roles', 'compromised', 'organization']"
s139,GCP Detect high risk permissions by resource and account,This search provides detection of high risk permissions by resource and accounts. These are permissions that can allow attackers with compromised accounts to move laterally and escalate privileges.,`google_gcp_pubsub_message` data.protoPayload.authorizationInfo{}.permission=iam.serviceAccounts.getaccesstoken OR iam.serviceAccounts.setIamPolicy OR iam.serviceAccounts.actas OR dataflow.jobs.create OR composer.environments.create OR dataproc.clusters.create |table data.protoPayload.requestMetadata.callerIp data.protoPayload.authenticationInfo.principalEmail data.protoPayload.authorizationInfo{}.permission data.protoPayload.response.bindings{}.members{} data.resource.labels.project_id | `gcp_detect_high_risk_permissions_by_resource_and_account_filter`,50,['T1078'],"{'permission', 'privilege'}",273.0,"['permissions', 'privileges', 'compromised', 'accounts', 'search']"
s140,gcp detect oauth token abuse,"This search provides detection of possible GCP Oauth token abuse. GCP Oauth token without time limit can be exfiltrated and reused for keeping access sessions alive without further control of authentication, allowing attackers to access and move laterally.",`google_gcp_pubsub_message` type.googleapis.com/google.cloud.audit.AuditLog |table protoPayload.@type protoPayload.status.details{}.@type protoPayload.status.details{}.violations{}.callerIp protoPayload.status.details{}.violations{}.type protoPayload.status.message  | `gcp_detect_oauth_token_abuse_filter`,50,['T1078'],{'gcp'},293.0,"['gcp', 'oauth', 'token', 'authentication', 'sessions']"
s141,GCP Kubernetes cluster scan detection,"This search provides information of unauthenticated requests via user agent, and authentication data against Kubernetes cluster","`google_gcp_pubsub_message` data.protoPayload.requestMetadata.callerIp!=127.0.0.1 data.protoPayload.requestMetadata.callerIp!=::1 ""data.labels.authorization.k8s.io/decision""=forbid ""data.protoPayload.status.message""=PERMISSION_DENIED data.protoPayload.authenticationInfo.principalEmail=""system:anonymous"" | rename data.protoPayload.requestMetadata.callerIp as src_ip | stats count min(_time) as firstTime max(_time) as lastTime values(data.protoPayload.methodName) as method_name values(data.protoPayload.resourceName) as resource_name values(data.protoPayload.requestMetadata.callerSuppliedUserAgent) as http_user_agent by src_ip data.resource.labels.cluster_name | rename data.resource.labels.cluster_name as cluster_name| `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`  | `gcp_kubernetes_cluster_scan_detection_filter` ",50,['T1526'],"{'authenticate', 'kubernetes'}",290.0,"['kubernetes', 'unauthenticated', 'authentication', 'requests', 'cluster']"
s142,Identify New User Accounts,This detection search will help profile user accounts in your environment by identifying newly created accounts that have been added to your network in the past week.,"| from datamodel Identity_Management.All_Identities  | eval empStatus=case((now()-startDate)<604800, ""Accounts created in last week"") | search empStatus=""Accounts created in last week""| `security_content_ctime(endDate)` | `security_content_ctime(startDate)`| table identity empStatus endDate startDate | `identify_new_user_accounts_filter`",50,['T1078.002'],,134.0,"['profile', 'accounts', 'search', 'detection', 'user']"
s143,Kubernetes AWS detect most active service accounts by pod,"This search provides information on Kubernetes service accounts,accessing pods by IP address, verb and decision",`aws_cloudwatchlogs_eks` user.groups{}=system:serviceaccounts  objectRef.resource=pods | table  sourceIPs{} user.username userAgent verb annotations.authorization.k8s.io/decision  | top  sourceIPs{} user.username verb annotations.authorization.k8s.io/decision |`kubernetes_aws_detect_most_active_service_accounts_by_pod_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'pods', 'ip', 'service', 'accounts']"
s144,Kubernetes AWS detect RBAC authorization by account,"This search provides information on Kubernetes RBAC authorizations by accounts, this search can be modified by adding top to see both extremes of RBAC by accounts occurrences",`aws_cloudwatchlogs_eks` annotations.authorization.k8s.io/reason=* | table sourceIPs{} user.username userAgent annotations.authorization.k8s.io/reason | stats count by user.username annotations.authorization.k8s.io/reason | rare user.username annotations.authorization.k8s.io/reason |`kubernetes_aws_detect_rbac_authorization_by_account_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'rbac', 'authorizations', 'accounts', 'search']"
s145,AWS EKS Kubernetes cluster sensitive object access,This search provides information on Kubernetes accounts accessing sensitve objects such as configmaps or secrets,`aws_cloudwatchlogs_eks` objectRef.resource=secrets OR configmaps sourceIPs{}!=::1 sourceIPs{}!=127.0.0.1  |table sourceIPs{} user.username user.groups{} objectRef.resource objectRef.namespace objectRef.name annotations.authorization.k8s.io/reason |dedup user.username user.groups{} |`aws_eks_kubernetes_cluster_sensitive_object_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'configmaps', 'accounts', 'secrets', 'accessing']"
s146,Kubernetes AWS detect sensitive role access,This search provides information on Kubernetes accounts accessing sensitve objects such as configmpas or secrets,`aws_cloudwatchlogs_eks` objectRef.resource=clusterroles OR clusterrolebindings sourceIPs{}!=::1 sourceIPs{}!=127.0.0.1  | table sourceIPs{} user.username user.groups{} objectRef.namespace requestURI annotations.authorization.k8s.io/reason | dedup user.username user.groups{} |`kubernetes_aws_detect_sensitive_role_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'configmpas', 'accounts', 'secrets', 'accessing']"
s147,Kubernetes AWS detect service accounts forbidden failure access,"This search provides information on Kubernetes service accounts with failure or forbidden access status, this search can be extended by using top or rare operators to find trends or rarities in failure status, user agents, source IPs and request URI",`aws_cloudwatchlogs_eks` user.groups{}=system:serviceaccounts responseStatus.status = Failure | table sourceIPs{} user.username userAgent verb responseStatus.status requestURI | `kubernetes_aws_detect_service_accounts_forbidden_failure_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'search', 'accounts', 'ips', 'service']"
s148,Kubernetes Azure active service accounts by pod namespace,"This search provides information on Kubernetes service accounts,accessing pods and namespaces by IP address and verb",`kubernetes_azure` category=kube-audit | spath input=properties.log | search user.groups{}=system:serviceaccounts* OR user.username=system.anonymous OR annotations.authorization.k8s.io/decision=allow  | table  sourceIPs{} user.username userAgent verb responseStatus.reason responseStatus.status properties.pod objectRef.namespace | top sourceIPs{} user.username verb responseStatus.status properties.pod objectRef.namespace |`kubernetes_azure_active_service_accounts_by_pod_namespace_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'pods', 'namespaces', 'ip', 'address']"
s149,Kubernetes Azure detect RBAC authorization by account,"This search provides information on Kubernetes RBAC authorizations by accounts, this search can be modified by adding rare or top to see both extremes of RBAC by accounts occurrences",`kubernetes_azure` category=kube-audit | spath input=properties.log | search annotations.authorization.k8s.io/reason=* | table sourceIPs{} user.username userAgent annotations.authorization.k8s.io/reason |stats count by user.username annotations.authorization.k8s.io/reason | rare user.username annotations.authorization.k8s.io/reason |`kubernetes_azure_detect_rbac_authorization_by_account_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'rbac', 'authorizations', 'accounts', 'search']"
s150,Kubernetes Azure detect sensitive object access,This search provides information on Kubernetes accounts accessing sensitve objects such as configmpas or secrets,`kubernetes_azure` category=kube-audit | spath input=properties.log| search objectRef.resource=secrets OR configmaps user.username=system.anonymous OR annotations.authorization.k8s.io/decision=allow  |table user.username user.groups{} objectRef.resource objectRef.namespace objectRef.name annotations.authorization.k8s.io/reason |dedup user.username user.groups{} |`kubernetes_azure_detect_sensitive_object_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'configmpas', 'accounts', 'secrets', 'accessing']"
s151,Kubernetes Azure detect sensitive role access,This search provides information on Kubernetes accounts accessing sensitve objects such as configmpas or secrets,`kubernetes_azure` category=kube-audit | spath input=properties.log| search objectRef.resource=clusterroles OR clusterrolebindings | table sourceIPs{} user.username user.groups{} objectRef.namespace requestURI annotations.authorization.k8s.io/reason | dedup user.username user.groups{} |`kubernetes_azure_detect_sensitive_role_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'configmpas', 'accounts', 'secrets', 'accessing']"
s152,Kubernetes Azure detect service accounts forbidden failure access,This search provides information on Kubernetes service accounts with failure or forbidden access status,`kubernetes_azure` category=kube-audit | spath input=properties.log | search user.groups{}=system:serviceaccounts*  responseStatus.reason=Forbidden | table  sourceIPs{} user.username userAgent verb responseStatus.reason responseStatus.status properties.pod objectRef.namespace  |`kubernetes_azure_detect_service_accounts_forbidden_failure_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'accounts', 'service', 'access', 'failure']"
s153,Kubernetes Azure detect suspicious kubectl calls,"This search provides information on rare Kubectl calls with IP, verb namespace and object access context",`kubernetes_azure` category=kube-audit | spath input=properties.log | spath input=responseObject.metadata.annotations.kubectl.kubernetes.io/last-applied-configuration | search userAgent=kubectl* sourceIPs{}!=127.0.0.1 sourceIPs{}!=::1 | table sourceIPs{} verb userAgent user.groups{} objectRef.resource objectRef.namespace requestURI | rare sourceIPs{} verb userAgent user.groups{} objectRef.resource objectRef.namespace requestURI |`kubernetes_azure_detect_suspicious_kubectl_calls_filter`,50,,{'kubernetes'},294.0,"['kubectl', 'namespace', 'calls', 'ip', 'context']"
s154,Kubernetes Azure pod scan fingerprint,"This search provides information of unauthenticated requests via source IP user agent, request URI and response status data against Kubernetes cluster pod in Azure",`kubernetes_azure` category=kube-audit | spath input=properties.log | search responseStatus.code=401 | table  sourceIPs{} userAgent verb requestURI responseStatus.reason properties.pod |`kubernetes_azure_pod_scan_fingerprint_filter`,50,,"{'azure', 'authenticate', 'kubernetes'}",290.0,"['kubernetes', 'azure', 'pod', 'unauthenticated', 'requests']"
s155,Kubernetes Azure scan fingerprint,"This search provides information of unauthenticated requests via source IP user agent, request URI and response status data against Kubernetes cluster in Azure",`kubernetes_azure` category=kube-audit | spath input=properties.log | search responseStatus.code=401 | table  sourceIPs{} userAgent verb requestURI responseStatus.reason |`kubernetes_azure_scan_fingerprint_filter`,50,['T1526'],"{'azure', 'authenticate', 'kubernetes'}",290.0,"['kubernetes', 'azure', 'unauthenticated', 'requests', 'cluster']"
s156,Kubernetes GCP detect most active service accounts by pod,"This search provides information on Kubernetes service accounts,accessing pods by IP address, verb and decision",`google_gcp_pubsub_message`  data.protoPayload.request.spec.group{}=system:serviceaccounts | table src_ip src_user http_user_agent data.protoPayload.request.spec.nonResourceAttributes.verb data.labels.authorization.k8s.io/decision data.protoPayload.response.spec.resourceAttributes.resource | top src_ip src_user http_user_agent data.labels.authorization.k8s.io/decision data.protoPayload.response.spec.resourceAttributes.resource |`kubernetes_gcp_detect_most_active_service_accounts_by_pod_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'pods', 'ip', 'service', 'accounts']"
s157,Kubernetes GCP detect RBAC authorizations by account,"This search provides information on Kubernetes RBAC authorizations by accounts, this search can be modified by adding top to see both extremes of RBAC by accounts occurrences",`google_gcp_pubsub_message` data.labels.authorization.k8s.io/reason=ClusterRoleBinding OR Clusterrole  | table src_ip src_user data.labels.authorization.k8s.io/decision data.labels.authorization.k8s.io/reason | rare src_user data.labels.authorization.k8s.io/reason |`kubernetes_gcp_detect_rbac_authorizations_by_account_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'rbac', 'authorizations', 'accounts', 'search']"
s158,Kubernetes GCP detect sensitive object access,This search provides information on Kubernetes accounts accessing sensitve objects such as configmaps or secrets,`google_gcp_pubsub_message` data.protoPayload.authorizationInfo{}.resource=configmaps OR secrets  | table data.protoPayload.requestMetadata.callerIp src_user data.resource.labels.cluster_name data.protoPayload.request.metadata.namespace data.labels.authorization.k8s.io/decision | dedup data.protoPayload.requestMetadata.callerIp src_user data.resource.labels.cluster_name |`kubernetes_gcp_detect_sensitive_object_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'configmaps', 'accounts', 'secrets', 'accessing']"
s159,Kubernetes GCP detect sensitive role access,This search provides information on Kubernetes accounts accessing sensitve objects such as configmpas or secrets,`google_gcp_pubsub_message` data.labels.authorization.k8s.io/reason=ClusterRoleBinding OR Clusterrole dest=apis/rbac.authorization.k8s.io/v1 src_ip!=::1  | table src_ip src_user http_user_agent data.labels.authorization.k8s.io/decision data.labels.authorization.k8s.io/reason | dedup src_ip src_user |`kubernetes_gcp_detect_sensitive_role_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'configmpas', 'accounts', 'secrets', 'accessing']"
s160,Kubernetes GCP detect service accounts forbidden failure access,"This search provides information on Kubernetes service accounts with failure or forbidden access status, this search can be extended by using top or rare operators to find trends or rarities in failure status, user agents, source IPs and request URI",`google_gcp_pubsub_message` system:serviceaccounts data.protoPayload.response.status.allowed!=* | table src_ip src_user http_user_agent data.protoPayload.response.spec.resourceAttributes.namespace data.resource.labels.cluster_name data.protoPayload.response.spec.resourceAttributes.verb  data.protoPayload.request.status.allowed data.protoPayload.response.status.reason data.labels.authorization.k8s.io/decision | dedup src_ip src_user | `kubernetes_gcp_detect_service_accounts_forbidden_failure_access_filter`,50,,{'kubernetes'},290.0,"['kubernetes', 'search', 'accounts', 'ips', 'service']"
s161,Kubernetes GCP detect suspicious kubectl calls,"This search provides information on anonymous Kubectl calls with IP, verb namespace and object access context",`google_gcp_pubsub_message` data.protoPayload.requestMetadata.callerSuppliedUserAgent=kubectl* src_user=system:unsecured OR src_user=system:anonymous | table src_ip src_user data.protoPayload.requestMetadata.callerSuppliedUserAgent data.protoPayload.authorizationInfo{}.granted object_path |dedup src_ip src_user |`kubernetes_gcp_detect_suspicious_kubectl_calls_filter`,50,,{'kubernetes'},294.0,"['kubectl', 'ip', 'anonymous', 'namespace', 'calls']"
s162,Monitor DNS For Brand Abuse,This search looks for DNS requests for faux domains similar to the domains that you want to have monitored for abuse.,"| tstats `security_content_summariesonly` values(DNS.answer) as IPs min(_time) as firstTime from datamodel=Network_Resolution by DNS.src, DNS.query | `drop_dm_object_name(""DNS"")` | `security_content_ctime(firstTime)`| `brand_abuse_dns` | `monitor_dns_for_brand_abuse_filter`",50,,{'dns'},223.0,"['domains', 'dns', 'requests', 'search', 'abuse']"
s163,Open Redirect in Splunk Web,"This search allows you to look for evidence of exploitation for CVE-2016-4859, the Splunk Open Redirect Vulnerability.","index=_internal sourcetype=splunk_web_access return_to=""/%09/*"" | `open_redirect_in_splunk_web_filter`",50,,{'cve-2016-4859'},,"['splunk', 'vulnerability', 'cve', 'exploitation', 'redirect']"
s164,Osquery pack - ColdRoot detection,This search looks for ColdRoot events from the osx-attacks osquery pack.,"| from datamodel Alerts.Alerts | search app=osquery:results (name=pack_osx-attacks_OSX_ColdRoot_RAT_Launchd OR name=pack_osx-attacks_OSX_ColdRoot_RAT_Files) | rename columns.path as path | bucket _time span=30s | stats count(path) by _time, host, user, path | `osquery_pack___coldroot_detection_filter`",50,,{'coldroot'},295.0,"['coldroot', 'osquery', 'osx', 'attacks', 'events']"
s165,Processes created by netsh,"This search looks for processes launching netsh.exe to execute various commands via the netsh command-line utility. Netsh.exe is a command-line scripting utility that allows you to, either locally or remotely, display or modify the network configuration of a computer that is currently running. Netsh can be used as a persistence proxy technique to execute a helper .dll when netsh.exe is executed. In this search, we are looking for processes spawned by netsh.exe that are executing commands via the command line. Deprecated because we have another detection of the same type.",| tstats `security_content_summariesonly` count values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=netsh.exe by Processes.user Processes.dest Processes.parent_process Processes.parent_process_name Processes.process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `processes_created_by_netsh_filter`,50,['T1562.004'],"{'dll', 'netsh'}",,"['netsh', 'commands', 'command', 'dll', 'processes']"
s166,Prohibited Software On Endpoint,This search looks for applications on the endpoint that you have marked as prohibited.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.dest Processes.user Processes.process_name | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | `prohibited_softwares` | `prohibited_software_on_endpoint_filter`,50,,"{'emotet', 'samsam'}",,"['endpoint', 'applications', 'prohibited', 'search', 'marked']"
s167,Reg exe used to hide files directories via registry keys,The search looks for command-line arguments used to hide a file or directory using the reg add command.,"| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = reg.exe Processes.process=""*add*"" Processes.process=""*Hidden*"" Processes.process=""*REG_DWORD*"" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)`| regex process = ""(/d\s+2)"" | `reg_exe_used_to_hide_files_directories_via_registry_keys_filter`",50,['T1564.001'],,285.0,"['directory', 'search', 'command', 'hide', 'file']"
s168,Remote Registry Key modifications,This search monitors for remote modifications to registry keys.,"| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where  Registry.registry_path=""\\\\*""  by Registry.dest , Registry.user | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `remote_registry_key_modifications_filter`",50,,{'registry modification'},29.0,"['registry', 'search', 'remote', 'modifications', 'keys']"
s169,Scheduled tasks used in BadRabbit ransomware,This search looks for flags passed to schtasks.exe on the command-line that indicate that task names related to the execution of Bad Rabbit ransomware were created or deleted. Deprecated because we already have a similar detection,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process  from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process= ""*create*""  OR Processes.process= ""*delete*"") by Processes.parent_process Processes.process_name Processes.user | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | search (process=*rhaegal* OR process=*drogon* OR *viserion_*) | `scheduled_tasks_used_in_badrabbit_ransomware_filter`",50,['T1053.005'],"{'bad rabbit', 'schtasks'}",,"['ransomware', 'schtasks', 'task', 'execution', 'rabbit']"
s170,Spectre and Meltdown Vulnerable Systems,The search is used to detect systems that are still vulnerable to the Spectre and Meltdown vulnerabilities.,"| tstats `security_content_summariesonly` min(_time) as firstTime max(_time) as lastTime from datamodel=Vulnerabilities where Vulnerabilities.cve =""CVE-2017-5753"" OR Vulnerabilities.cve =""CVE-2017-5715"" OR Vulnerabilities.cve =""CVE-2017-5754"" by Vulnerabilities.dest | `drop_dm_object_name(Vulnerabilities)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spectre_and_meltdown_vulnerable_systems_filter`",50,,{'cve-2017-5753'},,"['vulnerabilities', 'spectre', 'search', 'vulnerable', 'detect']"
s171,Splunk Enterprise Information Disclosure,"This search allows you to look for evidence of exploitation for CVE-2018-11409, a Splunk Enterprise Information Disclosure Bug.","index=_internal sourcetype=splunkd_ui_access server-info | search clientip!=127.0.0.1 uri_path=""*raw/services/server/info/server-info"" | rename clientip as src_ip, splunk_server as dest | stats earliest(_time) as firstTime, latest(_time) as lastTime, values(uri) as uri, values(useragent) as http_user_agent, values(user) as user by src_ip, dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `splunk_enterprise_information_disclosure_filter`",50,,{'cve-2018-11409'},,"['splunk', 'cve', 'disclosure', 'exploitation', 'bug']"
s172,Credential ExtractionFGDump and CacheDump,The following analytic identifies the use of CacheDump with the `-v` parameter to dump cached credentials on the associated endpoint. Adversaries use Cachedump as it is a publicly-available tool that extracts cached password hashes from a system's registry.," | from read_ssa_enriched_events()
| eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line != null AND process_name != null AND process_path != null AND match_regex(process_name, /(?i)cachedump\d{0,2}.exe/)=true AND match_regex(process_path, /(?i)\\Temp/)=true AND match_regex(cmd_line, /(?i)\-v/)=true
| eval start_time = timestamp, end_time = timestamp, entities = mvappend( ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name]) | into write_ssa_detected_events();",70,"['T1003', 'T1003.002']","{'cachedump', 'fgdump', 'password'}",,"['cachedump', 'cached', 'credentials', 'endpoint', 'password']"
s173,Potential Pass the Token or Hash Observed at the Destination Device,"This detection identifies potential Pass the Token or Pass the Hash credential stealing. We detect the main side effect of these attacks, which is a transition from the dominant Kerberos logins to rare NTLM logins for a given user, as reported by a detination device.","| from read_ssa_enriched_events() | where ""Authentication"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), dest_user=lower(ucast(map_get(input_event, ""dest_user_primary_artifact""), ""string"", null)), dest_user_id=   ucast(map_get(input_event, ""dest_user_id""), ""string"", null), dest_device_id=       ucast(map_get(input_event, ""dest_device_id""), ""string"", null), signature_id=   lower(ucast(map_get(input_event, ""signature_id""), ""string"", null)), authentication_method=  lower(ucast(map_get(input_event, ""authentication_method""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null)
| where signature_id = ""4624"" AND (authentication_method=""ntlmssp"" OR authentication_method=""kerberos"") AND dest_user_id != null AND dest_device_id != null
| eval isKerberos=if(authentication_method == ""kerberos"", 1, 0), isNtlm=if(authentication_method == ""ntlmssp"", 1, 0), timeNTLM=if(isNtlm > 0, timestamp, null)
| stats sum(isKerberos) as totalKerberos, sum(isNtlm)     as totalNtlm, min(timestamp)  as startTime, min(timeNTLM)   as startNTLMTime, max(timestamp)  as endTime, max(timeNTLM)   as endNTLMTime by dest_user_id, dest_user, dest_device_id, span(timestamp, 86400s)
| where NOT dest_user=""-"" AND totalKerberos > 0 AND totalNtlm > 0 AND endTime - startTime > 1800000 AND (totalKerberos > 10 * totalNtlm AND totalKerberos > 50)  AND (endTime - startTime) > 3 * (endNTLMTime - startNTLMTime)
| eval start_time=ucast(startNTLMTime, ""long"", null), end_time=ucast(endNTLMTime, ""long"", null), entities=mvappend(dest_user_id, dest_device_id), body=create_map([""event_id"", event_id, ""total_kerberos"", totalKerberos, ""total_ntlm"", totalNtlm, ""analysis_start_time"", startTime, ""analysis_end_time"", endTime, ""pth_start_time"", startNTLMTime, ""pth_end_time"", endNTLMTime])
| into write_ssa_detected_events();",80,"['T1550', 'T1550.002']","{'kerberos', 'psexec'}",116.0,"['kerberos', 'attacks', 'token', 'logins', 'ntlm']"
s174,Potential Pass the Token or Hash Observed by an Event Collecting Device,"This detection identifies potential Pass the Token or Pass the Hash credential stealing. We detect the main side effect of these attacks, which is a transition from the dominant Kerberos logins to rare NTLM logins for a given user, as reported by an event-collecting device (i.e., a specific domain controller or an endpoint destination).","| from read_ssa_enriched_events() | where ""Authentication"" IN(_datamodels)
| eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), dest_user=      lower(ucast(map_get(input_event, ""dest_user_primary_artifact""), ""string"", null)), dest_user_id=   ucast(map_get(input_event, ""dest_user_id""), ""string"", null), origin_device_id=       ucast(map_get(input_event, ""origin_device_id""), ""string"", null), signature_id=   lower(ucast(map_get(input_event, ""signature_id""), ""string"", null)), authentication_method=  lower(ucast(map_get(input_event, ""authentication_method""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where signature_id = ""4624"" AND (authentication_method=""ntlmssp"" OR authentication_method=""kerberos"") AND dest_user_id != null AND origin_device_id != null
| eval isKerberos=if(authentication_method == ""kerberos"", 1, 0), isNtlm=if(authentication_method == ""ntlmssp"", 1, 0), timeNTLM=if(isNtlm > 0, timestamp, null)
| stats sum(isKerberos) as totalKerberos, sum(isNtlm)     as totalNtlm, min(timestamp)  as startTime, min(timeNTLM)   as startNTLMTime, max(timestamp)  as endTime, max(timeNTLM)   as endNTLMTime by dest_user_id, dest_user, origin_device_id, span(timestamp, 86400s)
| where NOT dest_user=""-"" AND totalKerberos > 0 AND totalNtlm > 0 AND endTime - startTime > 1800000 AND (totalKerberos > 10 * totalNtlm AND totalKerberos > 50)  AND (endTime - startTime) > 3 * (endNTLMTime - startNTLMTime)
| eval start_time=startNTLMTime, end_time=endNTLMTime, entities=mvappend(dest_user_id, origin_device_id), body=create_map([""event_id"", event_id, ""total_kerberos"", totalKerberos, ""total_ntlm"", totalNtlm, ""analysis_start_time"", startTime, ""analysis_end_time"", endTime, ""detection_start_time"", startNTLMTime, ""detection_end_time"", endNTLMTime])
| into write_ssa_detected_events();",80,"['T1550', 'T1550.002']","{'kerberos', 'psexec'}",116.0,"['kerberos', 'attacks', 'ntlm', 'logins', 'token']"
s175,Unusually Long Command Line,Command lines that are extremely long may be indicative of malicious activity on your hosts. This search leverages the Splunk Streaming ML DSP plugin to help identify command lines with lengths that are unusual for a given user. This detection is inspired on Unusually Long Command Line authored by Rico Valdez.," | from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)) | eval cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), dest_user_id=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), dest_device_id=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line!=null and dest_user_id!=null | eval cmd_line_norm=replace(cast(cmd_line, ""string""), /\s(--?\w+)|(\/\w+)/, "" ARG""), cmd_line_norm=replace(cmd_line_norm, /\w:\\[^\s]+/, ""PATH""), cmd_line_norm=replace(cmd_line_norm, /\d+/, ""N""), input=parse_double(len(coalesce(cmd_line_norm, """"))) | select timestamp, process_name, dest_device_id, dest_user_id, cmd_line, input | adaptive_threshold algorithm=""quantile"" entity=""process_name"" window=60480000 | where label AND quantile>0.99 | first_time_event input_columns=[""dest_device_id"", ""cmd_line""] | where first_time_dest_device_id_cmd_line | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id, dest_user_id), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name]) | into write_ssa_detected_events();",30,,,296.0,"['splunk', 'lines', 'long', 'line', 'command']"
s176,Unusual LOLBAS in short period of time,"Attacker activity may compromise executing several LOLBAS applications in conjunction to accomplish their objectives. We are looking for more than usual LOLBAS applications over a window of time, by building profiles per machine."," | from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)) | where process_name==""regsvcs.exe"" OR process_name==""ftp.exe"" OR process_name==""dfsvc.exe"" OR process_name==""rasautou.exe"" OR process_name==""schtasks.exe"" OR process_name==""xwizard.exe"" OR process_name==""findstr.exe"" OR process_name==""esentutl.exe"" OR process_name==""cscript.exe"" OR process_name==""reg.exe"" OR process_name==""csc.exe"" OR process_name==""atbroker.exe"" OR process_name==""print.exe"" OR process_name==""pcwrun.exe"" OR process_name==""vbc.exe"" OR process_name==""rpcping.exe"" OR process_name==""wsreset.exe"" OR process_name==""ilasm.exe"" OR process_name==""certutil.exe"" OR process_name==""replace.exe"" OR process_name==""mshta.exe"" OR process_name==""bitsadmin.exe"" OR process_name==""wscript.exe"" OR process_name==""ieexec.exe"" OR process_name==""cmd.exe"" OR process_name==""microsoft.workflow.compiler.exe"" OR process_name==""runscripthelper.exe"" OR process_name==""makecab.exe"" OR process_name==""forfiles.exe"" OR process_name==""desktopimgdownldr.exe"" OR process_name==""control.exe"" OR process_name==""msbuild.exe"" OR process_name==""register-cimprovider.exe"" OR process_name==""tttracer.exe"" OR process_name==""ie4uinit.exe"" OR process_name==""sc.exe"" OR process_name==""bash.exe"" OR process_name==""hh.exe"" OR process_name==""cmstp.exe"" OR process_name==""mmc.exe"" OR process_name==""jsc.exe"" OR process_name==""scriptrunner.exe"" OR process_name==""odbcconf.exe"" OR process_name==""extexport.exe"" OR process_name==""msdt.exe"" OR process_name==""diskshadow.exe"" OR process_name==""extrac32.exe"" OR process_name==""eventvwr.exe"" OR process_name==""mavinject.exe"" OR process_name==""regasm.exe"" OR process_name==""gpscript.exe"" OR process_name==""rundll32.exe"" OR process_name==""regsvr32.exe"" OR process_name==""regedit.exe"" OR process_name==""msiexec.exe"" OR process_name==""gfxdownloadwrapper.exe"" OR process_name==""presentationhost.exe"" OR process_name==""regini.exe"" OR process_name==""wmic.exe"" OR process_name==""runonce.exe"" OR process_name==""syncappvpublishingserver.exe"" OR process_name==""verclsid.exe"" OR process_name==""psr.exe"" OR process_name==""infdefaultinstall.exe"" OR process_name==""explorer.exe"" OR process_name==""expand.exe"" OR process_name==""installutil.exe"" OR process_name==""netsh.exe"" OR process_name==""wab.exe"" OR process_name==""dnscmd.exe"" OR process_name==""at.exe"" OR process_name==""pcalua.exe"" OR process_name==""cmdkey.exe"" OR process_name==""msconfig.exe"" | stats count(process_name) as lolbas_counter by device,span(timestamp, 300s) | eval lolbas_counter=lolbas_counter*1.0 | rename window_end as timestamp | adaptive_threshold algorithm=""quantile"" value=""lolbas_counter"" entity=""device"" window=2419200000L | where label AND quantile>0.99 | eval start_time = window_start, end_time = timestamp, entities = mvappend(device), body=create_map([""lolbas_counter"", lolbas_counter, ""quantile"", quantile, ""device"", device]) | into write_ssa_detected_events();",50,"['T1059', 'T1053']","{'esentutl', 'netsh', 'schtasks', 'forfiles', 'bitsadmin', 'certutil', 'expand', 'msbuild', 'rundll32', 'ftp'}",,"['lolbas', 'attacker', 'applications', 'profiles', 'activity']"
s177,Suspicious Changes to File Associations,"This search looks for changes to registry values that control Windows file associations, executed by a process that is not typical for legitimate, routine changes to this area.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process_name) as process_name values(Processes.parent_process_name) as parent_process_name FROM datamodel=Endpoint.Processes where Processes.process_name!=Explorer.exe AND Processes.process_name!=OpenWith.exe by Processes.process_id Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join [| tstats `security_content_summariesonly` values(Registry.registry_path) as registry_path count from datamodel=Endpoint.Registry where Registry.registry_path=*\\Explorer\\FileExts* by Registry.process_id Registry.dest | `drop_dm_object_name(""Registry"")` | table process_id dest registry_path]| `suspicious_changes_to_file_associations_filter` ",50,['T1546.001'],{'registry modification'},29.0,"['registry', 'associations', 'file', 'changes', 'windows']"
s178,Suspicious Email - UBA Anomaly,"This detection looks for emails that are suspicious because of their sender, domain rareness, or behavior differences. This is an anomaly generated by Splunk User Behavior Analytics (UBA).","|tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(All_UEBA_Events.category) as category from datamodel=UEBA where nodename=All_UEBA_Events.UEBA_Anomalies All_UEBA_Events.UEBA_Anomalies.uba_model = ""SuspiciousEmailDetectionModel"" by All_UEBA_Events.description All_UEBA_Events.severity All_UEBA_Events.user All_UEBA_Events.uba_event_type All_UEBA_Events.link All_UEBA_Events.signature All_UEBA_Events.url All_UEBA_Events.UEBA_Anomalies.uba_model | `drop_dm_object_name(All_UEBA_Events)` | `drop_dm_object_name(UEBA_Anomalies)`| `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `suspicious_email___uba_anomaly_filter`",50,['T1566'],{'email'},296.0,"['splunk', 'anomaly', 'emails', 'suspicious', 'detection']"
s179,Suspicious File Write,The search looks for files created with names that have been linked to malicious activity.,| tstats `security_content_summariesonly` count values(Filesystem.action) as action values(Filesystem.file_path) as file_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem by Filesystem.file_name Filesystem.dest | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Filesystem)` | `suspicious_writes` | `suspicious_file_write_filter`,50,,{'hidden cobra'},285.0,"['search', 'malicious', 'files', 'linked', 'created']"
s180,Suspicious Powershell Command-Line Arguments,"This search looks for PowerShell processes started with a base64 encoded command-line passed to it, with parameters to modify the execution policy for the process, and those that prevent the display of an interactive prompt to the user. This combination of command-line options is suspicious because it overrides the default PowerShell execution policy, attempts to hide itself from the user, and passes an encoded script to be run on the command-line. Deprecated because almost the same as Malicious PowerShell Process - Encoded Command",| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=powershell.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| search (process=*-EncodedCommand* OR process=*-enc*) process=*-Exec* | `suspicious_powershell_command_line_arguments_filter`,50,['T1059.001'],"{'wiper', 'powershell'}",,"['powershell', 'prompt', 'command', 'malicious', 'suspicious']"
s181,Suspicious Rundll32 Rename,"The following hunting analytic identifies renamed instances of rundll32.exe executing. rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64. During investigation, validate it is the legitimate rundll32.exe executing and what script content it is loading. This query relies on the original filename or internal name from the PE meta data. Expand the query as needed by looking for specific command line arguments outlined in other analytics.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.original_file_name=RUNDLL32.exe AND Processes.process_name!=rundll32.exe by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_rename_filter`,70,"['T1218', 'T1036', 'T1218.011', 'T1036.003']","{'dll', 'exe', 'rundll32', 'expand'}",,"['rundll32', 'exe', 'system32', 'renamed', 'filename']"
s182,Suspicious writes to System Volume Information,This search detects writes to the 'System Volume Information' folder by something other than the System process.,"(`sysmon` OR tag=process) EventCode=11 process_id!=4 file_path=*System\ Volume\ Information* | stats count min(_time) as firstTime max(_time) as lastTime by dest, Image, file_path | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `suspicious_writes_to_system_volume_information_filter`",50,['T1036'],,285.0,"['search', 'folder', 'volume', 'writes', 'detects']"
s183,Uncommon Processes On Endpoint,This search looks for applications on the endpoint that you have marked as uncommon.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.dest Processes.user Processes.process Processes.process_name | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | `uncommon_processes` |`uncommon_processes_on_endpoint_filter` ,50,['T1204.002'],{'wiper'},,"['applications', 'endpoint', 'search', 'uncommon', 'marked']"
s184,Unsigned Image Loaded by LSASS,This search detects loading of unsigned images by LSASS. Deprecated because too noisy.,"`sysmon` EventID=7 Image=*lsass.exe Signed=false | stats count min(_time) as firstTime max(_time) as lastTime by Computer, Image, ImageLoaded, Signed, SHA1 | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `unsigned_image_loaded_by_lsass_filter` ",50,['T1003.001'],{'lsass'},243.0,"['lsass', 'images', 'detects', 'search', 'unsigned']"
s185,Unsuccessful Netbackup backups,This search gives you the hosts where a backup was attempted and then failed.,"`netbackup` | stats latest(_time) as latestTime by COMPUTERNAME, MESSAGE | search MESSAGE=""An error occurred, failed to backup."" | `security_content_ctime(latestTime)` | rename COMPUTERNAME as dest, MESSAGE as signature | table latestTime, dest, signature | `unsuccessful_netbackup_backups_filter`",50,,{'backup'},285.0,"['backup', 'failed', 'hosts', 'search', 'attempted']"
s186,Web Fraud - Account Harvesting,This search is used to identify the creation of multiple user accounts using the same email domain name.,"`stream_http` http_content_type=text* uri=""/magento2/customer/account/loginPost/"" | rex field=cookie ""form_key=(?<SessionID>\w+)"" | rex field=form_data ""login\[username\]=(?<Username>[^&|^$]+)"" | search Username=* | rex field=Username ""@(?<email_domain>.*)"" | stats dc(Username) as UniqueUsernames list(Username) as src_user by email_domain | where UniqueUsernames> 25 | `web_fraud___account_harvesting_filter`",50,['T1136'],"{'rex', 'entropy', 'email', 'page'}",291.0,"['search', 'accounts', 'domain', 'email', 'user']"
s187,Web Fraud - Anomalous User Clickspeed,"This search is used to examine web sessions to identify those where the clicks are occurring too quickly for a human or are occurring with a near-perfect cadence (high periodicity or low standard deviation), resembling a script driven session.","`stream_http` http_content_type=text* | rex field=cookie ""form_key=(?<session_id>\w+)"" | streamstats window=2 current=1 range(_time) as TimeDelta by session_id | where TimeDelta>0 |stats count stdev(TimeDelta) as ClickSpeedStdDev avg(TimeDelta) as ClickSpeedAvg by session_id | where count>5 AND (ClickSpeedStdDev<.5 OR ClickSpeedAvg<.5) | `web_fraud___anomalous_user_clickspeed_filter`",50,['T1078'],{'rex'},297.0,"['clicks', 'search', 'session', 'web', 'sessions']"
s188,Web Fraud - Password Sharing Across Accounts,This search is used to identify user accounts that share a common password.,"`stream_http` http_content_type=text* uri=/magento2/customer/account/loginPost*  | rex field=form_data ""login\[username\]=(?<Username>[^&|^$]+)"" | rex field=form_data ""login\[password\]=(?<Password>[^&|^$]+)"" | stats dc(Username) as UniqueUsernames values(Username) as user list(src_ip) as src_ip by Password|where UniqueUsernames>5 | `web_fraud___password_sharing_across_accounts_filter`",50,,"{'rex', 'password'}",134.0,"['password', 'search', 'accounts', 'user', 'used']"
s189,Windows connhost exe started forcefully,The search looks for the Console Window Host process (connhost.exe) executed using the force flag -ForceV1. This is not regular behavior in the Windows OS and is often seen executed by the Ryuk Ransomware. DEPRECATED This event is actually seen in the windows 10 client of attack_range_local. After further testing we realized this is not specific to Ryuk. ,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process=""*C:\\Windows\\system32\\conhost.exe* 0xffffffff *-ForceV1*"" by Processes.user Processes.process_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_connhost_exe_started_forcefully_filter`",50,['T1059.003'],{'ryuk'},,"['ransomware', 'ryuk', 'console', 'attack_range_local', 'search']"
s190,Windows hosts file modification,The search looks for modifications to the hosts file on all Windows endpoints across your environment.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem  by Filesystem.file_name Filesystem.file_path Filesystem.dest | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | search Filesystem.file_name=hosts AND Filesystem.file_path=*Windows\\System32\\* | `drop_dm_object_name(Filesystem)` | `windows_hosts_file_modification_filter`,50,,,285.0,"['hosts', 'search', 'endpoints', 'looks', 'windows']"
s191,7zip CommandLine To SMB Share Path,This search is to detect a suspicious 7z process with commandline pointing to SMB network share. This technique was seen in CONTI LEAK tools where it use 7z to archive a sensitive files and place it in network share tmp folder. This search is a good hunting query that may give analyst a hint why specific user try to archive a file pointing to SMB user which is un usual.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name =""7z.exe"" OR Processes.process_name = ""7za.exe"" OR Processes.original_file_name = ""7z.exe"" OR Processes.original_file_name =  ""7za.exe"") AND (Processes.process=""*\\C$\\*"" OR Processes.process=""*\\Admin$\\*"" OR Processes.process=""*\\IPC$\\*"") by Processes.original_file_name Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.parent_process_id Processes.process_id  Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `7zip_commandline_to_smb_share_path_filter`",50,"['T1560.001', 'T1560']",{'conti'},235.0,"['smb', 'search', '7z', 'archive', 'files']"
s192,Access LSASS Memory for Dump Creation,Detect memory dumping of the LSASS process.,"`sysmon` EventCode=10 TargetImage=*lsass.exe CallTrace=*dbgcore.dll* OR CallTrace=*dbghelp.dll* | stats count min(_time) as firstTime max(_time) as lastTime by Computer, TargetImage, TargetProcessId, SourceImage, SourceProcessId | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `access_lsass_memory_for_dump_creation_filter` ",70,"['T1003.001', 'T1003']",{'lsass'},243.0,"['lsass', 'dumping', 'memory', 'process', 'detect']"
s193,Account Discovery With Net App,"this search is to detect a potential account discovery series of command used by several malware or attack to recon the target machine. This technique is also seen in some note worthy malware like trickbot where it runs a cmd process, or even drop its module that will execute the said series of net command. This series of command are good correlation search and indicator of attacker recon if seen in the machines within a none technical user or department (HR, finance, ceo and etc) network.","| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND (Processes.process=""*user*"" OR  Processes.process=""*config*"" OR Processes.process=""*view /all*"") by  Processes.process_name Processes.dest Processes.user Processes.parent_process_name | where count >=5 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `account_discovery_with_net_app_filter`",10,"['T1087.002', 'T1087']","{'malware', 'trickbot', 'icedid', 'ryuk'}",,"['malware', 'detect', 'search', 'command', 'cmd']"
s194,Active Setup Registry Autostart,"This analytic is to detect a suspicious modification of the active setup registry for persistence and privilege escalation. This technique was seen in several malware (poisonIvy), adware and APT to gain persistence to the compromised machine upon boot up. This TTP is a good indicator to further check the process id that do the modification since modification of this registry is not commonly done. check the legitimacy of the file and process involve in this rules to check if it is a valid setup installer that creating or modifying this registry.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_value_name= ""StubPath"" Registry.registry_path = ""*\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `active_setup_registry_autostart_filter`",80,"['T1547.014', 'T1547']","{'malware', 'poisonivy', 'registry modification', 'wiper'}",,"['malware', 'adware', 'registry', 'ttp', 'process']"
s195,Add DefaultUser And Password In Registry,this search is to detect a suspicious registry modification to implement auto admin logon to a host. This technique was seen in BlackMatter ransomware to automatically logon to the compromise host after  triggering a safemode boot to continue encrypting the whole network. This behavior is not a common practice and really a suspicious TTP or alert need to be consider if found within then network premise.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon*"" AND Registry.registry_value_name= DefaultPassword OR Registry.registry_value_name= DefaultUserName by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_value_data Registry.registry_key_name | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `add_defaultuser_and_password_in_registry_filter`",50,"['T1552.002', 'T1552']","{'blackmatter', 'registry modification', 'darkside'}",,"['ransomware', 'logon', 'registry', 'admin', 'auto']"
s196,Add or Set Windows Defender Exclusion,"This analytic will identify a suspicious process command-line related to Windows Defender exclusion feature. This command is abused by adversaries, malware authors and red teams to bypass Windows Defender Antivirus products by excluding folder path, file path, process and extensions. From its real time or schedule scan to execute their malicious code. This is a good indicator for defense evasion and to look further for events after this behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process = ""*Add-MpPreference *"" OR Processes.process = ""*Set-MpPreference *"") AND Processes.process=""*-exclusion*"" by Processes.dest Processes.user Processes.parent_process Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `add_or_set_windows_defender_exclusion_filter`",80,"['T1562.001', 'T1562']","{'malware', 'remcos', 'whispergate'}",,"['malware', 'antivirus', 'malicious', 'defender', 'evasion']"
s197,AdsiSearcher Account Discovery,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain groups. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain users for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 Message = ""*[adsisearcher]*"" Message = ""*objectcategory=user*"" Message = ""*.findAll()*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `adsisearcher_account_discovery_filter`",50,"['T1087.002', 'T1087']","{'industroyer2', 'powershell', 'leverage'}",307.0,"['adsisearcher', 'powershell', 'groups', 'active', 'logging']"
s198,Allow File And Printing Sharing In Firewall,This search is to detect a suspicious modification of firewall to allow file and printer sharing. This technique was seen in ransomware to be able to discover more machine connected to the compromised host to encrypt more files,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` Processes.process= ""*firewall*"" Processes.process= ""*group=\""File and Printer Sharing\""*""  Processes.process=""*enable=Yes*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `allow_file_and_printing_sharing_in_firewall_filter`",50,"['T1562.007', 'T1562']","{'revil', 'sodinokibi'}",6.0,"['ransomware', 'compromised', 'firewall', 'search', 'files']"
s199,Allow Inbound Traffic By Firewall Rule Registry,This analytic detects a potential suspicious modification of firewall rule registry allowing inbound traffic in specific port with public profile. This technique was identified when an adversary wants to grant remote access to a machine by allowing the traffic in a firewall rule.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules\\*"" Registry.registry_value_data = ""*|Action=Allow|*"" Registry.registry_value_data = ""*|Dir=In|*""  Registry.registry_value_data = ""*|LPort=*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `allow_inbound_traffic_by_firewall_rule_registry_filter`",50,"['T1021.001', 'T1021']","{'casper', 'azorult'}",,"['firewall', 'port', 'traffic', 'adversary', 'analytic']"
s200,Allow Inbound Traffic In Firewall Rule,The following analytic identifies suspicious PowerShell command to allow inbound traffic inbound to a specific local port within the public profile. This technique was seen in some attacker want to have a remote access to a machine by allowing the traffic in firewall rule.,"`powershell` EventCode=4104 Message = ""*firewall*"" Message = ""*Inbound*"" Message = ""*Allow*""  Message = ""*-LocalPort*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `allow_inbound_traffic_in_firewall_rule_filter`",10,"['T1021.001', 'T1021']","{'casper', 'powershell'}",5.0,"['firewall', 'port', 'powershell', 'traffic', 'inbound']"
s201,Allow Network Discovery In Firewall,"This search is to detect a suspicious modification to the firewall to allow network discovery on a machine. This technique was seen in couple of ransomware (revil, reddot) to discover other machine connected to the compromised host to encrypt more files.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` Processes.process= ""*firewall*"" Processes.process= ""*group=\""Network Discovery\""*""  Processes.process=""*enable*"" Processes.process=""*Yes*"" by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `allow_network_discovery_in_firewall_filter`",50,"['T1562.007', 'T1562']","{'revil', 'sodinokibi'}",6.0,"['ransomware', 'search', 'compromised', 'discover', 'discovery']"
s202,Allow Operation with Consent Admin,This analytic identifies a potential privilege escalation attempt to perform malicious task. This registry modification is designed to allow the `Consent Admin` to perform an operation that requires elevation without consent or credentials. We also found this in some attacker to gain privilege escalation to the compromise machine.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Microsoft\\Windows\\CurrentVersion\\Policies\\System*"" Registry.registry_value_name = ConsentPromptBehaviorAdmin Registry.registry_value_data = ""0x00000000"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `allow_operation_with_consent_admin_filter`",50,['T1548'],"{'registry modification', 'privilege', 'mrdec', 'azorult'}",,"['privilege', 'registry', 'malicious', 'consent', 'admin']"
s203,Anomalous usage of 7zip,"The following detection identifies a 7z.exe spawned from `Rundll32.exe` or `Dllhost.exe`. It is assumed that the adversary has brought in `7z.exe` and `7z.dll`. It has been observed where an adversary will rename `7z.exe`. Additional coverage may be required to identify the behavior of renamed instances of `7z.exe`. During triage, identify the source of injection into `Rundll32.exe` or `Dllhost.exe`. Capture any files written to disk and analyze as needed. Review parallel processes for additional behaviors. Typically, archiving files will result in exfiltration.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""rundll32.exe"", ""dllhost.exe"") Processes.process_name=*7z* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `anomalous_usage_of_7zip_filter`",80,"['T1560.001', 'T1560']","{'dll', 'cobalt strike', 'teardrop', 'sunburst', 'exe', 'bazar', 'raindrop', 'nobelium', 'solorigate', 'rundll32', 'ryuk'}",,"['rundll32', 'dll', 'exe', 'dllhost', '7z']"
s204,Any Powershell DownloadFile,"The following analytic identifies the use of PowerShell downloading a file using `DownloadFile` method. This particular method is utilized in many different PowerShell frameworks to download files and output to disk. Identify the source (IP/domain) and destination file and triage appropriately. If AMSI logging or PowerShell transaction logs are available, review for further details of the implant.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=*DownloadFile* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `any_powershell_downloadfile_filter`,80,"['T1059', 'T1059.001', 'T1105']","{'lazyscripter', 'cve-2021-44228', 'powershell', 'empire', 'wiper'}",,"['downloadfile', 'powershell', 'downloading', 'file', 'files']"
s205,Any Powershell DownloadString,"The following analytic identifies the use of PowerShell downloading a file using `DownloadString` method. This particular method is utilized in many different PowerShell frameworks to download files and output to disk. Identify the source (IP/domain) and destination file and triage appropriately. If AMSI logging or PowerShell transaction logs are available, review for further details of the implant.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=*.DownloadString*  by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `any_powershell_downloadstring_filter`,80,"['T1059', 'T1059.001', 'T1105']","{'hafnium', 'lazyscripter', 'powershell', 'empire', 'wiper'}",,"['powershell', 'downloadstring', 'downloading', 'file', 'files']"
s206,Attacker Tools On Endpoint,This search looks for execution of commonly used attacker tools on an endpoint.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process values(Processes.parent_process) as parent_process from datamodel=Endpoint.Processes where Processes.dest!=unknown Processes.user!=unknown by Processes.dest Processes.user Processes.process_name Processes.process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | lookup attacker_tools attacker_tool_names AS process_name OUTPUT description | search description !=false| `attacker_tools_on_endpoint_filter`,80,"['T1036.005', 'T1036', 'T1003', 'T1595']",{'samsam'},,"['endpoint', 'attacker', 'tools', 'search', 'execution']"
s207,Attempted Credential Dump From Registry via Reg exe,Monitor for execution of reg.exe with parameters specifying an export of keys that contain hashed credentials that attackers may try to crack offline.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_reg` OR `process_cmd` Processes.process=*save* (Processes.process=*HKEY_LOCAL_MACHINE\\Security* OR Processes.process=*HKEY_LOCAL_MACHINE\\SAM* OR Processes.process=*HKEY_LOCAL_MACHINE\\System* OR Processes.process=*HKLM\\Security* OR Processes.process=*HKLM\\System* OR Processes.process=*HKLM\\SAM*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `attempted_credential_dump_from_registry_via_reg_exe_filter`,90,"['T1003.002', 'T1003']","{'industroyer2', 'exe', 'darkside'}",,"['exe', 'credentials', 'attackers', 'reg', 'execution']"
s208,Attempt To Add Certificate To Untrusted Store,Attempt To Add Certificate To Untrusted Store,"| tstats `security_content_summariesonly` count min(_time) as firstTime values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` (Processes.process=*-addstore*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `attempt_to_add_certificate_to_untrusted_store_filter`",70,"['T1553.004', 'T1553']",,298.0,"['certificate', 'untrusted', 'store', 'add', 'attempt']"
s209,Attempt To Stop Security Service,This search looks for attempts to stop security-related services on the endpoint.,"| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` OR  Processes.process_name = sc.exe Processes.process=""* stop *"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` |lookup security_services_lookup service as process OUTPUTNEW category, description | search category=security | `attempt_to_stop_security_service_filter`",40,"['T1562.001', 'T1562']","{'trickbot', 'stop', 'whispergate', 'azorult'}",,"['endpoint', 'services', 'security', 'search', 'attempts']"
s210,Auto Admin Logon Registry Entry,this search is to detect a suspicious registry modification to implement auto admin logon to a host. This technique was seen in BlackMatter ransomware to automatically logon to the compromise host after  triggering a safemode boot to continue encrypting the whole network. This behavior is not a common practice and really a suspicious TTP or alert need to be consider if found within then network premise.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= ""*SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon*"" AND Registry.registry_value_name=AutoAdminLogon AND Registry.registry_value_data=1 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `auto_admin_logon_registry_entry_filter`",70,"['T1552.002', 'T1552']","{'blackmatter', 'registry modification', 'darkside'}",,"['ransomware', 'logon', 'registry', 'admin', 'auto']"
s211,Batch File Write to System32,The search looks for a batch file (.bat) written to the Windows system directory tree.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=*  by _time span=1h Processes.process_id Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*\\system32\\*"", ""*\\syswow64\\*"") Filesystem.file_name=""*.bat"" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest file_create_time, file_name, file_path, process_name  | `batch_file_write_to_system32_filter`",70,"['T1204', 'T1204.002']",{'samsam'},,"['batch', 'search', 'directory', 'file', 'bat']"
s212,Bcdedit Command Back To Normal Mode Boot,This search is to detect a suspicious bcdedit commandline to configure the host from safe mode back to normal boot configuration. This technique was seen in blackMatter ransomware where it force the compromised host to boot in safe mode to continue its encryption and bring back to normal boot using bcdedit deletevalue command. This TTP can be a good alert for host that booted from safe mode forcefully since it need to modify the boot configuration to bring it back to normal.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = bcdedit.exe Processes.process=""*/deletevalue*"" Processes.process=""*{current}*""  Processes.process=""*safeboot*"" by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user |`drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bcdedit_command_back_to_normal_mode_boot_filter`",50,['T1490'],"{'blackmatter', 'darkside', 'rundll32'}",,"['ransomware', 'bcdedit', 'boot', 'booted', 'compromised']"
s213,BCDEdit Failure Recovery Modification,This search looks for flags passed to bcdedit.exe modifications to the built-in Windows error recovery boot configurations. This is typically used by ransomware to prevent recovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = bcdedit.exe Processes.process=""*recoveryenabled*"" (Processes.process=""* no*"") by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bcdedit_failure_recovery_modification_filter`",100,['T1490'],"{'exe', 'ryuk'}",,"['bcdedit', 'ransomware', 'recovery', 'boot', 'exe']"
s214,BITSAdmin Download File,"The following query identifies Microsoft Background Intelligent Transfer Service utility `bitsadmin.exe` using the `transfer` parameter to download a remote object. In addition, look for `download` or `upload` on the command-line, the switches are not required to perform a transfer. Capture any files downloaded. Review the reputation of the IP or domain used. Typically once executed, a follow on command will be used to execute the dropped file. Note that the network connection or file modification events related will not spawn or create from `bitsadmin.exe`, but the artifacts will appear in a parallel process of `svchost.exe` with a command-line similar to `svchost.exe -k netsvcs -s BITS`. It's important to review all parallel and child processes to capture any behaviors and artifacts. In some suspicious and malicious instances, BITS jobs will be created. You can use `bitsadmin /list /verbose` to list out the jobs during investigation.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_bitsadmin` Processes.process=*transfer* by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bitsadmin_download_file_filter`,70,"['T1197', 'T1105']","{'exe', 'bitsadmin', 'sodinokibi', 'revil', 'darkside'}",,"['bitsadmin', 'bits', 'exe', 'processes', 'capture']"
s215,BITS Job Persistence,"The following query identifies Microsoft Background Intelligent Transfer Service utility `bitsadmin.exe` scheduling a BITS job to persist on an endpoint. The query identifies the parameters used to create, resume or add a file to a BITS job. Typically seen combined in a oneliner or ran in sequence. If identified, review the BITS job created and capture any files written to disk. It is possible for BITS to be used to upload files and this may require further network data analysis to identify. You can use `bitsadmin /list /verbose` to list out the jobs during investigation.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_bitsadmin` Processes.process IN (*create*, *addfile*, *setnotifyflags*, *setnotifycmdline*, *setminretrydelay*, *setcustomheaders*, *resume* ) by Processes.dest Processes.user Processes.original_file_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `bits_job_persistence_filter`",70,['T1197'],{'bitsadmin'},73.0,"['bitsadmin', 'bits', 'microsoft', 'files', 'file']"
s216,CertUtil Download With URLCache and Split Arguments,"Certutil.exe may download a file from a remote destination using `-urlcache`. This behavior does require a URL to be passed on the command-line. In addition, `-f` (force) and `-split` (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for `certutil.exe` to contact public IP space. However, it is uncommon for `certutil.exe` to write files to world writeable paths.\ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` (Processes.process=*urlcache* Processes.process=*split*) OR Processes.process=*urlcache* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.original_file_name Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_download_with_urlcache_and_split_arguments_filter`,90,['T1105'],"{'exe', 'darkside', 'certutil'}",,"['certutil', 'file', 'url', 'exe', 'files']"
s217,CertUtil Download With VerifyCtl and Split Arguments,"Certutil.exe may download a file from a remote destination using `-VerifyCtl`. This behavior does require a URL to be passed on the command-line. In addition, `-f` (force) and `-split` (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for `certutil.exe` to contact public IP space. \ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question. Using `-VerifyCtl`, the file will either be written to the current working directory or `%APPDATA%\..\LocalLow\Microsoft\CryptnetUrlCache\Content\<hash>`. ",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` (Processes.process=*verifyctl* Processes.process=*split*) OR Processes.process=*verifyctl* by Processes.dest Processes.user Processes.original_file_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_download_with_verifyctl_and_split_arguments_filter`,90,['T1105'],"{'darkside', 'certutil'}",,"['certutil', 'cryptneturlcache', 'verifyctl', 'file', 'url']"
s218,Certutil exe certificate extraction,This search looks for arguments to certutil.exe indicating the manipulation or extraction of Certificate. This certificate can then be used to sign new authentication tokens specially inside Federated environments such as Windows ADFS.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=certutil.exe Processes.process = ""*-exportPFX*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_exe_certificate_extraction_filter`",90,,{'certutil'},,"['certutil', 'certificate', 'adfs', 'authentication', 'tokens']"
s219,CertUtil With Decode Argument,"CertUtil.exe may be used to `encode` and `decode` a file, including PE and script code. Encoding will convert a file to base64 with `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` tags. Malicious usage will include decoding a encoded file that was downloaded. Once decoded, it will be loaded by a parallel process. Note that there are two additional command switches that may be used - `encodehex` and `decodehex`. Similarly, the file will be encoded in HEX and later decoded for further execution. During triage, identify the source of the file being decoded. Review its contents or execution behavior for further analysis.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_certutil` Processes.process=*decode* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `certutil_with_decode_argument_filter`,50,['T1140'],{'certutil'},,"['certutil', 'encoded', 'decode', 'base64', 'decoded']"
s220,Change Default File Association,"This analytic is developed to detect suspicious registry modification to change the default file association of windows to malicious payload. This techninique was seen in some APT where it modify the default process to run file association, like .txt to notepad.exe. Instead notepad.exe it will point to a Script or other payload that will load malicious command to the compromised host.","| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path =""*\\shell\\open\\command\\*"" Registry.registry_path = ""*HKCR\\*"" by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `change_default_file_association_filter`",80,"['T1546.001', 'T1546']","{'wiper', 'exe', 'registry modification'}",,"['registry', 'malicious', 'exe', 'file', 'compromised']"
s221,Change To Safe Mode With Network Config,This search is to detect a suspicious bcdedit commandline to configure the host to boot in safe mode with network config. This technique was seen in blackMatter ransomware where it force the compromised host to boot in safe mode to continue its encryption and bring back to normal boot using bcdedit deletevalue command. This TTP can be a good alert for host that booted from safe mode forcefully since it need to modify the boot configuration to bring it back to normal.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = bcdedit.exe Processes.process=""*/set*"" Processes.process=""*{current}*""  Processes.process=""*safeboot*"" Processes.process=""*network*"" by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user |`drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `change_to_safe_mode_with_network_config_filter`",50,['T1490'],"{'blackmatter', 'darkside', 'rundll32'}",,"['ransomware', 'bcdedit', 'boot', 'booted', 'compromised']"
s222,CHCP Command Execution,This search is to detect execution of chcp.exe application. this utility is used to change the active code page of the console. This technique was seen in icedid malware to know the locale region/language/country of the compromise host.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=chcp.com Processes.parent_process_name = cmd.exe Processes.parent_process=*/c* by  Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `chcp_command_execution_filter`,30,['T1059'],"{'malware', 'icedid', 'azorult', 'page'}",,"['chcp', 'malware', 'search', 'application', 'console']"
s223,Check Elevated CMD using whoami,This search is to detect a suspicious whoami execution to check if the cmd or shell instance process is with elevated privileges. This technique was seen in FIN7 js implant where it execute this as part of its data collection to the infected machine to check if the running shell cmd process is elevated or not. This TTP is really a good alert for known attacker that recon on the targetted host. This command is not so commonly executed by a normal user or even an admin to check if a process is elevated.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  Processes.process = ""*whoami*"" Processes.process = ""*/group*"" Processes.process = ""* find *"" Processes.process = ""*12288*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `check_elevated_cmd_using_whoami_filter`",70,['T1033'],"{'fin7', 'rundll32'}",,"['ttp', 'execution', 'cmd', 'command', 'infected']"
s224,Clear Unallocated Sector Using Cipher App,this search is to detect execution of `cipher.exe` to clear the unallocated sectors of a specific disk. This technique was seen in some ransomware to make it impossible to forensically recover deleted files.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""cipher.exe"" Processes.process = ""*/w:*"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `clear_unallocated_sector_using_cipher_app_filter`",100,"['T1070.004', 'T1070']","{'forensic', 'pyxie'}",6.0,"['ransomware', 'cipher', 'disk', 'files', 'forensically']"
s225,Clop Common Exec Parameter,"The following analytics are designed to identifies some CLOP ransomware variant that using arguments to execute its main code or feature of its code. In this variant if the parameter is ""runrun"", CLOP ransomware will try to encrypt files in network shares and if it is ""temp.dat"", it will try to read from some stream pipe or file start encrypting files within the infected local machines. This technique can be also identified as an anti-sandbox technique to make its code non-responsive since it is waiting for some parameter to execute properly.","| tstats `security_content_summariesonly` values(Processes.process) as cmdline values(Processes.parent_process_name) as parent_process values(Processes.process_name) count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name != ""*temp.dat*"" Processes.process = ""*runrun*"" OR Processes.process = ""*temp.dat*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `clop_common_exec_parameter_filter`",100,['T1204'],{'clop'},,"['ransomware', 'clop', 'infected', 'runrun', 'execute']"
s226,Clop Ransomware Known Service Name,This detection is to identify the common service name created by the CLOP ransomware as part of its persistence and high privilege code execution in the infected machine. Ussually CLOP ransomware use StartServiceCtrlDispatcherW API in creating this service entry.,"`wineventlog_system` EventCode=7045 Service_Name IN (""SecurityCenterIBM"", ""WinCheckDRVs"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `clop_ransomware_known_service_name_filter`",100,['T1543'],{'clop'},,"['ransomware', 'startservicectrldispatcherw', 'clop', 'infected', 'service']"
s227,Cmdline Tool Not Executed In CMD Shell,"The following analytic identifies a non-standard parent process (not matching CMD, PowerShell, or Explorer) spawning `ipconfig.exe` or `systeminfo.exe`. This particular behavior was seen in FIN7's JSSLoader .NET payload. This is also typically seen when an adversary is injected into another process performing different discovery techniques. This event stands out as a TTP since these tools are commonly executed with a shell application or Explorer parent, and not by another application. This TTP is a good indicator for an adversary gathering host information, but one possible false positive might be an automated tool used by a system administator.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  (Processes.process_name = ""ipconfig.exe"" OR Processes.process_name = ""systeminfo.exe"") AND NOT (Processes.parent_process_name = ""cmd.exe"" OR Processes.parent_process_name = ""powershell*"" OR Processes.parent_process_name=""pwsh.exe"" OR Processes.parent_process_name = ""explorer.exe"") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.original_file_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmdline_tool_not_executed_in_cmd_shell_filter`",70,"['T1059', 'T1059.007']","{'fin7', 'ipconfig', 'systeminfo', 'exe', 'powershell', 'jssloader'}",,"['systeminfo', 'ipconfig', 'process', 'exe', 'spawning']"
s228,CMD Carry Out String Command Parameter,The following analytic identifies command-line arguments where `cmd.exe /c` is used to execute a program. `cmd /c` is used to run commands in MS-DOS and terminate after command or process completion. This technique is commonly seen in adversaries and malware to execute batch command using different shell like PowerShell or different process other than `cmd.exe`. This is a good hunting query for suspicious command-line made by a script or relative process execute it.,"| tstats `security_content_summariesonly` min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` AND Processes.process=""* /c *"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmd_carry_out_string_command_parameter_filter`",60,"['T1059.003', 'T1059']","{'cve-2021-44228', 'powershell', 'icedid', 'whispergate', 'azorult', 'wiper'}",,"['cmd', 'command', 'commands', 'execute', 'dos']"
s229,CMD Echo Pipe - Escalation,"This analytic identifies a common behavior by Cobalt Strike and other frameworks where the adversary will escalate privileges, either via `jump` (Cobalt Strike PTH) or `getsystem`, using named-pipe impersonation. A suspicious event will look like `cmd.exe /c echo 4sgryt3436 > \\.\Pipe\5erg53`.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` OR Processes.process=*%comspec%* (Processes.process=*echo* AND Processes.process=*pipe*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmd_echo_pipe___escalation_filter`,80,"['T1059', 'T1059.003', 'T1543.003', 'T1543']","{'meterpreter', 'exe', 'cobalt strike', 'privilege'}",,"['impersonation', 'cmd', 'privileges', 'exe', 'pipe']"
s230,CMLUA Or CMSTPLUA UAC Bypass,This analytic detects a potential process using COM Object like CMLUA or CMSTPLUA to bypass UAC. This technique has been used by ransomware adversaries to gain administrative privileges to its running process.,"`sysmon` EventCode=7  ImageLoaded IN (""*\\CMLUA.dll"", ""*\\CMSTPLUA.dll"", ""*\\CMLUAUTIL.dll"") NOT(process_name IN(""CMSTP.exe"", ""CMMGR32.exe"")) NOT(Image IN(""*\\windows\\*"", ""*\\program files*"")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode Signed ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cmlua_or_cmstplua_uac_bypass_filter`",80,"['T1218', 'T1218.003']","{'uac', 'darkside'}",,"['ransomware', 'uac', 'cmlua', 'cmstplua', 'process']"
s231,Cobalt Strike Named Pipes,"The following analytic identifies the use of default or publicly known named pipes used with Cobalt Strike. A named pipe is a named, one-way or duplex pipe for communication between the pipe server and one or more pipe clients. Cobalt Strike uses named pipes in many ways and has default values used with the Artifact Kit and Malleable C2 Profiles. The following query assists with identifying these default named pipes. Each EDR product presents named pipes a little different. Consider taking the values and generating a query based on the product of choice. \
Upon triage, review the process performing the named pipe. If it is explorer.exe, It is possible it was injected into by another process. Review recent parallel processes to identify suspicious patterns or behaviors. A parallel process may have a network connection, review and follow the connection back to identify any file modifications.","`sysmon` EventID=17 OR EventID=18 PipeName IN (\\msagent_*, \\DserNamePipe*, \\srvsvc_*, \\postex_*, \\status_*, \\MSSE-*, \\spoolss_*, \\win_svc*, \\ntsvcs*, \\winsock*, \\UIA_PIPE*)  | stats count min(_time) as firstTime max(_time) as lastTime by Computer, process_name, process_id process_path, PipeName | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `cobalt_strike_named_pipes_filter`",80,['T1055'],"{'cobalt strike', 'trickbot', 'darkside'}",,"['pipes', 'pipe', 'processes', 'process', 'cobalt']"
s232,Common Ransomware Extensions,The search looks for file modifications with extensions commonly used by Ransomware,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`| rex field=file_name ""(?<file_extension>\.[^\.]+)$"" | `ransomware_extensions` | `common_ransomware_extensions_filter`",90,['T1485'],"{'clop', 'rex', 'samsam', 'ryuk'}",,"['ransomware', 'extensions', 'file', 'search', 'modifications']"
s233,Common Ransomware Notes,The search looks for files created with names matching those typically used in ransomware notes that tell the victim how to get their data back.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `ransomware_notes` | `common_ransomware_notes_filter`,90,['T1485'],"{'clop', 'samsam', 'ryuk'}",,"['ransomware', 'search', 'files', 'data', 'notes']"
s234,Conti Common Exec parameter,This search detects the suspicious commandline argument of revil ransomware to encrypt specific or all local drive and network shares of the compromised machine or host.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*-m local*"" OR Processes.process = ""*-m net*"" OR Processes.process = ""*-m all*"" OR Processes.process = ""*-nomutex*"" by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `conti_common_exec_parameter_filter`",80,['T1204'],"{'revil', 'conti'}",,"['ransomware', 'revil', 'compromised', 'search', 'encrypt']"
s235,Control Loading from World Writable Directory,"The following detection identifies control.exe loading either a .cpl or .inf from a writable directory. This is related to CVE-2021-40444. During triage, review parallel processes, parent and child, for further suspicious behaviors. In addition, capture file modifications and analyze.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=control.exe OR Processes.original_file_name=CONTROL.EXE) AND Processes.process IN (""*\\appdata\\*"", ""*\\windows\\temp\\*"", ""*\\programdata\\*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `control_loading_from_world_writable_directory_filter`",80,"['T1218', 'T1218.002']","{'cve-2021-40444', 'exe', 'rundll32'}",,"['cve', 'exe', 'processes', 'cpl', 'file']"
s236,Create local admin accounts using net exe,This search looks for the creation of local administrator accounts using net.exe .,| tstats `security_content_summariesonly` count values(Processes.user) as user values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=net.exe OR Processes.process_name=net1.exe) AND Processes.process=*/add* AND (Processes.process=*administrators* OR Processes.process=*administratoren* OR Processes.process=*administrateurs* OR Processes.process=*administrador* OR Processes.process=*amministratori* OR Processes.process=*administratorer*) by Processes.process Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `create_local_admin_accounts_using_net_exe_filter`,50,"['T1136.001', 'T1136']","{'leverage', 'net exe', 'exe', 'azorult'}",,"['administrator', 'accounts', 'local', 'exe', 'net']"
s237,Create or delete windows shares using net exe,This search looks for the creation or deletion of hidden shares using net.exe.,| tstats `security_content_summariesonly` count values(Processes.user) as user values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` by Processes.process Processes.process_name Processes.original_file_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | search process=*share* | `create_or_delete_windows_shares_using_net_exe_filter` ,50,"['T1070', 'T1070.005']","{'leverage', 'net exe', 'hidden', 'hidden cobra'}",285.0,"['shares', 'hidden', 'deletion', 'search', 'net']"
s238,Create Remote Thread into LSASS,Detect remote thread creation into LSASS consistent with credential dumping.,"`sysmon` EventID=8 TargetImage=*lsass.exe | stats count min(_time) as firstTime max(_time) as lastTime by Computer, EventCode, TargetImage, TargetProcessId | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `create_remote_thread_into_lsass_filter`",90,"['T1003.001', 'T1003']",{'lsass'},243.0,"['lsass', 'credential', 'dumping', 'remote', 'thread']"
s239,Create Remote Thread In Shell Application,This search is to detect suspicious process injection in command shell. This technique was seen in IcedID where it execute cmd.exe process to inject its shellcode as part of its execution as banking trojan. It is really uncommon to have a create remote thread execution in the following application.,"`sysmon` EventCode=8 TargetImage IN (""*\\cmd.exe"", ""*\\powershell*"") | stats count min(_time) as firstTime max(_time) as lastTime by  TargetImage TargetProcessId SourceProcessId  EventCode StartAddress SourceImage Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `create_remote_thread_in_shell_application_filter`",70,['T1055'],"{'shell', 'exe', 'icedid'}",,"['execution', 'shellcode', 'execute', 'process', 'exe']"
s240,Creation of lsass Dump with Taskmgr,"Detect the hands on keyboard behavior of Windows Task Manager creating a process dump of lsass.exe. Upon this behavior occurring, a file write/modification will occur in the users profile under \AppData\Local\Temp. The dump file, lsass.dmp, cannot be renamed, however if the dump occurs more than once, it will be named lsass (2).dmp.","`sysmon` EventID=11 process_name=taskmgr.exe TargetFilename=*lsass*.dmp | stats count min(_time) as firstTime max(_time) as lastTime by Computer, object_category, process_name, TargetFilename | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `creation_of_lsass_dump_with_taskmgr_filter`",80,"['T1003.001', 'T1003']","{'exe', 'lsass'}",243.0,"['lsass', 'dmp', 'renamed', 'keyboard', 'exe']"
s241,Creation of Shadow Copy,Monitor for signs that Vssadmin or Wmic has been used to create a shadow copy.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=vssadmin.exe Processes.process=*create* Processes.process=*shadow*) OR (Processes.process_name=wmic.exe Processes.process=*shadowcopy* Processes.process=*create*) by Processes.dest Processes.user Processes.process_name Processes.process  Processes.parent_process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `creation_of_shadow_copy_filter`,90,"['T1003.003', 'T1003']",{'wmi'},7.0,"['vssadmin', 'shadow', 'wmic', 'signs', 'monitor']"
s242,Creation of Shadow Copy with wmic and powershell,This search detects the use of wmic and Powershell to create a shadow copy.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` OR `process_powershell` Processes.process=*shadowcopy* Processes.process=*create* by Processes.user Processes.process_name Processes.original_file_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `creation_of_shadow_copy_with_wmic_and_powershell_filter`,90,"['T1003.003', 'T1003']","{'powershell', 'wmi'}",5.0,"['powershell', 'copy', 'shadow', 'wmic', 'search']"
s243,Credential Dumping via Copy Command from Shadow Copy,This search detects credential dumping using copy command from a shadow copy.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` (Processes.process=*\\system32\\config\\sam* OR Processes.process=*\\system32\\config\\security* OR Processes.process=*\\system32\\config\\system* OR Processes.process=*\\windows\\ntds\\ntds.dit*) by Processes.dest Processes.user Processes.process_name Processes.process  Processes.parent_process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `credential_dumping_via_copy_command_from_shadow_copy_filter` ,90,"['T1003.003', 'T1003']",,112.0,"['credential', 'search', 'dumping', 'copy', 'shadow']"
s244,Credential Dumping via Symlink to Shadow Copy,This search detects the creation of a symlink to a shadow copy.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` Processes.process=*mklink* Processes.process=*HarddiskVolumeShadowCopy* by Processes.dest Processes.user Processes.process_name Processes.process  Processes.parent_process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `credential_dumping_via_symlink_to_shadow_copy_filter`,90,"['T1003.003', 'T1003']",,285.0,"['symlink', 'search', 'shadow', 'copy', 'creation']"
s245,CSC Net On The Fly Compilation,"this analytic is to detect a suspicious compile before delivery approach of .net compiler csc.exe. This technique was seen in several adversaries, malware and even in red teams to take advantage the csc.exe .net compiler tool to compile on the fly a malicious .net code to evade detection from security product. This is a good hunting query to check further the file or process created after this event and check the file path that passed to csc.exe which is the .net code. Aside from that, powershell is capable of using this compiler in executing .net code in a powershell script so filter on that case is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_csc` Processes.process = ""*/noconfig*"" Processes.process = ""*/fullpaths*"" Processes.process = ""*@*"" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `csc_net_on_the_fly_compilation_filter`",50,"['T1027.004', 'T1027']","{'malware', 'powershell'}",233.0,"['powershell', 'csc', 'compiler', 'malware', 'compile']"
s246,Curl Download and Bash Execution,"The following analytic identifies the use of curl on Linux or MacOS attempting to download a file from a remote source and pipe it to bash. This is typically found with coinminers and most recently with CVE-2021-44228, a vulnerability in Log4j.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=curl (Processes.process=""*-s *"") OR (Processes.process=""*|*"" AND Processes.process=""*bash*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `curl_download_and_bash_execution_filter`",80,['T1105'],"{'cve-2021-44228', 'curl'}",,"['curl', 'bash', 'pipe', 'log4j', 'file']"
s247,Delete ShadowCopy With PowerShell,This following analytic detects PowerShell command to delete shadow copy using the WMIC PowerShell module. This technique was seen used by a recent adversary to deploy DarkSide Ransomware where it executed a child process of PowerShell to execute a hex encoded command to delete shadow copy. This hex encoded command was able to be decrypted by PowerShell log.,"`powershell` EventCode=4104 ScriptBlockText= ""*ShadowCopy*"" (ScriptBlockText = ""*Delete*"" OR ScriptBlockText = ""*Remove*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `delete_shadowcopy_with_powershell_filter`",90,['T1490'],"{'revil', 'darkside', 'powershell', 'wmi'}",,"['powershell', 'decrypted', 'ransomware', 'shadow', 'wmic']"
s248,Deleting Of Net Users,"This analytic will detect a suspicious net.exe/net1.exe command-line to delete a user on a system. This technique may be use by an administrator for legitimate purposes, however this behavior has been used in the wild to impair some user or deleting adversaries tracks created during its lateral movement additional systems. During triage, review parallel processes for additional behavior. Identify any other user accounts created before or after.","| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process=""*user*"" AND  Processes.process=""*/delete*"" by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `deleting_of_net_users_filter`",50,['T1531'],"{'net.exe', 'exe'}",163.0,"['deleting', 'exe', 'administrator', 'delete', 'net']"
s249,Deleting Shadow Copies,The vssadmin.exe utility is used to interact with the Volume Shadow Copy Service.  Wmic is an interface to the Windows Management Instrumentation.  This search looks for either of these tools being used to delete shadow copies.,| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=vssadmin.exe OR Processes.process_name=wmic.exe) Processes.process=*delete* Processes.process=*shadow* by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `deleting_shadow_copies_filter`,90,['T1490'],"{'wmi', 'exe', 'samsam', 'clop'}",,"['wmic', 'vssadmin', 'windows', 'exe', 'shadow']"
s250,Detect Activity Related to Pass the Hash Attacks,This search looks for specific authentication events from the Windows Security Event logs to detect potential attempts at using the Pass-the-Hash technique.,"`wineventlog_security` EventCode=4624 (Logon_Type=3 Logon_Process=NtLmSsp WorkstationName=WORKSTATION NOT AccountName=""ANONYMOUS LOGON"") OR (Logon_Type=9 Logon_Process=seclogo) | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by EventCode, Logon_Type, WorkstationName, user, dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_activity_related_to_pass_the_hash_attacks_filter` ",70,"['T1550', 'T1550.002']",{'leverage'},225.0,"['authentication', 'hash', 'security', 'attempts', 'detect']"
s251,Detect AzureHound Command-Line Arguments,"The following analytic identifies the common command-line argument used by AzureHound `Invoke-AzureHound`. Being the script is FOSS, function names may be modified, but these changes are dependent upon the operator. In most instances the defaults are used. This analytic works to identify the common command-line attributes used. It does not cover the entirety of every argument in order to avoid false positives.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN (""*invoke-azurehound*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_azurehound_command_line_arguments_filter`",80,"['T1087.002', 'T1069.001', 'T1482', 'T1087.001', 'T1087', 'T1069.002', 'T1069']","{'ps1', 'azure', 'bloodhound'}",,"['azurehound', 'command', 'invoke', 'script', 'analytic']"
s252,Detect AzureHound File Modifications,"The following analytic is similar to SharpHound file modifications, but this instance covers the use of Invoke-AzureHound. AzureHound is the SharpHound equivilent but for Azure. It's possible this may never be seen in an environment as most attackers may execute this tool remotely. Once execution is complete, a zip file with a similar name will drop `20210601090751-azurecollection.zip`. In addition to the zip, multiple .json files will be written to disk, which are in the zip.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*-azurecollection.zip"", ""*-azprivroleadminrights.json"", ""*-azglobaladminrights.json"", ""*-azcloudappadmins.json"", ""*-azapplicationadmins.json"") by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.file_path Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_azurehound_file_modifications_filter`",70,"['T1087.002', 'T1069.001', 'T1482', 'T1087.001', 'T1087', 'T1069.002', 'T1069']","{'ps1', 'azure', 'bloodhound'}",,"['azurehound', 'azure', 'azurecollection', 'zip', 'file']"
s253,Detect Copy of ShadowCopy with Script Block Logging,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies `copy` or `[System.IO.File]::Copy` being used to capture the SAM, SYSTEM or SECURITY hives identified in script block. This will catch the most basic use cases for credentials being taken for offline cracking. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 Message IN (""*copy*"",""*[System.IO.File]::Copy*"") AND Message IN (""*System32\\config\\SAM*"", ""*System32\\config\\SYSTEM*"",""*System32\\config\\SECURITY*"") | stats count min(_time) as firstTime max(_time) as lastTime by OpCode ComputerName User EventCode Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_copy_of_shadowcopy_with_script_block_logging_filter`",80,"['T1003.002', 'T1003']","{'hive', 'powershell', 'cve-2021-36934'}",,"['powershell', 'logs', 'processes', 'logging', 'execution']"
s254,Detect Credential Dumping through LSASS access,This search looks for reading lsass memory consistent with credential dumping.,"`sysmon` EventCode=10 TargetImage=*lsass.exe (GrantedAccess=0x1010 OR GrantedAccess=0x1410) | stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_credential_dumping_through_lsass_access_filter` ",80,"['T1003.001', 'T1003']",{'lsass'},243.0,"['lsass', 'credential', 'memory', 'dumping', 'search']"
s255,Detect Empire with PowerShell Script Block Logging,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies the common PowerShell stager used by PowerShell-Empire. Each stager that may use PowerShell all uses the same pattern. The initial HTTP will be base64 encoded and use `system.net.webclient`. Note that some obfuscation may evade the analytic. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.",`powershell` EventCode=4104  (ScriptBlockText=*system.net.webclient* AND ScriptBlockText=*frombase64string*) | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_empire_with_powershell_script_block_logging_filter`,90,"['T1059', 'T1059.001']","{'wiper', 'powershell', 'empire'}",,"['powershell', 'processes', 'logs', 'execution', 'logging']"
s256,Detect Excessive Account Lockouts From Endpoint,This search identifies endpoints that have caused a relatively high number of account lockouts in a short period.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(All_Changes.user) as user from datamodel=Change.All_Changes where All_Changes.result=""*locked out*"" by All_Changes.dest All_Changes.result |`drop_dm_object_name(""All_Changes"")` |`drop_dm_object_name(""Account_Management"")`| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search count > 5 | `detect_excessive_account_lockouts_from_endpoint_filter`",60,"['T1078', 'T1078.002']",,299.0,"['lockouts', 'account', 'endpoints', 'search', 'caused']"
s257,Detect Excessive User Account Lockouts,This search detects user accounts that have been locked out a relatively high number of times in a short period.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Change.All_Changes where  All_Changes.result=""*locked out*"" by All_Changes.user All_Changes.result |`drop_dm_object_name(""All_Changes"")` |`drop_dm_object_name(""Account_Management"")`| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search count > 5 | `detect_excessive_user_account_lockouts_filter`",60,"['T1078', 'T1078.003']",,134.0,"['search', 'locked', 'accounts', 'user', 'detects']"
s258,Detect Exchange Web Shell,"The following query identifies suspicious .aspx created in 3 paths identified by Microsoft as known drop locations for Exchange exploitation related to HAFNIUM group and recently disclosed vulnerablity named ProxyShell. Paths include: `\HttpProxy\owa\auth\`, `\inetpub\wwwroot\aspnet_client\`, and `\HttpProxy\OAB\`. Upon triage, the suspicious .aspx file will likely look obvious on the surface. inspect the contents for script code inside. Identify additional log sources, IIS included, to review source and other potential exploitation. It is often the case that a particular threat is only applicable to a specific subset of systems in your environment. Typically analytics to detect those threats are written without the benefit of being able to only target those systems as well. Writing analytics against all systems when those behaviors are limited to identifiable subsets of those systems is suboptimal. Consider the case ProxyShell vulnerability on Microsoft Exchange Servers. With asset information, a hunter can limit their analytics to systems that have been identified as Exchange servers. A hunter may start with the theory that the exchange server is communicating with new systems that it has not previously. If this theory is run against all publicly facing systems, the amount of noise it will generate will likely render this theory untenable. However, using the asset information to limit this analytic to just the Exchange servers will reduce the noise allowing the hunter to focus only on the systems where this behavioral change is relevant.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=System  by _time span=1h Processes.process_id Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*\\HttpProxy\\owa\\auth\\*"", ""*\\inetpub\\wwwroot\\aspnet_client\\*"", ""*\\HttpProxy\\OAB\\*"") Filesystem.file_name=""*.aspx"" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest file_create_time, file_name, file_path, process_name | `detect_exchange_web_shell_filter`",90,"['T1505', 'T1505.003', 'T1190']",{'hafnium'},,"['iis', 'aspx', 'threats', 'owa', 'vulnerability']"
s259,Detect HTML Help Renamed,"The following analytic identifies a renamed instance of hh.exe (HTML Help) executing a Compiled HTML Help (CHM). This particular technique will load Windows script code from a compiled help file. CHM files may contain nearly any file type embedded, but only execute html/htm. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The ""htm"" and ""html"" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. Validate it is the legitimate version of hh.exe by reviewing the PE metadata. hh.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name!=hh.exe AND Processes.original_file_name=HH.EXE by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_renamed_filter`,80,"['T1218', 'T1218.001']",{'html'},20.0,"['vbscript', 'executing', 'script', 'html', 'htm']"
s260,Detect HTML Help Spawn Child Process,"The following analytic identifies hh.exe (HTML Help) execution of a Compiled HTML Help (CHM) that spawns a child process. This particular technique will load Windows script code from a compiled help file. CHM files may contain nearly any file type embedded, but only execute html/htm. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The ""htm"" and ""html"" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. Review child process events and investigate further. hh.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=hh.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_spawn_child_process_filter`,80,"['T1218', 'T1218.001']","{'exe', 'silence', 'html'}",20.0,"['vbscript', 'script', 'html', 'htm', 'exe']"
s261,Detect HTML Help URL in Command Line,"The following analytic identifies hh.exe (HTML Help) execution of a Compiled HTML Help (CHM) file from a remote url. This particular technique will load Windows script code from a compiled help file. CHM files may  contain nearly any file type embedded, but only execute html/htm. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The ""htm"" and ""html"" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. Review reputation of remote IP and domain. Some instances, it is worth decompiling the .chm file to review its original contents. hh.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_hh` Processes.process=*http* by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_url_in_command_line_filter`,90,"['T1218', 'T1218.001']","{'exe', 'silence', 'html'}",20.0,"['vbscript', 'html', 'script', 'htm', 'exe']"
s262,Detect HTML Help Using InfoTech Storage Handlers,"The following analytic identifies hh.exe (HTML Help) execution of a Compiled HTML Help (CHM) file using InfoTech Storage Handlers. This particular technique will load Windows script code from a compiled help file, using InfoTech Storage Handlers. itss.dll will load upon execution. Three InfoTech Storage handlers are supported - ms-its, its, mk:@MSITStore. ITSS may be used to launch a specific html/htm file from within a CHM file. CHM files may contain nearly any file type embedded. Upon a successful execution, the following script engines may be used for execution - JScript, VBScript, VBScript.Encode, JScript.Encode, JScript.Compact. Analyst may identify vbscript.dll or jscript.dll loading into hh.exe upon execution. The ""htm"" and ""html"" file extensions were the only extensions observed to be supported for the execution of Shortcut commands or WSH script code. During investigation, identify script content origination. hh.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_hh` Processes.process IN (""*its:*"", ""*mk:@MSITStore:*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_html_help_using_infotech_storage_handlers_filter`",80,"['T1218', 'T1218.001']","{'exe', 'silence'}",20.0,"['vbscript', 'script', 'jscript', 'htm', 'exe']"
s263,Detect Mimikatz Using Loaded Images,This search looks for reading loaded Images unique to credential dumping with Mimikatz. Deprecated because mimikatz libraries changed and very noisy sysmon Event Code.,"`sysmon` EventCode=7 | stats values(ImageLoaded) as ImageLoaded values(ProcessId) as ProcessId by Computer, Image | search ImageLoaded=*WinSCard.dll ImageLoaded=*cryptdll.dll ImageLoaded=*hid.dll ImageLoaded=*samlib.dll ImageLoaded=*vaultcli.dll | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mimikatz_using_loaded_images_filter`",80,"['T1003.001', 'T1003']","{'darkside', 'mimikatz'}",,"['mimikatz', 'images', 'credential', 'dumping', 'loaded']"
s264,Detect Mimikatz With PowerShell Script Block Logging,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable no critical endpoints or all. \
This analytic identifies common Mimikatz functions that may be identified in the script block, including `mimikatz`. This will catch the most basic use cases for Pass the Ticket, Pass the Hash and `-DumprCreds`. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText IN (*mimikatz*, *-dumpcr*, *sekurlsa::pth*, *kerberos::ptt*, *kerberos::golden*) | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_mimikatz_with_powershell_script_block_logging_filter`",90,"['T1003', 'T1059.001']","{'wiper', 'powershell', 'mimikatz'}",,"['powershell', 'processes', 'execution', 'logs', 'logging']"
s265,Detect mshta inline hta execution,"The following analytic identifies ""mshta.exe"" execution with inline protocol handlers. ""JavaScript"", ""VBScript"", and ""About"" are the only supported options when invoking HTA content directly on the command-line. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""mshta.exe"" and its parent process.",| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_mshta` (Processes.process=*vbscript* OR Processes.process=*javascript* OR Processes.process=*about*) by Processes.user Processes.process_name Processes.original_file_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mshta_inline_hta_execution_filter`,90,"['T1218', 'T1218.005']",{'exe'},58.0,"['mshta', 'hta', 'execution', 'exe', 'vbscript']"
s266,Detect mshta renamed,The following analytic identifies renamed instances of mshta.exe executing. Mshta.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64. This analytic utilizes the internal name of the PE to identify if is the legitimate mshta binary. Further analysis should be performed to review the executed content and validation it is the real mshta.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name!=mshta.exe AND Processes.original_file_name=MSHTA.EXE by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_mshta_renamed_filter`,80,"['T1218', 'T1218.005']",{'exe'},58.0,"['mshta', 'exe', 'system32', 'executing', 'renamed']"
s267,Detect MSHTA Url in Command Line,"This analytic identifies when Microsoft HTML Application Host (mshta.exe) utility is used to make remote http connections. Adversaries may use mshta.exe to proxy the download and execution of remote .hta files. The analytic identifies command line arguments of http and https being used. This technique is commonly used by malicious software to bypass preventative controls. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""rundll32.exe"" and its parent process.","| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_mshta` (Processes.process=""*http://*"" OR Processes.process=""*https://*"") by Processes.user Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_mshta_url_in_command_line_filter`",80,"['T1218', 'T1218.005']","{'dll', 'exe', 'rundll32'}",341.0,"['rundll32', 'mshta', 'execution', 'exe', 'http']"
s268,Detect New Local Admin account,This search looks for newly created accounts that have been elevated to local administrators.,`wineventlog_security` EventCode=4720 OR (EventCode=4732 Group_Name=Administrators) | transaction member_id connected=false maxspan=180m | rename member_id as user | stats count min(_time) as firstTime max(_time) as lastTime by user dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_new_local_admin_account_filter`,60,"['T1136.001', 'T1136']",{'hafnium'},,"['administrators', 'accounts', 'search', 'local', 'elevated']"
s269,Detect Path Interception By Creation Of program exe,"The detection Detect Path Interception By Creation Of program exe is detecting the abuse of unquoted service paths, which is a popular technique for privilege escalation. ","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=services.exe by Processes.user Processes.process_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | rex field=process ""^.*?\\\\(?<service_process>[^\\\\]*\.(?:exe|bat|com|ps1))"" | eval process_name = lower(process_name) | eval service_process = lower(service_process) | where process_name != service_process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_path_interception_by_creation_of_program_exe_filter`",70,"['T1574.009', 'T1574']","{'rex', 'interception', 'exe', 'ps1', 'privilege'}",,"['exe', 'path', 'privilege', 'paths', 'detection']"
s270,Detect processes used for System Network Configuration Discovery,This search looks for fast execution of processes used for system network configuration discovery on the endpoint.,"| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where NOT Processes.user IN ("""",""unknown"") by Processes.dest Processes.process_name Processes.user _time | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | search `system_network_configuration_discovery_tools` | transaction dest connected=false maxpause=5m |where eventcount>=5 | table firstTime lastTime dest user process_name process parent_process eventcount | `detect_processes_used_for_system_network_configuration_discovery_filter`",40,['T1016'],{'network'},60.0,"['processes', 'search', 'endpoint', 'network', 'discovery']"
s271,Detect Prohibited Applications Spawning cmd exe,This search looks for executions of cmd.exe spawned by a process that is often abused by attackers and that does not typically launch cmd.exe.,| tstats `security_content_summariesonly` count values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` by Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.dest Processes.user| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |search [`prohibited_apps_launching_cmd`] | `detect_prohibited_applications_spawning_cmd_exe_filter`,80,"['T1059', 'T1059.003']","{'exe', 'nobelium'}",,"['cmd', 'exe', 'executions', 'process', 'launch']"
s272,Detect PsExec With accepteula Flag,"This search looks for events where `PsExec.exe` is run with the `accepteula` flag in the command line. PsExec is a built-in Windows utility that enables you to execute processes on other systems. It is fully interactive for console applications. This tool is widely used for launching interactive command prompts on remote systems. Threat actors leverage this extensively for executing code on compromised systems. If an attacker is running PsExec for the first time, they will be prompted to accept the end-user license agreement (EULA), which can be passed as the argument `accepteula` within the command line.",| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_psexec` Processes.process=*accepteula* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)`| `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_psexec_with_accepteula_flag_filter`,50,"['T1021', 'T1021.002']","{'hafnium', 'exe', 'psexec', 'samsam', 'leverage', 'darkside'}",,"['psexec', 'executing', 'exe', 'execute', 'prompts']"
s273,Detect RClone Command-Line Usage,"This analytic identifies commonly used command-line arguments used by `rclone.exe` to initiate a file transfer. Some arguments were negated as they are specific to the configuration used by adversaries. In particular, an adversary may list the files or directories of the remote file share using `ls` or `lsd`, which is not indicative of malicious behavior. During triage, at this stage of a ransomware event, exfiltration is about to occur or has already. Isolate the endpoint and continue investigating by review file modifications and parallel processes.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rclone` Processes.process IN (""*copy*"", ""*mega*"", ""*pcloud*"", ""*ftp*"", ""*--config*"", ""*--progress*"", ""*--no-check-certificate*"", ""*--ignore-existing*"", ""*--auto-confirm*"", ""*--transfers*"", ""*--multi-thread-streams*"")  by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |  `security_content_ctime(lastTime)` | `detect_rclone_command_line_usage_filter`",50,['T1020'],"{'sodinokibi', 'rclone', 'revil', 'bazar', 'ftp', 'darkside'}",,"['ransomware', 'rclone', 'files', 'file', 'exfiltration']"
s274,Detect Regasm Spawning a Process,"The following analytic identifies regasm.exe spawning a process. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. Spawning of a child process is rare from either process and should be investigated further. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. regsvcs.exe and regasm.exe are natively found in C:\Windows\Microsoft.NET\Framework\v*\regasm|regsvcs.exe and C:\Windows\Microsoft.NET\Framework64\v*\regasm|regsvcs.exe.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=regasm.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regasm_spawning_a_process_filter`,80,"['T1218', 'T1218.009']","{'regasm', 'exe'}",61.0,"['regasm', 'processes', 'regsvcs', 'exe', 'process']"
s275,Detect Regasm with Network Connection,"The following analytic identifies regasm.exe with a network connection to a public IP address, exluding private IP space. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. By contacting a remote command and control server, the adversary will have the ability to escalate privileges and complete the objectives. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. Review the reputation of the remote IP or domain and block as needed. regsvcs.exe and regasm.exe are natively found in C:\Windows\Microsoft.NET\Framework\v*\regasm|regsvcs.exe and C:\Windows\Microsoft.NET\Framework64\v*\regasm|regsvcs.exe.","`sysmon` EventID=3 dest_ip!=10.0.0.0/12 dest_ip!=172.16.0.0/12 dest_ip!=192.168.0.0/16 process_name=regasm.exe | rename Computer as dest | stats count min(_time) as firstTime max(_time) as lastTime by dest, user, process_name, src_ip, dest_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regasm_with_network_connection_filter`",80,"['T1218', 'T1218.009']","{'regasm', 'exe'}",61.0,"['regsvcs', 'regasm', 'exe', 'microsoft', 'ip']"
s276,Detect Regasm with no Command Line Arguments,"The following analytic identifies regasm.exe with no command line arguments. This particular behavior occurs when another process injects into regasm.exe, no command line arguments will be present. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Regasm.exe are natively found in `C:\Windows\Microsoft.NET\Framework\v*\regasm|regsvcs.exe` and `C:\Windows\Microsoft.NET\Framework64\v*\regasm|regsvcs.exe`.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_regasm` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(regasm\.exe.{0,4}$)"" | `detect_regasm_with_no_command_line_arguments_filter`",70,"['T1218', 'T1218.009']","{'regasm', 'exe'}",61.0,"['regasm', 'exe', 'regsvcs', 'processes', 'command']"
s277,Detect Regsvcs Spawning a Process,"The following analytic identifies regsvcs.exe spawning a process. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. Spawning of a child process is rare from either process and should be investigated further. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. regsvcs.exe and regasm.exe are natively found in C:\Windows\Microsoft.NET\Framework\v*\regasm|regsvcs.exe and C:\Windows\Microsoft.NET\Framework64\v*\regasm|regsvcs.exe.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=regsvcs.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regsvcs_spawning_a_process_filter`,80,"['T1218', 'T1218.009']","{'regasm', 'exe'}",61.0,"['regsvcs', 'processes', 'exe', 'regasm', 'process']"
s278,Detect Regsvcs with Network Connection,"The following analytic identifies Regsvcs.exe with a network connection to a public IP address, exluding private IP space. This particular technique has been used in the wild to bypass application control products. Regasm.exe and Regsvcs.exe are signed by Microsoft. By contacting a remote command and control server, the adversary will have the ability to escalate privileges and complete the objectives. During investigation, identify and retrieve the content being loaded. Review parallel processes for additional suspicious behavior. Gather any other file modifications and review accordingly. Review the reputation of the remote IP or domain and block as needed. regsvcs.exe and regasm.exe are natively found in C:\Windows\Microsoft.NET\Framework\v*\regasm|regsvcs.exe and C:\Windows\Microsoft.NET\Framework64\v*\regasm|regsvcs.exe.","`sysmon` EventID=3 dest_ip!=10.0.0.0/12 dest_ip!=172.16.0.0/12 dest_ip!=192.168.0.0/16 process_name=regsvcs.exe | rename Computer as dest | stats count min(_time) as firstTime max(_time) as lastTime by dest, user, process_name, src_ip, dest_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_regsvcs_with_network_connection_filter`",80,"['T1218', 'T1218.009']","{'regasm', 'exe'}",61.0,"['regsvcs', 'exe', 'regasm', 'microsoft', 'ip']"
s279,Detect Regsvcs with No Command Line Arguments,"The following analytic identifies regsvcs.exe with no command line arguments. This particular behavior occurs when another process injects into regsvcs.exe, no command line arguments will be present. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Regasm.exe are natively found in C:\Windows\Microsoft.NET\Framework\v*\regasm|regsvcs.exe and C:\Windows\Microsoft.NET\Framework64\v*\regasm|regsvcs.exe.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_regsvcs` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(regsvcs\.exe.{0,4}$)""| `detect_regsvcs_with_no_command_line_arguments_filter`",70,"['T1218', 'T1218.009']","{'regasm', 'exe'}",61.0,"['regsvcs', 'regasm', 'exe', 'processes', 'microsoft']"
s280,Detect Regsvr32 Application Control Bypass,"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary.This variation of the technique is often referred to as a ""Squiblydoo"" attack. \
Upon investigating, look for network connections to remote destinations (internal or external). Be cautious to modify the query to look for ""scrobj.dll"", the "".dll"" is not required to load scrobj. ""scrobj.dll"" will be loaded by ""regsvr32.exe"" upon execution. ",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` Processes.process=*scrobj* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_regsvr32_application_control_bypass_filter`,80,"['T1218', 'T1218.010']","{'dll', 'signed binary', 'cobalt strike'}",,"['regsvr32', 'dlls', 'dll', 'malicious', 'scrobj']"
s281,Detect Renamed 7-Zip,"The following analytic identifies renamed 7-Zip usage using Sysmon. At this stage of an attack, review parallel processes and file modifications for data that is staged or potentially have been exfiltrated. This analytic utilizes the OriginalFileName to capture the renamed process. During triage, validate this is the legitimate version of `7zip` by reviewing the PE metadata. In addition, review parallel processes for further suspicious behavior.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.original_file_name=7z*.exe AND Processes.process_name!=7z*.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_7_zip_filter`,30,"['T1560.001', 'T1560']",{'7zip'},300.0,"['7zip', 'zip', 'originalfilename', 'sysmon', 'renamed']"
s282,Detect Renamed PSExec,"The following analytic identifies renamed instances of `PsExec.exe` being utilized on an endpoint. Most instances, it is highly probable to capture `Psexec.exe` or other SysInternal utility usage with the command-line argument of `-accepteula`. During triage, validate this is the legitimate version of `PsExec` by reviewing the PE metadata. In addition, review parallel processes for further suspicious behavior.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name!=psexec.exe OR Processes.process_name!=psexec64.exe) AND Processes.original_file_name=psexec.c by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_psexec_filter`,30,"['T1569', 'T1569.002']","{'hafnium', 'exe', 'psexec', 'samsam', 'darkside'}",,"['psexec', 'exe', 'processes', 'pe', 'endpoint']"
s283,Detect Renamed RClone,"The following analytic identifies the usage of `rclone.exe`, renamed, being used to exfiltrate data to a remote destination. RClone has been used by multiple ransomware groups to exfiltrate data. In many instances, it will be downloaded from the legitimate site and executed accordingly. During triage, isolate the endpoint and begin to review parallel processes for additional behavior. At this stage, the adversary may have staged data to be exfiltrated.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.original_file_name=rclone.exe AND Processes.process_name!=rclone.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_rclone_filter`,30,['T1020'],"{'exe', 'sodinokibi', 'rclone', 'revil', 'darkside'}",,"['ransomware', 'rclone', 'exfiltrate', 'exe', 'exfiltrated']"
s284,Detect Renamed WinRAR,"The following analtyic identifies renamed instances of `WinRAR.exe`. In most cases, it is not common for WinRAR to be used renamed, however it is common to be installed by a third party application and executed from a non-standard path. During triage, validate additional metadata from the binary that this is `WinRAR`. Review parallel processes and file modifications.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.original_file_name=WinRAR.exe (Processes.process_name!=rar.exe OR Processes.process_name!=winrar.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_renamed_winrar_filter`,30,"['T1560.001', 'T1560']",{'exe'},238.0,"['winrar', 'renamed', 'exe', 'file', 'installed']"
s285,Detect Rundll32 Application Control Bypass - advpack,"The following analytic identifies rundll32.exe loading advpack.dll and ieadvpack.dll by calling the LaunchINFSection function on the command line. This particular technique will load script code from a file. Upon a successful execution, the following module loads may occur - clr.dll, jscript.dll and scrobj.dll. During investigation, identify script content origination. Generally, a child process will spawn from rundll32.exe, but that may be bypassed based on script code contents. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64. During investigation, review any network connections and obtain the script content executed. It's possible other files are on disk.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*advpack* by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_rundll32_application_control_bypass___advpack_filter`,80,"['T1218', 'T1218.011']","{'dll', 'rundll32'}",254.0,"['rundll32', 'dll', 'advpack', 'ieadvpack', 'system32']"
s286,Detect Rundll32 Application Control Bypass - setupapi,"The following analytic identifies rundll32.exe loading setupapi.dll and iesetupapi.dll by calling the LaunchINFSection function on the command line. This particular technique will load script code from a file. Upon a successful execution, the following module loads may occur - clr.dll, jscript.dll and scrobj.dll. During investigation, identify script content origination. Generally, a child process will spawn from rundll32.exe, but that may be bypassed based on script code contents. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64. During investigation, review any network connections and obtain the script content executed. It's possible other files are on disk.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*setupapi* by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_rundll32_application_control_bypass___setupapi_filter`,80,"['T1218', 'T1218.011']","{'dll', 'rundll32'}",254.0,"['rundll32', 'dll', 'launchinfsection', 'system32', 'script']"
s287,Detect Rundll32 Application Control Bypass - syssetup,"The following analytic identifies rundll32.exe loading syssetup.dll by calling the LaunchINFSection function on the command line. This particular technique will load script code from a file. Upon a successful execution, the following module loads may occur - clr.dll, jscript.dll and scrobj.dll. During investigation, identify script content origination. Generally, a child process will spawn from rundll32.exe, but that may be bypassed based on script code contents. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64. During investigation, review any network connections and obtain the script content executed. It's possible other files are on disk.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*syssetup* by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_rundll32_application_control_bypass___syssetup_filter`,80,"['T1218', 'T1218.011']","{'dll', 'rundll32'}",254.0,"['rundll32', 'dll', 'system32', 'launchinfsection', 'script']"
s288,Detect Rundll32 Inline HTA Execution,"The following analytic identifies ""rundll32.exe"" execution with inline protocol handlers. ""JavaScript"", ""VBScript"", and ""About"" are the only supported options when invoking HTA content directly on the command-line. This type of behavior is commonly observed with fileless malware or application whitelisting bypass techniques. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""rundll32.exe"" and its parent process.",| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` (Processes.process=*vbscript* OR Processes.process=*javascript* OR Processes.process=*about*) by Processes.user Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `detect_rundll32_inline_hta_execution_filter`,70,"['T1218', 'T1218.005']","{'malware', 'dll', 'nobelium', 'rundll32'}",,"['rundll32', 'malware', 'execution', 'hta', 'handlers']"
s289,Detect SharpHound Command-Line Arguments,"The following analytic identifies common command-line arguments used by SharpHound `-collectionMethod` and `invoke-bloodhound`. Being the script is FOSS, function names may be modified, but these changes are dependent upon the operator. In most instances the defaults are used. This analytic works to identify the common command-line attributes used. It does not cover the entirety of every argument in order to avoid false positives.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN (""*-collectionMethod*"",""*invoke-bloodhound*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_sharphound_command_line_arguments_filter`",30,"['T1087.002', 'T1069.001', 'T1482', 'T1087.001', 'T1087', 'T1069.002', 'T1069']",{'bloodhound'},,"['command', 'collectionmethod', 'sharphound', 'arguments', 'bloodhound']"
s290,Detect SharpHound File Modifications,"SharpHound is used as a reconnaissance collector, ingestor, for BloodHound. SharpHound will query the domain controller and begin gathering all the data related to the domain and trusts. For output, it will drop a .zip file upon completion following a typical pattern that is often not changed. This analytic focuses on the default file name scheme. Note that this may be evaded with different parameters within SharpHound, but that depends on the operator. `-randomizefilenames` and `-encryptzip` are two examples. In addition, executing SharpHound via .exe or .ps1 without any command-line arguments will still perform activity and dump output to the default filename. Example default filename `20210601181553_BloodHound.zip`. SharpHound creates multiple temp files following the same pattern `20210601182121_computers.json`, `domains.json`, `gpos.json`, `ous.json` and `users.json`. Tuning may be required, or remove these json's entirely if it is too noisy. During traige, review parallel processes for further suspicious behavior. Typically, the process executing the `.ps1` ingestor will be PowerShell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*bloodhound.zip"", ""*_computers.json"", ""*_gpos.json"", ""*_domains.json"", ""*_users.json"", ""*_groups.json"") by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.file_path Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_sharphound_file_modifications_filter`",30,"['T1087.002', 'T1069.001', 'T1482', 'T1087.001', 'T1087', 'T1069.002', 'T1069']","{'ps1', 'bloodhound', 'powershell'}",,"['sharphound', 'bloodhound', 'filename', 'file', 'files']"
s291,Detect SharpHound Usage,"The following analytic identifies SharpHound binary usage by using the original filena,e. In addition to renaming the PE, other coverage is available to detect command-line arguments. This particular analytic looks for the original_file_name of `SharpHound.exe` and the process name. It is possible older instances of SharpHound.exe have different original filenames. Dependent upon the operator, the code may be re-compiled and the attributes removed or changed to anything else. During triage, review the metadata of the binary in question. Review parallel processes for suspicious behavior. Identify the source of this binary.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=sharphound.exe OR Processes.original_file_name=SharpHound.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_sharphound_usage_filter`,30,"['T1087.002', 'T1069.001', 'T1482', 'T1087.001', 'T1087', 'T1069.002', 'T1069']","{'exe', 'bloodhound'}",,"['sharphound', 'original_file_name', 'compiled', 'binary', 'exe']"
s292,Detect Use of cmd exe to Launch Script Interpreters,"This search looks for the execution of the cscript.exe or wscript.exe processes, with a parent of cmd.exe. The search will return the count, the first and last time this execution was seen on a machine, the user, and the destination of the machine","| tstats `security_content_summariesonly` count values(Processes.process) min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=""cmd.exe"" (Processes.process_name=cscript.exe OR Processes.process_name =wscript.exe) by Processes.parent_process Processes.process_name Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `detect_use_of_cmd_exe_to_launch_script_interpreters_filter`",70,"['T1059', 'T1059.003']","{'exe', 'emotet', 'azorult'}",,"['cscript', 'wscript', 'cmd', 'processes', 'exe']"
s293,Detect WMI Event Subscription Persistence,"The following analytic identifies the use of WMI Event Subscription to establish persistence or perform privilege escalation.  WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges. This analytic is restricted by commonly added process execution and a path. If the volume is low enough, remove the values and flag on any new subscriptions.\
All event subscriptions have three components \
1. Filter - WQL Query for the events we want. EventID equals 19 \
1. Consumer - An action to take upon triggering the filter. EventID equals 20 \
1. Binding - Registers a filter to a consumer. EventID equals 21 \
Monitor for the creation of new WMI EventFilter, EventConsumer, and FilterToConsumerBinding. It may be pertinent to review all 3 to identify the flow of execution. In addition, EventCode 4104 may assist with any other PowerShell script usage that registered the subscription.",`sysmon` EventID=20 | stats count min(_time) as firstTime max(_time) as lastTime by Computer User Destination | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `detect_wmi_event_subscription_persistence_filter`,70,"['T1546.003', 'T1546']","{'powershell', 'wmi'}",23.0,"['wmi', 'eventfilter', 'eventconsumer', 'wmiprvse', 'eventid']"
s294,Disabled Kerberos Pre-Authentication Discovery With Get-ADUser,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-ADUser` commandlet with specific parameters. `Get-ADUser` is part of the Active Directory PowerShell module used to manage Windows Active Directory networks. As the name suggests, `Get-ADUser` is used to query for domain users. With the appropiate parameters, Get-ADUser allows adversaries to discover domain accounts with Kerberos Pre Authentication disabled.\ Red Teams and adversaries alike use may abuse Get-ADUSer to enumerate these accounts and attempt to crack their passwords offline."," `powershell` EventCode=4104 (ScriptBlockText = ""*Get-ADUser*"" AND ScriptBlockText=""*4194304*"") | stats count min(_time)  as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `disabled_kerberos_pre_authentication_discovery_with_get_aduser_filter`",60,"['T1558', 'T1558.004']",{'powershell'},134.0,"['aduser', 'powershell', 'authentication', 'users', 'accounts']"
s295,Disabled Kerberos Pre-Authentication Discovery With PowerView,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainUser` commandlet with specific parameters. `Get-DomainUser` is part of PowerView, a PowerShell tool used to perform enumeration on Windows Active Directory networks. As the name suggests, `Get-DomainUser` is used to identify domain users and combining it with `-PreauthNotRequired` allows adversaries to discover domain accounts with Kerberos Pre Authentication disabled.\ Red Teams and adversaries alike use may leverage PowerView to enumerate these accounts and attempt to crack their passwords offline."," `powershell` EventCode=4104 (ScriptBlockText = ""*Get-DomainUser*"" AND ScriptBlockText=""*PreauthNotRequired*"") | stats count min(_time)  as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `disabled_kerberos_pre_authentication_discovery_with_powerview_filter`",60,"['T1558', 'T1558.004']","{'leverage', 'powershell', 'password'}",301.0,"['domainuser', 'authentication', 'powershell', 'passwords', 'users']"
s296,Disable AMSI Through Registry,"this search is to identify modification in registry to disable AMSI windows feature to evade detections. This technique was seen in several ransomware, RAT and even APT to impaire defenses of the compromise machine and to be able to execute payload with minimal alert as much as possible.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows Script\\Settings\\AmsiEnable"" Registry.registry_value_data = ""0x00000000"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_amsi_through_registry_filter`",50,"['T1562.001', 'T1562']","{'registry modification', 'amsi'}",247.0,"['ransomware', 'amsi', 'registry', 'disable', 'windows']"
s297,Disable Defender AntiVirus Registry,"This particular behavior is typically executed when an adversaries or malware gains access to an endpoint and beings to perform execution and to evade detections. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Policies\\Microsoft\\Windows Defender*"" Registry.registry_value_name = DisableAntiVirus Registry.registry_value_data = 0x00000001 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_defender_antivirus_registry_filter`",70,"['T1562.001', 'T1562']","{'malware', 'registry modification', 'icedid'}",48.0,"['malware', 'execution', 'processes', 'batch', 'registry']"
s298,Disable Defender BlockAtFirstSeen Feature,This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the BlockAtFirstSeen feature where it block suspicious file first seen in the host.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Microsoft\\Windows Defender\\SpyNet*"" Registry.registry_value_name = DisableBlockAtFirstSeen Registry.registry_value_data = 0x00000001 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_defender_blockatfirstseen_feature_filter`",70,"['T1562.001', 'T1562']","{'registry modification', 'icedid', 'azorult'}",,"['blockatfirstseen', 'registry', 'defender', 'disable', 'detection']"
s299,Disable Defender Enhanced Notification,This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the Enhanced Notification feature wher user or admin set to show or display alerts.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*Microsoft\\Windows Defender\\Reporting*"" Registry.registry_value_name = DisableEnhancedNotifications Registry.registry_value_data = 0x00000001 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_defender_enhanced_notification_filter`",70,"['T1562.001', 'T1562']","{'registry modification', 'icedid', 'azorult'}",,"['defender', 'registry', 'disable', 'detection', 'detect']"
s300,Disable Defender MpEngine Registry,"This particular behavior is typically executed when an adversaries or malware gains access to an endpoint and beings to perform execution and to evade detections. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Policies\\Microsoft\\Windows Defender\\MpEngine*"" Registry.registry_value_name = MpEnablePus Registry.registry_value_data = 0x00000000 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_defender_mpengine_registry_filter`",70,"['T1562.001', 'T1562']","{'malware', 'registry modification', 'icedid'}",48.0,"['malware', 'execution', 'processes', 'batch', 'registry']"
s301,Disable Defender Spynet Reporting,This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the spynet reporting for its telemetry.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Microsoft\\Windows Defender\\SpyNet*"" Registry.registry_value_name = SpynetReporting Registry.registry_value_data = 0x00000000 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_defender_spynet_reporting_filter`",70,"['T1562.001', 'T1562']","{'registry modification', 'icedid', 'azorult'}",,"['registry', 'defender', 'disable', 'spynet', 'detection']"
s302,Disable Defender Submit Samples Consent Feature,This analytic is to detect a suspicious modification of registry to disable windows defender feature. This technique is to bypassed or evade detection from Windows Defender AV product specially the submit samples feature for further analysis..,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Microsoft\\Windows Defender\\SpyNet*"" Registry.registry_value_name = SubmitSamplesConsent Registry.registry_value_data = 0x00000000 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_defender_submit_samples_consent_feature_filter`",70,"['T1562.001', 'T1562']","{'registry modification', 'icedid', 'azorult'}",,"['registry', 'defender', 'disable', 'detection', 'detect']"
s303,Disable ETW Through Registry,"this search is to identify modification in registry to disable ETW windows feature to evade detections. This technique was seen in several ransomware, RAT and even APT to impaire defenses of the compromise machine and to be able to execute payload with minimal alert as much as possible.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\.NETFramework\\ETWEnabled"" Registry.registry_value_data = ""0x00000000"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_etw_through_registry_filter`",50,"['T1562.001', 'T1562']",{'registry modification'},68.0,"['ransomware', 'disable', 'registry', 'etw', 'windows']"
s304,Disable Logs Using WevtUtil,This search is to detect execution of wevtutil.exe to disable logs. This technique was seen in several ransomware to disable the event logs to evade alerts and detections.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""wevtutil.exe"" Processes.process = ""*sl*"" Processes.process = ""*/e:false*"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disable_logs_using_wevtutil_filter`",30,"['T1070', 'T1070.001']","{'wevtutil', 'exe'}",6.0,"['ransomware', 'wevtutil', 'disable', 'logs', 'exe']"
s305,Disable Registry Tool,"This search identifies modification of registry to disable the regedit or registry tools of the windows operating system. Since registry tool is a swiss knife in analyzing registry, malware such as RAT or trojan Spy disable this application to prevent the removal of their registry entry such as persistence, file less components and defense evasion.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableRegistryTools"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_registry_tool_filter`",40,"['T1562.001', 'T1562']","{'malware', 'registry modification'}",161.0,"['registry', 'regedit', 'malware', 'disable', 'prevent']"
s306,Disable Schedule Task,This analytic is to detect a suspicious commandline to disable existing schedule task. This technique is used by adversaries or commodity malware like IceID to disable security application (AV products) in the targetted host to evade detections. This TTP is a good pivot to check further why and what other process run before and after this detection. check which process execute the commandline and what task is disabled. parent child process is quite valuable in this scenario too.,| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe Processes.process=*/change*  Processes.process=*/disable* by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disable_schedule_task_filter`,70,"['T1562.001', 'T1562']","{'malware', 'schtasks', 'icedid'}",,"['process', 'malware', 'disable', 'task', 'ttp']"
s307,Disable Security Logs Using MiniNt Registry,This analytic is to detect a suspicious registry modification to disable security audit logs. This technique was shared by a researcher to disable Security logs of windows by adding this registry. The Windows will think it is WinPE and will not log any event to the Security Log,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\Control\\MiniNt\\*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_security_logs_using_minint_registry_filter`",80,['T1112'],{'registry modification'},29.0,"['winpe', 'registry', 'audit', 'logs', 'log']"
s308,Disable Show Hidden Files,The following analytic is to identify a modification in the Windows registry to prevent users from seeing all the files with hidden attributes. This event or techniques are known on some worm and trojan spy malware that will drop hidden files on the infected machine.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where (Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden"" OR Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt"" Registry.registry_value_data = ""0x00000001"") OR (Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\ShowSuperHidden"" Registry.registry_value_data = ""0x00000000"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_show_hidden_files_filter`",40,"['T1564.001', 'T1562.001', 'T1564', 'T1562']","{'malware', 'hidden', 'registry modification', 'azorult'}",,"['malware', 'hidden', 'registry', 'files', 'attributes']"
s309,Disable UAC Remote Restriction,This analytic is to detect a suspicious modification of registry to disable UAC remote restriction. This technique was well documented in Microsoft page where attacker may modify this registry value to bypassed UAC feature of windows host. This is a good indicator that some tries to bypassed UAC to suspicious process or gain privilege escalation.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\CurrentVersion\\Policies\\System*"" Registry.registry_value_name=""LocalAccountTokenFilterPolicy"" Registry.registry_value_data=""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_uac_remote_restriction_filter`",80,"['T1548.002', 'T1548']","{'uac', 'registry modification', 'privilege'}",276.0,"['uac', 'registry', 'microsoft', 'disable', 'privilege']"
s310,Disable Windows App Hotkeys,This analytic detects a suspicious registry modification to disable Windows hotkey (shortcut keys) for native Windows applications. This technique is commonly used to disable certain or several Windows applications like `taskmgr.exe` and `cmd.exe`. This technique is used to impair the analyst in analyzing and removing the attacker implant in compromised systems.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\Windows NT\\CurrentVersion\\Image File Execution Options\\*"" AND Registry.registry_value_data= ""HotKey Disabled"" AND Registry.registry_value_name = ""Debugger"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disable_windows_app_hotkeys_filter`",40,"['T1562.001', 'T1562']",{'registry modification'},29.0,"['hotkey', 'registry', 'shortcut', 'taskmgr', 'disable']"
s311,Disable Windows Behavior Monitoring,"This search is to identifies a modification in registry to disable the windows denfender real time behavior monitoring. This event or technique is commonly seen in RAT, bot, or Trojan to disable AV to evade detections.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableBehaviorMonitoring"" OR Registry.registry_path= ""*\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableOnAccessProtection"" OR Registry.registry_path= ""*\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableScanOnRealtimeEnable"" OR Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableRealtimeMonitoring"" OR Registry.registry_path= ""*\\Real-Time Protection\\DisableIntrusionPreventionSystem"" OR Registry.registry_path= ""*\\Real-Time Protection\\DisableIOAVProtection"" OR Registry.registry_path= ""*\\Real-Time Protection\\DisableScriptScanning"" AND Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_windows_behavior_monitoring_filter`",40,"['T1562.001', 'T1562']","{'revil', 'registry modification', 'remcos', 'azorult'}",,"['disable', 'registry', 'trojan', 'av', 'detections']"
s312,Disable Windows SmartScreen Protection,The following search identifies a modification of registry to disable the smartscreen protection of windows machine. This is windows feature provide an early warning system against website that might engage in phishing attack or malware distribution. This modification are seen in RAT malware to cover their tracks upon downloading other of its component or other payload.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\SmartScreenEnabled""  Registry.registry_value_data= ""Off"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disable_windows_smartscreen_protection_filter`",50,"['T1562.001', 'T1562']","{'malware', 'registry modification', 'remcos'}",161.0,"['smartscreen', 'registry', 'disable', 'malware', 'phishing']"
s313,Disabling CMD Application,"this search is to identify modification in registry to disable cmd prompt application. This technique is commonly seen in RAT, Trojan or WORM to prevent triaging or deleting there samples through cmd application which is one of the tool of analyst to traverse on directory and files.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\DisableCMD"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disabling_cmd_application_filter`",50,"['T1562.001', 'T1562']",{'registry modification'},29.0,"['cmd', 'prompt', 'registry', 'disable', 'directory']"
s314,Disabling ControlPanel,"this search is to identify registry modification to disable control panel window. This technique is commonly seen in malware to prevent their artifacts , persistence removed on the infected machine.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\NoControlPanel"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disabling_controlpanel_filter`",50,"['T1562.001', 'T1562']","{'malware', 'registry modification'}",161.0,"['disable', 'malware', 'registry', 'panel', 'window']"
s315,Disabling Defender Services,"This particular behavior is typically executed when an adversaries or malware gains access to an endpoint and beings to perform execution and to evade detections. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\System\\CurrentControlSet\\Services\\*"" AND (Registry.registry_path IN(""*WdBoot*"", ""*WdFilter*"", ""*WdNisDrv*"", ""*WdNisSvc*"",""*WinDefend*"", ""*SecurityHealthService*"")) AND Registry.registry_value_name = Start Registry.registry_value_data = 0x00000004 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `disabling_defender_services_filter`",70,"['T1562.001', 'T1562']","{'malware', 'registry modification', 'icedid'}",48.0,"['malware', 'execution', 'processes', 'batch', 'registry']"
s316,Disabling Firewall with Netsh,This search is to identifies suspicious firewall disabling using netsh application. this technique is commonly seen in malware that tries to communicate or download its component or other payload to its C2 server.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` Processes.process= ""*firewall*"" (Processes.process= ""*off*"" OR  Processes.process= ""*disable*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_firewall_with_netsh_filter`",50,"['T1562.001', 'T1562']","{'malware', 'remcos', 'netsh'}",,"['netsh', 'malware', 'firewall', 'disabling', 'suspicious']"
s317,Disabling FolderOptions Windows Feature,"This search is to identify registry modification to disable folder options feature of windows to show hidden files, file extension and etc. This technique used by malware in combination if disabling show hidden files feature to hide their files and also to hide the file extension to lure the user base on file icons or fake file extensions.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\NoFolderOptions"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disabling_folderoptions_windows_feature_filter`",50,"['T1562.001', 'T1562']","{'malware', 'registry modification'}",161.0,"['malware', 'folder', 'registry', 'files', 'disable']"
s318,Disabling Net User Account,This analytic will identify a suspicious command-line that disables a user account using the `net.exe` utility native to Windows. This technique may used by the adversaries to interrupt availability of such users to do their malicious act.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process=""*user*"" AND Processes.process=""*/active:no*"" by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `disabling_net_user_account_filter`",70,['T1531'],"{'net.exe', 'exe'}",248.0,"['exe', 'malicious', 'disables', 'user', 'users']"
s319,Disabling NoRun Windows App,This search is to identify modification of registry to disable run application in window start menu. this application is known to be a helpful shortcut to windows OS user to run known application and also to execute some reg or batch script. This technique is used malware to make cleaning of its infection more harder by preventing known application run easily through run shortcut.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\NoRun"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disabling_norun_windows_app_filter`",50,"['T1562.001', 'T1562']","{'malware', 'registry modification'}",161.0,"['registry', 'malware', 'disable', 'application', 'shortcut']"
s320,Disabling Remote User Account Control,The search looks for modifications to registry keys that control the enforcement of Windows User Account Control (UAC).,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=*HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA* Registry.registry_value_data=""0x00000000"" by Registry.dest, Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action | `drop_dm_object_name(Registry)` | `disabling_remote_user_account_control_filter`",70,"['T1548.002', 'T1548']","{'uac', 'registry modification', 'remcos', 'azorult'}",,"['registry', 'uac', 'account', 'enforcement', 'control']"
s321,Disabling SystemRestore In Registry,The following search identifies the modification of registry related in disabling the system restore of a machine. This event or behavior are seen in some RAT malware to make the restore of the infected machine  difficult and keep their infection on the box.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\\DisableSR"" OR Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\\DisableConfig"" OR Registry.registry_path= ""*\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\\DisableSR"" OR Registry.registry_path= ""*\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\\DisableConfig"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disabling_systemrestore_in_registry_filter`",70,['T1490'],"{'malware', 'registry modification', 'remcos'}",161.0,"['registry', 'restore', 'disabling', 'malware', 'rat']"
s322,Disabling Task Manager,"This search is to identifies modification of registry to disable the task manager of windows operating system. this event or technique are commonly seen in malware such as RAT, Trojan, TrojanSpy or worm to prevent the user to terminate their process.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableTaskMgr"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `disabling_task_manager_filter`",70,"['T1562.001', 'T1562']","{'malware', 'registry modification'}",161.0,"['registry', 'disable', 'malware', 'operating', 'task']"
s323,DLLHost with no Command Line Arguments with Network,"The following analytic identifies DLLHost.exe with no command line arguments with a network connection. It is unusual for DLLHost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, triage any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. DLLHost.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=dllhost.exe by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(dllhost\.exe.{0,4}$)"" | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time dest parent_process_name process_name process_path process process_id dest_port C2 | `dllhost_with_no_command_line_arguments_with_network_filter`",70,['T1055'],"{'dll', 'exe', 'cobalt strike'}",,"['dllhost', 'exe', 'malicious', 'execute', 'system32']"
s324,DNS Exfiltration Using Nslookup App,"this search is to detect potential DNS exfiltration using nslookup application. This technique are seen in couple of malware and APT group to exfiltrated collected data in a infected machine or infected network. This detection is looking for unique use of nslookup where it tries to use specific record type, TXT, A, AAAA, that are commonly used by attacker and also the retry parameter which is designed to query C2 DNS multiple tries.","| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id values(Processes.parent_process) as parent_process count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""nslookup.exe"" Processes.process = ""*-querytype=*"" OR Processes.process=""*-qt=*"" OR Processes.process=""*-q=*"" OR Processes.process=""-type=*"" OR Processes.process=""*-retry=*"" by Processes.dest Processes.user Processes.process_name  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dns_exfiltration_using_nslookup_app_filter`",90,['T1048'],"{'fin7', 'teardrop', 'sunburst', 'solorigate', 'raindrop', 'dns', 'malware'}",223.0,"['nslookup', 'dns', 'malware', 'search', 'exfiltration']"
s325,Domain Account Discovery with Dsquery,This analytic looks for the execution of `dsquery.exe` with command-line arguments utilized to discover  domain users. The `user` argument returns a list of all users registered in the domain. Red Teams and adversaries alike engage in remote system discovery for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=""dsquery.exe"" AND Processes.process = ""*user*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_account_discovery_with_dsquery_filter`",50,"['T1087.002', 'T1087']",{'dsquery'},,"['dsquery', 'users', 'discover', 'domain', 'discovery']"
s326,Domain Account Discovery With Net App,This analytic looks for the execution of `net.exe` or `net1.exe` with command-line arguments utilized to query for domain users. Red Teams and adversaries alike may use net.exe to enumerate domain users for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process = ""* user*"" AND Processes.process = ""*/do*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_account_discovery_with_net_app_filter`",50,"['T1087.002', 'T1087']","{'net.exe', 'exe'}",163.0,"['exe', 'net', 'net1', 'execution', 'command']"
s327,Domain Account Discovery with Wmic,This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for domain users. Red Teams and adversaries alike use wmic.exe to enumerate domain users for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=""wmic.exe"" AND Processes.process = ""*/NAMESPACE:\\\\root\\directory\\ldap*"" AND Processes.process = ""*ds_user*"" AND Processes.process = ""*GET*"" AND Processes.process = ""*ds_samaccountname*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_account_discovery_with_wmic_filter`",50,"['T1087.002', 'T1087']","{'exe', 'wmi'}",248.0,"['wmic', 'exe', 'command', 'execution', 'users']"
s328,Domain Controller Discovery with Nltest,"This analytic looks for the execution of `nltest.exe` with command-line arguments utilized to discover remote systems. The arguments `/dclist:` and '/dsgetdc:', can be used to return a list of all domain controllers. Red Teams and adversaries alike may use nltest.exe to identify domain controllers in a Windows Domain for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""nltest.exe"") (Processes.process=""*/dclist:*"" OR Processes.process=""*/dsgetdc:*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_controller_discovery_with_nltest_filter`",30,['T1018'],{'nltest'},,"['nltest', 'dclist', 'dsgetdc', 'command', 'controllers']"
s329,Domain Controller Discovery with Wmic,This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to discover remote systems. The arguments utilized in this command line return a list of all domain controllers in a Windows domain. Red Teams and adversaries alike use *.exe to identify remote systems for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""wmic.exe"") (Processes.process="""" OR Processes.process=""*DomainControllerAddress*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_controller_discovery_with_wmic_filter`",30,['T1018'],"{'exe', 'wmi'}",248.0,"['wmic', 'exe', 'command', 'windows', 'controllers']"
s330,Domain Group Discovery with Adsisearcher,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain groups. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain groups for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (Message = ""*[adsisearcher]*"" AND Message = ""*(objectcategory=group)*"" AND Message = ""*findAll()*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `domain_group_discovery_with_adsisearcher_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell'}",227.0,"['powershell', 'groups', 'adsisearcher', 'script', 'domain']"
s331,Domain Group Discovery With Dsquery,"This analytic looks for the execution of `dsquery.exe` with command-line arguments utilized to query for domain groups. The argument `group`, returns a list of all domain groups. Red Teams and adversaries alike use may leverage dsquery.exe to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""dsquery.exe"") (Processes.process=""*group*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_group_discovery_with_dsquery_filter`",30,"['T1069', 'T1069.002']","{'dsquery', 'leverage'}",,"['dsquery', 'groups', 'domain', 'group', 'command']"
s332,Domain Group Discovery With Net,"This analytic looks for the execution of `net.exe` with command-line arguments utilized to query for domain groups. The argument `group /domain`, returns a list of all domain groups. Red Teams and adversaries alike use net.exe to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""net.exe"" OR Processes.process_name=""net1.exe"") (Processes.process=*group* AND Processes.process=*/do*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_group_discovery_with_net_filter`",30,"['T1069', 'T1069.002']","{'net.exe', 'exe'}",163.0,"['exe', 'groups', 'net', 'group', 'domain']"
s333,Domain Group Discovery With Wmic,This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for domain groups. The arguments utilized in this command return a list of all domain groups. Red Teams and adversaries alike use wmic.exe to enumerate domain groups for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""wmic.exe"") (Processes.process=*/NAMESPACE:\\\\root\\directory\\ldap* AND Processes.process=*ds_group* AND Processes.process=""*GET ds_samaccountname*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `domain_group_discovery_with_wmic_filter`",30,"['T1069', 'T1069.002']","{'exe', 'wmi'}",248.0,"['wmic', 'groups', 'exe', 'command', 'domain']"
s334,Download Files Using Telegram,"The following analytic will identify a suspicious download by the Telegram application on a Windows system. This behavior was identified on a honeypot where the adversary gained access, installed Telegram and followed through with downloading different network scanners (port, bruteforcer, masscan) to the system and later used to mapped the whole network and further move laterally.","`sysmon` EventCode= 15 process_name = ""telegram.exe"" TargetFilename = ""*:Zone.Identifier"" |stats count min(_time) as firstTime max(_time) as lastTime by Computer EventCode Image process_id TargetFilename Hash | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `download_files_using_telegram_filter`",70,['T1105'],"{'telegram', 'network'}",302.0,"['telegram', 'downloading', 'honeypot', 'suspicious', 'network']"
s335,Drop IcedID License dat,"This search is to detect dropping a suspicious file named as ""license.dat"" in %appdata%. This behavior seen in latest IcedID malware that contain the actual core bot that will be injected in other process to do banking stealing.","`sysmon` EventCode= 11  TargetFilename = ""*\\license.dat"" AND (TargetFilename=""*\\appdata\\*"" OR TargetFilename=""*\\programdata\\*"") |stats count min(_time) as firstTime max(_time) as lastTime by TargetFilename EventCode process_id  process_name Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_icedid_license_dat_filter`",70,"['T1204', 'T1204.002']","{'malware', 'icedid'}",,"['malware', 'search', 'icedid', 'appdata', 'suspicious']"
s336,DSQuery Domain Discovery,"The following analytic identifies ""dsquery.exe"" execution with arguments looking for `TrustedDomain` query directly on the command-line. This is typically indicative of an Administrator or adversary perform domain trust discovery. Note that this query does not identify any other variations of ""Dsquery.exe"" usage.\
Within this detection, it is assumed `dsquery.exe` is not moved or renamed.\
The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""dsquery.exe"" and its parent process.\
DSQuery.exe is natively found in `C:\Windows\system32` and `C:\Windows\syswow64` and only on Server operating system.\
The following DLL(s) are loaded when DSQuery.exe is launched `dsquery.dll`. If found loaded by another process, it is possible dsquery is running within that process context in memory.\
In addition to trust discovery, review parallel processes for additional behaviors performed. Identify the parent process and capture any files (batch files, for example) being used.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=dsquery.exe Processes.process=*trustedDomain* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dsquery_domain_discovery_filter`,80,['T1482'],{'dsquery'},,"['dsquery', 'processes', 'trusteddomain', 'process', 'execution']"
s337,Dump LSASS via comsvcs DLL,Detect the usage of comsvcs.dll for dumping the lsass process.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*comsvcs.dll* Processes.process=*MiniDump* by Processes.user Processes.process_name Processes.original_file_name Processes.process Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dump_lsass_via_comsvcs_dll_filter`,80,"['T1003.001', 'T1003']","{'dll', 'industroyer2', 'hafnium', 'lsass', 'rundll32'}",,"['lsass', 'dll', 'comsvcs', 'dumping', 'detect']"
s338,Dump LSASS via procdump,"Detect procdump.exe dumping the lsass process. This query looks for both -mm and -ma usage. -mm will produce a mini dump file and -ma will write a dump file with all process memory. Both are highly suspect and should be reviewed. This query does not monitor for the internal name (original_file_name=procdump) of the PE or look for procdump64.exe. Modify the query as needed.\
During triage, confirm this is procdump.exe executing. If it is the first time a Sysinternals utility has been ran, it is possible there will be a -accepteula on the command line. Review other endpoint data sources for cross process (injection) into lsass.exe.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_procdump` (Processes.process=*-ma* OR Processes.process=*-mm*) Processes.process=*lsass* by Processes.user Processes.process_name Processes.process Processes.original_file_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `dump_lsass_via_procdump_filter`,80,"['T1003.001', 'T1003']","{'hafnium', 'lsass'}",,"['procdump64', 'procdump', 'lsass', 'dumping', 'dump']"
s339,Elevated Group Discovery With Net,This analytic looks for the execution of `net.exe` or `net1.exe`  with command-line arguments utilized to query for specific elevated domain groups. Red Teams and adversaries alike use net.exe to enumerate elevated domain groups for situational awareness and Active Directory Discovery to identify high privileged users.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""net.exe"" OR Processes.process_name=""net1.exe"") (Processes.process=""*group*"" AND Processes.process=""*/do*"") (Processes.process=""*Domain Admins*"" OR Processes.process=""*Enterprise Admins*"" OR Processes.process=""*Schema Admins*"" OR Processes.process=""*Account Operators*"" OR Processes.process=""*Server Operators*"" OR Processes.process=""*Protected Users*"" OR Processes.process=""*Dns Admins*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `elevated_group_discovery_with_net_filter`",30,"['T1069', 'T1069.002']","{'net.exe', 'exe', 'privilege'}",163.0,"['exe', 'privileged', 'net', 'elevated', 'net1']"
s340,Elevated Group Discovery with PowerView,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainGroupMember` commandlet. `Get-DomainGroupMember` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. As the name suggests, `Get-DomainGroupMember` is used to list the members of an specific domain group. Red Teams and adversaries alike use PowerView to enumerate elevated domain groups for situational awareness and Active Directory Discovery to identify high privileged users.","`powershell` EventCode=4104 (Message = ""*Get-DomainGroupMember*"") AND Message IN (""*Domain Admins*"",""*Enterprise Admins*"", ""*Schema Admins*"", ""*Account Operators*"" , ""*Server Operators*"", ""*Protected Users*"",  ""*Dns Admins*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `elevated_group_discovery_with_powerview_filter`",30,"['T1069', 'T1069.002']","{'powershell', 'powersploit'}",303.0,"['domaingroupmember', 'powershell', 'groups', 'members', 'group']"
s341,Elevated Group Discovery With Wmic,This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for specific domain groups. Red Teams and adversaries alike use net.exe to enumerate elevated domain groups for situational awareness and Active Directory Discovery to identify high privileged users.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""wmic.exe"") (Processes.process=*/NAMESPACE:\\\\root\\directory\\ldap*) (Processes.process=""*Domain Admins*"" OR Processes.process=""*Enterprise Admins*"" OR Processes.process=""*Schema Admins*"" OR Processes.process=""*Account Operators*"" OR Processes.process=""*Server Operators*"" OR Processes.process=""*Protected Users*"" OR Processes.process=""*Dns Admins*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `elevated_group_discovery_with_wmic_filter`",30,"['T1069', 'T1069.002']","{'net.exe', 'exe', 'privilege', 'wmi'}",248.0,"['wmic', 'exe', 'privileged', 'groups', 'execution']"
s342,Enable RDP In Other Port Number,This search is to detect a modification to registry to enable rdp to a machine with different port number. This technique was seen in some atttacker tries to do lateral movement and remote access to a compromised machine to gain control of it.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=""*HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp*"" Registry.registry_value_name = ""PortNumber"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `enable_rdp_in_other_port_number_filter`",80,['T1021'],"{'casper', 'registry modification', 'rdp'}",91.0,"['rdp', 'port', 'registry', 'remote', 'enable']"
s343,Enable WDigest UseLogonCredential Registry,This analytic is to detect a suspicious registry modification to enable plain text credential feature of windows. This technique was used by several malware and also by mimikatz to be able to dumpe the a plain text credential to the compromised or target host. This TTP is really a good indicator that someone wants to dump the crendential of the host so it must be a good pivot for credential dumping techniques.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\System\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\\*"" Registry.registry_value_name = ""UseLogonCredential"" Registry.registry_value_data = 0x00000001 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `enable_wdigest_uselogoncredential_registry_filter`",80,"['T1112', 'T1003']","{'malware', 'registry modification', 'mimikatz'}",54.0,"['ttp', 'malware', 'registry', 'credential', 'compromised']"
s344,Enumerate Users Local Group Using Telegram,This analytic will detect a suspicious Telegram process enumerating all network users in a local group. This technique was seen in a Monero infected honeypot to mapped all the users on the compromised system. EventCode 4798 is generated when a process enumerates a user's security-enabled local groups on a computer or device.,"`wineventlog_security` EventCode=4798  Process_Name = ""*\\telegram.exe"" | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Process_Name  Process_ID Account_Name Account_Domain Logon_ID Security_ID Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `enumerate_users_local_group_using_telegram_filter`",80,['T1087'],{'telegram'},302.0,"['telegram', 'eventcode', 'compromised', 'detect', 'security']"
s345,Esentutl SAM Copy,"The following analytic identifies the process - `esentutl.exe` - being used to capture credentials stored in ntds.dit or the SAM file on disk. During triage, review parallel processes and determine if legitimate activity. Upon determination of illegitimate activity, take further action to isolate and contain the threat.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_esentutl` Processes.process IN (""*ntds*"", ""*SAM*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `esentutl_sam_copy_filter`",80,"['T1003.002', 'T1003']","{'exe', 'esentutl'}",,"['exe', 'process', 'esentutl', 'processes', 'ntds']"
s346,ETW Registry Disabled,This analytic is to detect a registry modification to disable ETW feature of windows. This technique is to evade EDR appliance to evade detections and hide its execution from audit logs.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\SOFTWARE\\Microsoft\\.NETFramework*"" Registry.registry_value_name = ETWEnabled Registry.registry_value_data=0x00000000 by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `etw_registry_disabled_filter`",90,"['T1562.006', 'T1127', 'T1562']","{'wiper', 'registry modification'}",,"['etw', 'registry', 'edr', 'disable', 'detect']"
s347,Eventvwr UAC Bypass,"The following search identifies Eventvwr bypass by identifying the registry modification into a specific path that eventvwr.msc looks to (but is not valid) upon execution. A successful attack will include a suspicious command to be executed upon eventvwr.msc loading. Upon triage, review the parallel processes that have executed. Identify any additional registry modifications on the endpoint that may look suspicious. Remediate as necessary.","| tstats `security_content_summariesonly` count values(Registry.registry_key_name) as registry_key_name values(Registry.registry_path) as registry_path min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where  Registry.registry_path=""*mscfile\\shell\\open\\command\\*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `eventvwr_uac_bypass_filter`",80,"['T1548.002', 'T1548']","{'icedid', 'lazyscripter', 'registry modification', 'empire'}",,"['eventvwr', 'registry', 'bypass', 'msc', 'attack']"
s348,Excel Spawning PowerShell,"The following detection identifies Microsoft Excel spawning PowerShell. Typically, this is not common behavior and not default with Excel.exe. Excel.exe will generally be found in the following path `C:\Program Files\Microsoft Office\root\Office16` (version will vary). PowerShell spawning from Excel.exe is common for a spearphishing attachment and is actively used. Albeit, the command executed will most likely be encoded and captured via another detection. During triage, review parallel processes and identify any files that may have been written.","| tstats `security_content_summariesonly` count values(Processes.process) min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=""excel.exe"" `process_powershell` by Processes.parent_process Processes.process_name Processes.user Processes.dest Processes.original_file_name | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `excel_spawning_powershell_filter`",80,"['T1003.002', 'T1003']","{'microsoft office', 'exe', 'powershell'}",5.0,"['powershell', 'office16', 'exe', 'office', 'excel']"
s349,Excel Spawning Windows Script Host,"The following detection identifies Microsoft Excel spawning Windows Script Host - `cscript.exe` or `wscript.exe`. Typically, this is not common behavior and not default with Excel.exe. Excel.exe will generally be found in the following path `C:\Program Files\Microsoft Office\root\Office16` (version will vary). `cscript.exe` or `wscript.exe` default location is `c:\windows\system32\` or c:windows\syswow64`. `cscript.exe` or `wscript.exe` spawning from Excel.exe is common for a spearphishing attachment and is actively used. Albeit, the command-line executed will most likely be obfuscated and captured via another detection. During triage, review parallel processes and identify any files that may have been written. Review the reputation of the remote destination and block accordingly.","| tstats `security_content_summariesonly` count values(Processes.process) min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=""excel.exe"" Processes.process_name IN (""cscript.exe"", ""wscript.exe"")  by Processes.parent_process Processes.process_name Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `excel_spawning_windows_script_host_filter`",80,"['T1003.002', 'T1003']",{'exe'},34.0,"['cscript', 'wscript', 'exe', 'script', 'excel']"
s350,Excessive Attempt To Disable Services,This analytic will identify suspicious series of command-line to disable several services. This technique is seen where the adversary attempts to disable security app services or other malware services to complete the objective on the compromised system.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where   Processes.process_name = ""sc.exe"" AND Processes.process=""*config*"" OR Processes.process=""*Disabled*"" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user _time span=1m | where count >=4 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_attempt_to_disable_services_filter`",80,['T1489'],"{'malware', 'azorult'}",,"['malware', 'compromised', 'security', 'disable', 'adversary']"
s351,Excessive distinct processes from Windows Temp,This analytic will identify suspicious series of process executions.  We have observed that post exploit framework tools like Koadic and Meterpreter will launch an excessive number of processes with distinct file paths from Windows\Temp to execute actions on objective.  This behavior is extremely anomalous compared to typical application behaviors that use Windows\Temp.,"| tstats `security_content_summariesonly` values(Processes.process) as process distinct_count(Processes.process) as distinct_process_count  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_path = ""*\\Windows\\Temp\\*"" by Processes.dest Processes.user  _time span=20m | where distinct_process_count > 37 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_distinct_processes_from_windows_temp_filter`",80,['T1059'],"{'meterpreter', 'koadic'}",,"['processes', 'exploit', 'executions', 'process', 'application']"
s352,Excessive File Deletion In WinDefender Folder,This analytic will identify excessive file deletion events in the Windows Defender folder. This technique was seen in the WhisperGate malware campaign in which adversaries abused Nirsofts advancedrun.exe to gain administrative privilege to then execute PowerShell commands to delete files within the Windows Defender application folder. This behavior is a good indicator the offending process is trying to corrupt a Windows Defender installation.,"`sysmon` EventCode=23 TargetFilename = ""*\\ProgramData\\Microsoft\\Windows Defender*"" | stats values(TargetFilename) as deleted_files min(_time) as firstTime max(_time) as lastTime count by user EventCode Image ProcessID Computer |where count >=50 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_file_deletion_in_windefender_folder_filter`",50,['T1485'],"{'malware', 'powershell', 'whispergate'}",,"['malware', 'defender', 'deletion', 'process', 'behavior']"
s353,Excessive number of service control start as disabled,"This detection targets behaviors observed when threat actors have used sc.exe to modify services. We observed malware in a honey pot spawning numerous sc.exe processes in a short period of time, presumably to impair defenses, possibly to block others from compromising the same machine.  This detection will alert when we see both an excessive number of sc.exe processes launched with specific commandline arguments to disable the start of certain services.","| tstats `security_content_summariesonly` distinct_count(Processes.process) as distinct_cmdlines values(Processes.process_id) as process_ids min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_name = ""sc.exe"" AND Processes.process=""*start= disabled*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.parent_process_id, _time span=30m | where distinct_cmdlines >= 8 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_number_of_service_control_start_as_disabled_filter`",80,"['T1562.001', 'T1562']","{'malware', 'exe'}",48.0,"['malware', 'processes', 'exe', 'sc', 'services']"
s354,Excessive number of taskhost processes,"This detection targets behaviors observed in post exploit kits like Meterpreter and Koadic that are run in memory.  We have observed that these tools must invoke an excessive number of taskhost.exe and taskhostex.exe processes to complete various actions (discovery, lateral movement, etc.).  It is extremely uncommon in the course of normal operations to see so many distinct taskhost and taskhostex processes running concurrently in a short time frame.","| tstats `security_content_summariesonly` values(Processes.process_id) as process_ids  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_name = ""taskhost.exe"" OR Processes.process_name = ""taskhostex.exe"" BY Processes.dest Processes.process_name _time span=1h | `drop_dm_object_name(Processes)` | eval pid_count=mvcount(process_ids) | eval taskhost_count_=if(process_name == ""taskhost.exe"", pid_count, 0) | eval taskhostex_count_=if(process_name == ""taskhostex.exe"", pid_count, 0) | stats sum(taskhost_count_) as taskhost_count, sum(taskhostex_count_) as taskhostex_count by _time, dest, firstTime, lastTime | where taskhost_count > 10 and taskhostex_count > 10 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_number_of_taskhost_processes_filter`",80,['T1059'],"{'meterpreter', 'exe', 'koadic'}",,"['taskhostex', 'taskhost', 'processes', 'exploit', 'exe']"
s355,Excessive Service Stop Attempt,This analytic identifies suspicious series of attempt to kill multiple services on a system using either `net.exe` or `sc.exe`. This technique is use by adversaries to terminate security services or other related services to continue there objective and evade detections.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where `process_net` OR  Processes.process_name = ""sc.exe"" OR  Processes.process_name = ""net1.exe"" AND Processes.process=""*stop*"" OR Processes.process=""*delete*"" by Processes.process_name Processes.original_file_name Processes.parent_process_name Processes.dest Processes.user _time span=1m | where count >=5 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_service_stop_attempt_filter`",80,['T1489'],"{'net.exe', 'exe', 'stop'}",163.0,"['exe', 'security', 'services', 'terminate', 'net']"
s356,Excessive Usage Of Cacls App,"The following analytic identifies excessive usage of `cacls.exe`, `xcacls.exe` or `icacls.exe` application to change file or folder permission. This behavior is commonly seen where the adversary attempts to impair some users from deleting or accessing its malware components or artifact from the compromised system.","| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id  values(Processes.process_name) as process_name count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where Processes.process_name = ""cacls.exe"" OR Processes.process_name = ""icacls.exe"" OR Processes.process_name = ""XCACLS.exe"" by Processes.parent_process_name Processes.parent_process Processes.dest Processes.user _time span=1m | where count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_cacls_app_filter`",80,['T1222'],"{'malware', 'permission', 'cacls', 'azorult'}",,"['xcacls', 'cacls', 'malware', 'icacls', 'permission']"
s357,Excessive Usage Of Net App,"This analytic identifies excessive usage of `net.exe` or `net1.exe` within a bucket of time (1 minute). This behavior was seen in a Monero incident where the adversary attempts to create many users, delete and disable users as part of its malicious behavior.",| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where `process_net` by Processes.process_name Processes.parent_process_name Processes.original_file_name Processes.dest Processes.user _time span=1m | where count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_net_app_filter`,40,['T1531'],"{'net.exe', 'exe', 'azorult'}",,"['exe', 'net1', 'net', 'malicious', 'monero']"
s358,Excessive Usage of NSLOOKUP App,"This search is to detect potential DNS exfiltration using nslookup application. This technique are seen in couple of malware and APT group to exfiltrated collected data in a infected machine or infected network. This detection is looking for unique use of nslookup where it tries to use specific record type (TXT, A, AAAA) that are commonly used by attacker and also the retry parameter which is designed to query C2 DNS multiple tries.","`sysmon` EventCode = 1 process_name = ""nslookup.exe"" | bucket _time span=1m | stats count as numNsLookup by Computer, _time | eventstats avg(numNsLookup) as avgNsLookup, stdev(numNsLookup) as stdNsLookup, count as numSlots by Computer | eval upperThreshold=(avgNsLookup + stdNsLookup *3) | eval isOutlier=if(numNsLookup > 20 and numNsLookup >= upperThreshold, 1, 0) | search isOutlier=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_nslookup_app_filter`",40,['T1048'],"{'fin7', 'teardrop', 'sunburst', 'solorigate', 'raindrop', 'dns', 'malware'}",223.0,"['nslookup', 'dns', 'malware', 'search', 'exfiltration']"
s359,Excessive Usage Of SC Service Utility,"This search is to detect a suspicious excessive usage of sc.exe in a host machine. This technique was seen in several ransomware , xmrig and other malware to create, modify, delete or disable a service may related to security application or to gain privilege escalation.","`sysmon` EventCode = 1 process_name = ""sc.exe"" |  bucket _time span=15m | stats values(process) as process count as numScExe by Computer, _time |  eventstats avg(numScExe) as avgScExe, stdev(numScExe) as stdScExe, count as numSlots by Computer |  eval upperThreshold=(avgScExe + stdScExe *3) |  eval isOutlier=if(avgScExe > 5 and avgScExe >= upperThreshold, 1, 0) |  search isOutlier=1 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_sc_service_utility_filter`",50,"['T1569', 'T1569.002']","{'malware', 'exe', 'azorult'}",,"['malware', 'ransomware', 'exe', 'sc', 'search']"
s360,Excessive Usage Of Taskkill,This analytic identifies excessive usage of `taskkill.exe` application. This application is commonly used by adversaries to evade detections by killing security product processes or even other processes to evade detection.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""taskkill.exe""  by Processes.parent_process_name Processes.process_name Processes.dest Processes.user _time span=1m | where count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `excessive_usage_of_taskkill_filter`",40,"['T1562.001', 'T1562']","{'exe', 'azorult'}",,"['taskkill', 'exe', 'application', 'processes', 'killing']"
s361,Executables Or Script Creation In Suspicious Path,This analytic will identify suspicious executable or scripts (known file extensions) in list of suspicious file path in Windows. This technique is used by adversaries to evade detection. The suspicious file path are known paths used in the wild and are not common to have executable or scripts.,|tstats `security_content_summariesonly` values(Filesystem.file_path) as file_path count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where (Filesystem.file_name = *.exe OR Filesystem.file_name = *.dll OR Filesystem.file_name = *.sys OR Filesystem.file_name = *.com OR Filesystem.file_name = *.vbs OR Filesystem.file_name = *.vbe OR Filesystem.file_name = *.js OR Filesystem.file_name = *.ps1 OR Filesystem.file_name = *.bat OR Filesystem.file_name = *.cmd OR Filesystem.file_name = *.pif) AND ( Filesystem.file_path = *\\windows\\fonts\\* OR Filesystem.file_path = *\\windows\\temp\\* OR Filesystem.file_path = *\\users\\public\\* OR Filesystem.file_path = *\\windows\\debug\\* OR Filesystem.file_path = *\\Users\\Administrator\\Music\\* OR Filesystem.file_path = *\\Windows\\servicing\\* OR Filesystem.file_path = *\\Users\\Default\\* OR Filesystem.file_path = *Recycle.bin* OR Filesystem.file_path = *\\Windows\\Media\\* OR Filesystem.file_path = *\\Windows\\repair\\* OR Filesystem.file_path = *\\AppData\\Local\\Temp* OR Filesystem.file_path = *\\PerfLogs\\*) by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.user | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `executables_or_script_creation_in_suspicious_path_filter`,80,['T1036'],"{'industroyer2', 'whispergate', 'azorult', 'wiper', 'ps1', 'remcos'}",,"['executable', 'file', 'scripts', 'suspicious', 'analytic']"
s362,Executable File Written in Administrative SMB Share,"The following analytic identifies executable files (.exe or .dll) being written to Windows administrative SMB shares (Admin$, IPC$, C$). This represents suspicious behavior as its commonly used by tools like like PsExec/PaExec and others to stage service binaries before creating and starting a Windows service on remote endpoints. Red Teams and adversaries alike may abuse administrative shares for lateral movement and remote code execution. The Trickbot malware family also implements this behavior to try to infect other machines in the infected network.","`wineventlog_security` EventCode=5145 Relative_Target_Name IN (""*.exe"",""*.dll"") Object_Type=File Share_Name IN (""\\\\*\\C$"",""\\\\*\\IPC$"",""\\\\*\\admin$"") Access_Mask= ""0x2"" | stats min(_time) as firstTime max(_time) as lastTime count by EventCode Share_Name Relative_Target_Name Object_Type Access_Mask user src_port Source_Address | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `executable_file_written_in_administrative_smb_share_filter`",70,"['T1021', 'T1021.002']","{'dll', 'industroyer2', 'exe', 'wiper', 'psexec', 'malware', 'trickbot', 'ryuk'}",,"['malware', 'executable', 'exe', 'psexec', 'dll']"
s363,Execute Javascript With Jscript COM CLSID,This analytic will identify suspicious process of cscript.exe where it tries to execute javascript using jscript.encode CLSID (COM OBJ). This technique was seen in ransomware (reddot ransomware) where it execute javascript with this com object with combination of amsi disabling technique.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""cscript.exe"" Processes.process=""*-e:{F414C262-6AC0-11CF-B6D1-00AA00BBBB58}*"" by Processes.parent_process_name Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `execute_javascript_with_jscript_com_clsid_filter`",80,"['T1059', 'T1059.005']",,304.0,"['cscript', 'jscript', 'ransomware', 'javascript', 'clsid']"
s364,Execution of File with Multiple Extensions,"This search looks for processes launched from files that have double extensions in the file name. This is typically done to obscure the ""real"" file extension and make it appear as though the file being accessed is a data file, as opposed to executable content.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = *.doc.exe OR Processes.process = *.htm.exe OR Processes.process = *.html.exe OR Processes.process = *.txt.exe OR Processes.process = *.pdf.exe OR Processes.process = *.doc.exe by Processes.dest Processes.user Processes.process Processes.parent_process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | `execution_of_file_with_multiple_extensions_filter`,80,"['T1036', 'T1036.003']",,242.0,"['executable', 'file', 'processes', 'files', 'search']"
s365,Extraction of Registry Hives,"The following analytic identifies the use of `reg.exe` exporting Windows Registry hives containing credentials. Adversaries may use this technique to export registry hives for offline credential access attacks. Typically found executed from a untrusted process or script. Upon execution, a file will be written to disk.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_reg` (Processes.process=*save* OR Processes.process=*export*) AND (Processes.process=""*\sam *"" OR Processes.process=""*\system *"" OR Processes.process=""*\security *"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `extraction_of_registry_hives_filter`",80,"['T1003.002', 'T1003']","{'exe', 'registry modification', 'darkside'}",,"['registry', 'exe', 'exporting', 'export', 'credentials']"
s366,File with Samsam Extension,The search looks for file writes with extensions consistent with a SamSam ransomware attack.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem by Filesystem.file_name | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)`| rex field=file_name ""(?<file_extension>\.[^\.]+)$"" | search file_extension=.stubbin OR file_extension=.berkshire OR file_extension=.satoshi OR file_extension=.sophos OR file_extension=.keyxml | `file_with_samsam_extension_filter`",100,,"{'rex', 'samsam'}",,"['ransomware', 'file', 'samsam', 'search', 'extensions']"
s367,Firewall Allowed Program Enable,This analytic detects a potential suspicious modification of firewall rule allowing to execute specific application. This technique was identified when an adversary and red teams to bypassed firewall file execution restriction in a targetted host. Take note that this event or command can run by administrator during testing or allowing legitimate tool or application.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*firewall*"" Processes.process = ""*allow*"" Processes.process = ""*add*"" Processes.process = ""*ENABLE*"" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `firewall_allowed_program_enable_filter`",50,"['T1562.004', 'T1562']",{'azorult'},,"['firewall', 'analytic', 'application', 'execution', 'suspicious']"
s368,FodHelper UAC Bypass,"Fodhelper.exe has a known UAC bypass as it attempts to look for specific registry keys upon execution, that do not exist. Therefore, an attacker can write its malicious commands in these registry keys to be executed by fodhelper.exe with the highest privilege. \
1. `HKCU:\Software\Classes\ms-settings\shell\open\command`\
1. `HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute`\
1. `HKCU:\Software\Classes\ms-settings\shell\open\command\(default)`\
Upon triage, fodhelper.exe will have a child process and read access will occur on the registry keys. Isolate the endpoint and review parallel processes for additional behavior.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=fodhelper.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `fodhelper_uac_bypass_filter`,90,"['T1112', 'T1548.002', 'T1548']","{'registry modification', 'lazyscripter', 'exe', 'empire', 'icedid', 'uac', 'ps1'}",,"['fodhelper', 'exe', 'registry', 'uac', 'delegateexecute']"
s369,Fsutil Zeroing File,This search is to detect a suspicious fsutil process to zeroing a target file. This technique was seen in lockbit ransomware where it tries to zero out its malware path as part of its defense evasion after encrypting the compromised host.,"| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe Processes.process=""*setzerodata*"" by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  Processes.process Processes.parent_process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `fsutil_zeroing_file_filter`",60,['T1070'],"{'malware', 'lockbit'}",115.0,"['ransomware', 'malware', 'search', 'compromised', 'fsutil']"
s370,GetAdComputer with PowerShell,This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. The `Get-AdComputer' commandlet returns a list of all domain computers. Red Teams and adversaries alike may use this commandlet to identify remote systems for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-AdComputer*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getadcomputer_with_powershell_filter`",30,['T1018'],{'powershell'},306.0,"['powershell', 'adcomputer', 'command', 'commandlet', 'computers']"
s371,GetAdComputer with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-AdGroup` commandlet. The `Get-AdGroup` commandlet is used to return a list of all domain computers. Red Teams and adversaries may leverage this commandlet to enumerate domain computers for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText = ""*Get-AdComputer*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getadcomputer_with_powershell_script_block_filter`",30,['T1018'],"{'leverage', 'powershell'}",227.0,"['adgroup', 'powershell', 'commandlet', 'script', 'logging']"
s372,GetAdGroup with PowerShell,This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain groups. The `Get-AdGroup` commandlnet is used to return a list of all groups available in a Windows Domain. Red Teams and adversaries alike may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-AdGroup*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getadgroup_with_powershell_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell'}",303.0,"['powershell', 'adgroup', 'groups', 'command', 'domain']"
s373,GetAdGroup with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-AdGroup` commandlet. The `Get-AdGroup` commandlet is used to return a list of all domain groups. Red Teams and adversaries may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText = ""*Get-ADGroup*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getadgroup_with_powershell_script_block_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell'}",227.0,"['adgroup', 'powershell', 'groups', 'commandlet', 'script']"
s374,GetCurrent User with PowerShell,This analytic looks for the execution of `powerhsell.exe` with command-line arguments that execute the `GetCurrent` method of the WindowsIdentity .NET class. This method returns an object that represents the current Windows user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*System.Security.Principal.WindowsIdentity* OR Processes.process=*GetCurrent()*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getcurrent_user_with_powershell_filter`",30,['T1033'],"{'leverage', 'exe', 'powershell'}",305.0,"['windowsidentity', 'powerhsell', 'exe', 'compromised', 'getcurrent']"
s375,GetCurrent User with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `GetCurrent` method of the WindowsIdentity .NET class. This method returns an object that represents the current Windows user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText = ""*[System.Security.Principal.WindowsIdentity]*""  ScriptBlockText = ""*GetCurrent()*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getcurrent_user_with_powershell_script_block_filter`",30,['T1033'],"{'leverage', 'powershell'}",305.0,"['windowsidentity', 'logging', 'powershell', 'logged', 'getcurrent']"
s376,GetDomainComputer with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. `Get-DomainComputer` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-DomainComputer*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getdomaincomputer_with_powershell_filter`",30,['T1018'],"{'leverage', 'powershell'}",306.0,"['powershell', 'domaincomputer', 'command', 'domains', 'domain']"
s377,GetDomainComputer with PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainComputer` commandlet. `GetDomainComputer` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may use PowerView to enumerate domain computers for situational awareness and Active Directory Discovery.","`powershell` EventCode=4104 (ScriptBlockText = ""*Get-DomainComputer*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getdomaincomputer_with_powershell_script_block_filter`",30,['T1018'],"{'powershell', 'powersploit'}",227.0,"['getdomaincomputer', 'domaincomputer', 'powershell', 'script', 'logging']"
s378,GetDomainController with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. `Get-DomainController` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-DomainController*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getdomaincontroller_with_powershell_filter`",30,['T1018'],"{'leverage', 'powershell', 'powersploit'}",306.0,"['powershell', 'domaincontroller', 'command', 'domains', 'domain']"
s379,GetDomainController with PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainController` commandlet. `Get-DomainController` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may use PowerView to enumerate domain computers for situational awareness and Active Directory Discovery.","`powershell` EventCode=4104 (ScriptBlockText = ""*Get-DomainController*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getdomaincontroller_with_powershell_script_block_filter`",30,['T1018'],"{'powershell', 'powersploit'}",227.0,"['powershell', 'domaincontroller', 'script', 'logging', 'commandlet']"
s380,GetDomainGroup with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain groups. `Get-DomainGroup` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-DomainGroup*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getdomaingroup_with_powershell_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell', 'powersploit'}",306.0,"['powershell', 'domaingroup', 'domains', 'groups', 'domain']"
s381,GetDomainGroup with PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainGroup` commandlet. `Get-DomainGroup` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. As the name suggests, `Get-DomainGroup` is used to query domain groups. Red Teams and adversaries may leverage this function to enumerate domain groups for situational awareness and Active Directory Discovery.","`powershell` EventCode=4104 (ScriptBlockText = ""*Get-DomainGroup*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getdomaingroup_with_powershell_script_block_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell', 'powersploit'}",306.0,"['domaingroup', 'powershell', 'groups', 'domain', 'commandlet']"
s382,GetLocalUser with PowerShell,This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for local users. The `Get-LocalUser` commandlet is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-LocalUser*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getlocaluser_with_powershell_filter`",30,"['T1087', 'T1087.001']","{'leverage', 'exe', 'powershell'}",306.0,"['powershell', 'localuser', 'users', 'command', 'exe']"
s383,GetLocalUser with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-LocalUser` commandlet. The `Get-LocalUser` commandlet is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText = ""*Get-LocalUser*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getlocaluser_with_powershell_script_block_filter`",30,"['T1087', 'T1087.001', 'T1059.001']","{'leverage', 'powershell'}",307.0,"['localuser', 'powershell', 'logging', 'users', 'commandlet']"
s384,GetNetTcpconnection with PowerShell,This analytic looks for the execution of `powershell.exe` with command-line utilized to get a listing of network connections on a compromised system. The `Get-NetTcpConnection` commandlet lists the current TCP connections. Red Teams and adversaries alike may use this commandlet for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-NetTcpConnection*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getnettcpconnection_with_powershell_filter`",30,['T1049'],{'powershell'},5.0,"['powershell', 'nettcpconnection', 'connections', 'tcp', 'compromised']"
s385,GetNetTcpconnection with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-NetTcpconnection ` commandlet. This commandlet is used to return a listing of network connections on a compromised system. Red Teams and adversaries alike may use this commandlet for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText = ""*Get-NetTcpconnection*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getnettcpconnection_with_powershell_script_block_filter`",30,['T1049'],{'powershell'},307.0,"['nettcpconnection', 'powershell', 'logging', 'connections', 'commandlet']"
s386,GetWmiObject Ds Computer with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to discover remote systems. The `Get-WmiObject` commandlet combined with the `DS_Computer` parameter can be used to return a list of all domain computers. Red Teams and adversaries alike may leverage WMI in this case, using PowerShell, to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-WmiObject* AND Processes.process=""*namespace root\\directory\\ldap*"" AND Processes.process=""*class ds_computer*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_computer_with_powershell_filter`",30,['T1018'],"{'leverage', 'powershell', 'wmi'}",306.0,"['powershell', 'ds_computer', 'discovery', 'discover', 'command']"
s387,GetWmiObject Ds Computer with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet. The `DS_Computer` class parameter leverages WMI to query for all domain computers. Red Teams and adversaries may leverage this commandlet to enumerate domain computers for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText=*Get-WmiObject* AND ScriptBlockText=""*namespace root\\directory\\ldap*"" AND ScriptBlockText=""*class ds_computer*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getwmiobject_ds_computer_with_powershell_script_block_filter`",30,['T1018'],"{'leverage', 'powershell', 'wmi'}",307.0,"['wmiobject', 'wmi', 'powershell', 'ds_computer', 'logging']"
s388,GetWmiObject Ds Group with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain groups. The `Get-WmiObject` commandlet combined with the `-class ds_group` parameter can be used to return the full list of groups in a Windows domain. Red Teams and adversaries alike may leverage WMI in this case, using PowerShell, to enumerate domain groups for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-WmiObject* AND Processes.process=""*namespace root\\directory\\ldap*"" AND Processes.process=""*class ds_group*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_group_with_powershell_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell', 'wmi'}",306.0,"['powershell', 'groups', 'ds_group', 'command', 'teams']"
s389,GetWmiObject Ds Group with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet used with specific parameters . The `DS_Group` parameter leverages WMI to query for all domain groups. Red Teams and adversaries may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText=*Get-WmiObject* AND ScriptBlockText=""*namespace root\\directory\\ldap*"" AND ScriptBlockText=""*class ds_group*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `getwmiobject_ds_group_with_powershell_script_block_filter`",30,"['T1069', 'T1069.002']","{'leverage', 'powershell', 'wmi'}",307.0,"['powershell', 'ds_group', 'wmiobject', 'wmi', 'groups']"
s390,GetWmiObject DS User with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query for domain users. The `Get-WmiObject` commandlet combined with the `-class ds_user` parameter can be used to return the full list of users in a Windows domain. Red Teams and adversaries alike may leverage WMI in this case, using PowerShell, to enumerate domain users for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""cmd.exe"" OR Processes.process_name=""powershell*"") AND Processes.process = ""*get-wmiobject*"" AND Processes.process = ""*ds_user*"" AND Processes.process = ""*root\\directory\\ldap*"" AND Processes.process = ""*-namespace*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_user_with_powershell_filter`",50,"['T1087.002', 'T1087']","{'dsquery', 'powershell', 'leverage', 'wmi'}",,"['powershell', 'ds_user', 'users', 'command', 'wmiobject']"
s391,GetWmiObject DS User with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet. The `DS_User` class parameter leverages WMI to query for all domain users. Red Teams and adversaries may leverage this commandlet to enumerate domain users for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText = ""*get-wmiobject*"" ScriptBlockText = ""*ds_user*"" ScriptBlockText = ""*-namespace*"" ScriptBlockText = ""*root\\directory\\ldap*"" | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_ds_user_with_powershell_script_block_filter`",50,"['T1087.002', 'T1087']","{'leverage', 'powershell', 'wmi'}",307.0,"['wmiobject', 'wmi', 'powershell', 'ds_user', 'logging']"
s392,GetWmiObject User Account with PowerShell,This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to query local users. The `Get-WmiObject` commandlet combined with the `Win32_UserAccount` parameter is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=*Get-WmiObject* AND Processes.process=*Win32_UserAccount*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `getwmiobject_user_account_with_powershell_filter`",30,"['T1087', 'T1087.001']","{'leverage', 'powershell'}",306.0,"['powershell', 'win32_useraccount', 'users', 'wmiobject', 'command']"
s393,GetWmiObject User Account with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-WmiObject` commandlet used with specific parameters. The `Win32_UserAccount` parameter is used to return a list of all local users. Red Teams and adversaries may leverage this commandlet to enumerate users for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText=""*Get-WmiObject*"" AND ScriptBlockText=""*Win32_UserAccount*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `getwmiobject_user_account_with_powershell_script_block_filter`",30,"['T1087', 'T1087.001', 'T1059.001']","{'leverage', 'powershell'}",307.0,"['win32_useraccount', 'powershell', 'wmiobject', 'logging', 'users']"
s394,Get ADDefaultDomainPasswordPolicy with Powershell,This analytic looks for the execution of `powershell.exe` executing the Get-ADDefaultDomainPasswordPolicy commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""cmd.exe"" OR Processes.process_name=""powershell*"") AND Processes.process = ""*Get-ADDefaultDomainPasswordPolicy*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_addefaultdomainpasswordpolicy_with_powershell_filter`",30,['T1201'],"{'powershell', 'rdp', 'rundll32', 'password'}",306.0,"['powershell', 'addefaultdomainpasswordpolicy', 'password', 'policies', 'domain']"
s395,Get ADDefaultDomainPasswordPolicy with Powershell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-ADDefaultDomainPasswordPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText =""*Get-ADDefaultDomainPasswordPolicy*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_addefaultdomainpasswordpolicy_with_powershell_script_block_filter`",30,['T1201'],"{'powershell', 'rdp', 'password'}",227.0,"['powershell', 'addefaultdomainpasswordpolicy', 'password', 'policies', 'script']"
s396,Get ADUserResultantPasswordPolicy with Powershell,This analytic looks for the execution of `powershell.exe` executing the Get ADUserResultantPasswordPolicy commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""cmd.exe"" OR Processes.process_name=""powershell*"") AND Processes.process = ""*Get-ADUserResultantPasswordPolicy*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduserresultantpasswordpolicy_with_powershell_filter`",50,['T1201'],"{'powershell', 'rdp', 'rundll32', 'password'}",306.0,"['aduserresultantpasswordpolicy', 'powershell', 'password', 'policies', 'domain']"
s397,Get ADUserResultantPasswordPolicy with Powershell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-ADUserResultantPasswordPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText=""*Get-ADUserResultantPasswordPolicy*"" | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduserresultantpasswordpolicy_with_powershell_script_block_filter`",30,['T1201'],"{'powershell', 'rdp', 'password'}",227.0,"['aduserresultantpasswordpolicy', 'powershell', 'password', 'script', 'logging']"
s398,Get ADUser with PowerShell,This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to enumerate domain users. The `Get-AdUser' commandlet returns a list of all domain users. Red Teams and adversaries alike may use this commandlet to identify remote systems for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""cmd.exe"" OR Processes.process_name=""powershell*"") AND Processes.process = ""*Get-ADUser*"" AND Processes.process = ""*-filter*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduser_with_powershell_filter`",50,"['T1087.002', 'T1087']",{'powershell'},306.0,"['powershell', 'aduser', 'command', 'users', 'domain']"
s399,Get ADUser with PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-AdGUser` commandlet. The `Get-AdUser` commandlet is used to return a list of all domain users. Red Teams and adversaries may leverage this commandlet to enumerate domain groups for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 Message = ""*get-aduser*"" Message = ""*-filter*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_aduser_with_powershell_script_block_filter`",50,"['T1087.002', 'T1087']","{'leverage', 'powershell'}",307.0,"['aduser', 'powershell', 'logging', 'adguser', 'script']"
s400,Get DomainPolicy with Powershell,This analytic looks for the execution of `powershell.exe` executing the `Get-DomainPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""cmd.exe"" OR Processes.process_name=""powershell*"") AND Processes.process = ""*Get-DomainPolicy*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainpolicy_with_powershell_filter`",50,['T1201'],"{'powershell', 'powersploit', 'rundll32', 'password'}",306.0,"['powershell', 'policies', 'password', 'domain', 'domainpolicy']"
s401,Get DomainPolicy with Powershell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get DomainPolicy` commandlet used to obtain the password policy in a Windows domain. Red Teams and adversaries alike may use PowerShell to enumerate domain policies for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText =""*Get-DomainPolicy*"" | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainpolicy_with_powershell_script_block_filter`",50,['T1201'],"{'powershell', 'powersploit'}",306.0,"['powershell', 'script', 'policies', 'domain', 'domainpolicy']"
s402,Get-DomainTrust with PowerShell,"This analytic identifies Get-DomainTrust from PowerView in order to gather domain trust information. Typically, this is utilized within a script being executed and used to enumerate the domain trust information. This grants the adversary an understanding of how large or small the domain is. During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=*get-domaintrust* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domaintrust_with_powershell_filter`,30,['T1482'],{'powershell'},308.0,"['domaintrust', 'powerview', 'trust', 'edr', 'domain']"
s403,Get-DomainTrust with PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies Get-DomainTrust from PowerView in order to gather domain trust information. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText = ""*get-domaintrust*"" | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domaintrust_with_powershell_script_block_filter`",30,['T1482'],{'powershell'},307.0,"['powershell', 'domaintrust', 'logs', 'suspicious', 'logging']"
s404,Get DomainUser with PowerShell,"This analytic looks for the execution of `powershell.exe` with command-line arguments utilized to enumerate domain users. `Get-DomainUser` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may leverage PowerView to enumerate domain users for situational awareness and Active Directory Discovery.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""cmd.exe"" OR Processes.process_name=""powershell*"") AND Processes.process = ""*Get-DomainUser*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainuser_with_powershell_filter`",50,"['T1087.002', 'T1087']","{'leverage', 'powershell', 'powersploit'}",301.0,"['powershell', 'domainuser', 'command', 'domains', 'users']"
s405,Get DomainUser with PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainUser` commandlet. `GetDomainUser` is part of PowerView, a PowerShell tool used to perform enumeration on Windows domains. Red Teams and adversaries alike may use PowerView to enumerate domain users for situational awareness and Active Directory Discovery.","`powershell` EventCode=4104 ScriptBlockText = ""*Get-DomainUser*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_domainuser_with_powershell_script_block_filter`",50,"['T1087.002', 'T1087']","{'powershell', 'powersploit'}",301.0,"['domainuser', 'getdomainuser', 'powershell', 'script', 'logging']"
s406,Get-ForestTrust with PowerShell,"This analytic identifies Get-ForestTrust from PowerSploit in order to gather domain trust information. Typically, this is utilized within a script being executed and used to enumerate the domain trust information. This grants the adversary an understanding of how large or small the domain is. During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=powershell.exe OR Processes.process_name=cmd.exe Processes.process=*get-foresttrust* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_foresttrust_with_powershell_filter`,30,['T1482'],"{'powershell', 'powersploit'}",,"['foresttrust', 'trust', 'powersploit', 'domain', 'edr']"
s407,Get-ForestTrust with PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies Get-ForestTrust from PowerSploit in order to gather domain trust information. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText = ""*get-foresttrust*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_foresttrust_with_powershell_script_block_filter`",30,"['T1482', 'T1059.001']","{'powershell', 'powersploit'}",,"['powershell', 'foresttrust', 'logs', 'logging', 'powersploit']"
s408,Get WMIObject Group Discovery,"The following hunting analytic identifies the use of `Get-WMIObject Win32_Group` being used with PowerShell to identify local groups on the endpoint. \ Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \ During triage, review parallel processes and identify any further suspicious behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=powershell.exe OR processes.process_name=cmd.exe) (Processes.process=""*Get-WMIObject*"" AND Processes.process=""*Win32_Group*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`  | `get_wmiobject_group_discovery_filter`",30,"['T1069', 'T1069.001']",{'powershell'},46.0,"['win32_group', 'wmiobject', 'malicious', 'powershell', 'suspicious']"
s409,Get WMIObject Group Discovery with Script Block Logging,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies the usage of `Get-WMIObject Win32_Group`, which is typically used as a way to identify groups on the endpoint.  Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText = ""*Get-WMIObject*"" AND ScriptBlockText = ""*Win32_Group*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `get_wmiobject_group_discovery_with_script_block_logging_filter`",30,"['T1069', 'T1069.001']",{'powershell'},46.0,"['powershell', 'processes', 'malicious', 'suspicion', 'suspicious']"
s410,GPUpdate with no Command Line Arguments with Network,"The following analytic identifies gpupdate.exe with no command line arguments and with a network connection. It is unusual for gpupdate.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, triage any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. gpupdate.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=gpupdate.exe by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(gpupdate\.exe.{0,4}$)""| join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time dest parent_process_name process_name process_path process process_id dest_port C2 | `gpupdate_with_no_command_line_arguments_with_network_filter`",90,['T1055'],"{'exe', 'cobalt strike'}",,"['gpupdate', 'exe', 'execute', 'malicious', 'processes']"
s411,Hide User Account From Sign-In Screen,This analytic identifies a suspicious registry modification to hide a user account on the Windows Login screen. This technique was seen in some tradecraft where the adversary will create a hidden user account with Admin privileges in login screen to avoid noticing by the user that they already compromise and to persist on that said machine.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist*"" AND Registry.registry_value_data = ""0x00000000"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `hide_user_account_from_sign_in_screen_filter`",90,"['T1562.001', 'T1562']","{'hidden', 'registry modification', 'azorult'}",,"['registry', 'login', 'account', 'hidden', 'suspicious']"
s412,Hiding Files And Directories With Attrib exe,"Attackers leverage an existing Windows binary, attrib.exe, to mark specific as hidden by using specific flags so that the victim does not see the file.  The search looks for specific command-line arguments to detect the use of attrib.exe to hide files.","| tstats `security_content_summariesonly` count min(_time) values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=attrib.exe (Processes.process=*+h*) by Processes.parent_process Processes.process_name Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)`| `hiding_files_and_directories_with_attrib_exe_filter` ",90,"['T1222', 'T1222.001']","{'leverage', 'hidden', 'azorult'}",,"['hidden', 'hide', 'attrib', 'file', 'attackers']"
s413,High Frequency Copy Of Files In Network Share,This analytic is to detect a suspicious high frequency copying/moving of files in network share as part of information sabotage. This anomaly event can be a good indicator of insider trying to sabotage data by transfering classified or internal files within network share to exfitrate it after or to lure evidence of insider attack to other user. This behavior may catch several noise if network share is a common place for classified or internal document processing.,"`wineventlog_security` EventCode=5145 Relative_Target_Name IN (""*.doc"",""*.docx"",""*.xls"",""*.xlsx"",""*.ppt"",""*.pptx"",""*.log"",""*.txt"",""*.db"",""*.7z"",""*.zip"",""*.rar"",""*.tar"",""*.gz"",""*.jpg"",""*.gif"",""*.png"",""*.bmp"",""*.pdf"",""*.rtf"",""*.key"") Object_Type=File Share_Name IN (""\\\\*\\C$"",""\\\\*\\IPC$"",""\\\\*\\admin$"") Access_Mask= ""0x2"" |  bucket _time span=5m | stats values(Relative_Target_Name) as valRelativeTargetName, values(Share_Name) as valShareName, values(Object_Type) as valObjectType, values(Access_Mask) as valAccessmask, values(src_port) as valSrcPort, values(Source_Address) as valSrcAddress count as numShareName by dest, _time, EventCode, user | eventstats avg(numShareName) as avgShareName, stdev(numShareName) as stdShareName, count as numSlots by dest, _time, EventCode, user |  eval upperThreshold=(avgShareName + stdShareName *3) |  eval isOutlier=if(avgShareName > 20 and avgShareName >= upperThreshold, 1, 0) |  search isOutlier=1 | `high_frequency_copy_of_files_in_network_share_filter`",30,['T1537'],{'network'},302.0,"['anomaly', 'network', 'suspicious', 'insider', 'behavior']"
s414,High Process Termination Frequency,"This analytics are designed to indentify a high frequency of process termination on a machine which is a common behavior of ransomware malware before encrypting files. This technique is designed to avoid an exception error while accessing (docs, images, database and etc..) in the infected machine for encryption.",`sysmon` EventCode=5 |bin _time span=3s |stats values(Image) as proc_terminated min(_time) as firstTime max(_time) as lastTime  count by Computer EventCode ProcessID | where count >= 15 | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `high_process_termination_frequency_filter`,90,['T1486'],"{'malware', 'clop'}",,"['ransomware', 'malware', 'encryption', 'analytics', 'encrypting']"
s415,Hunting for Log4Shell,"The following hunting query assists with quickly assessing CVE-2021-44228, or Log4Shell, activity mapped to the Web Datamodel. This is a combination query attempting to identify, score and dashboard. Because the Log4Shell vulnerability requires the string to be in the logs, this will work to identify the activity anywhere in the HTTP headers using _raw. Modify the first line to use the same pattern matching against other log sources. Scoring is based on a simple rubric of 0-5. 5 being the best match, and less than 5 meant to identify additional patterns that will equate to a higher total score. \
The first jndi match identifies the standard pattern of `{jndi:` \
jndi_fastmatch is meant to identify any jndi in the logs. The score is set low and is meant to be the ""base"" score used later. \
jndi_proto is a protocol match that identifies `jndi` and one of `ldap, ldaps, rmi, dns, nis, iiop, corba, nds, http, https.` \
all_match is a very well written regex by https://gist.github.com/Schvenn that identifies nearly all patterns of this attack behavior. \
env works to identify environment variables in the header, meant to capture `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and `env`. \
uri_detect is string match looking for the common uri paths currently being scanned/abused in the wild. \
keywords matches on enumerated values that, like `$ctx:loginId`, that may be found in the header used by the adversary. \
lookup matching is meant to catch some basic obfuscation that has been identified using upper, lower and date. \
Scoring will then occur based on any findings. The base score is meant to be 2 , created by jndi_fastmatch. Everything else is meant to increase that score. \
Finally, a simple table is created to show the scoring and the _raw field. Sort based on score or columns of interest.","| from datamodel Web.Web | eval jndi=if(match(_raw, ""(\{|%7B)[jJnNdDiI]{4}:""),4,0) | eval jndi_fastmatch=if(match(_raw, ""[jJnNdDiI]{4}""),2,0) | eval jndi_proto=if(match(_raw,""(?i)jndi:(ldap[s]?|rmi|dns|nis|iiop|corba|nds|http|https):""),5,0) | eval all_match = if(match(_raw, ""(?i)(%(25){0,}20|\s)*(%(25){0,}24|\$)(%(25){0,}20|\s)*(%(25){0,}7B|{)(%(25){0,}20|\s)*(%(25){0,}(6A|4A)|J)(%(25){0,}(6E|4E)|N)(%(25){0,}(64|44)|D)(%(25){0,}(69|49)|I)(%(25){0,}20|\s)*(%(25){0,}3A|:)[\w\%]+(%(25){1,}3A|:)(%(25){1,}2F|\/)[^\n]+""),5,0) | eval env_var = if(match(_raw, ""env:"") OR match(_raw, ""env:AWS_ACCESS_KEY_ID"") OR match(_raw, ""env:AWS_SECRET_ACCESS_KEY""),5,0) | eval uridetect = if(match(_raw, ""(?i)Basic\/Command\/Base64|Basic\/ReverseShell|Basic\/TomcatMemshell|Basic\/JBossMemshell|Basic\/WebsphereMemshell|Basic\/SpringMemshell|Basic\/Command|Deserialization\/CommonsCollectionsK|Deserialization\/CommonsBeanutils|Deserialization\/Jre8u20\/TomcatMemshell|Deserialization\/CVE_2020_2555\/WeblogicMemshell|TomcatBypass|GroovyBypass|WebsphereBypass""),4,0) | eval keywords = if(match(_raw,""(?i)\$\{ctx\:loginId\}|\$\{map\:type\}|\$\{filename\}|\$\{date\:MM-dd-yyyy\}|\$\{docker\:containerId\}|\$\{docker\:containerName\}|\$\{docker\:imageName\}|\$\{env\:USER\}|\$\{event\:Marker\}|\$\{mdc\:UserId\}|\$\{java\:runtime\}|\$\{java\:vm\}|\$\{java\:os\}|\$\{jndi\:logging/context-name\}|\$\{hostName\}|\$\{docker\:containerId\}|\$\{k8s\:accountName\}|\$\{k8s\:clusterName\}|\$\{k8s\:containerId\}|\$\{k8s\:containerName\}|\$\{k8s\:host\}|\$\{k8s\:labels.app\}|\$\{k8s\:labels.podTemplateHash\}|\$\{k8s\:masterUrl\}|\$\{k8s\:namespaceId\}|\$\{k8s\:namespaceName\}|\$\{k8s\:podId\}|\$\{k8s\:podIp\}|\$\{k8s\:podName\}|\$\{k8s\:imageId\}|\$\{k8s\:imageName\}|\$\{log4j\:configLocation\}|\$\{log4j\:configParentLocation\}|\$\{spring\:spring.application.name\}|\$\{main\:myString\}|\$\{main\:0\}|\$\{main\:1\}|\$\{main\:2\}|\$\{main\:3\}|\$\{main\:4\}|\$\{main\:bar\}|\$\{name\}|\$\{marker\}|\$\{marker\:name\}|\$\{spring\:profiles.active[0]|\$\{sys\:logPath\}|\$\{web\:rootDir\}|\$\{sys\:user.name\}""),4,0) | eval obf = if(match(_raw, ""(\$|%24)[^ /]*({|%7b)[^ /]*(j|%6a)[^ /]*(n|%6e)[^ /]*(d|%64)[^ /]*(i|%69)[^ /]*(:|%3a)[^ /]*(:|%3a)[^ /]*(/|%2f)""),5,0) | eval lookups = if(match(_raw, ""(?i)({|%7b)(main|sys|k8s|spring|lower|upper|env|date|sd)""),4,0)  | addtotals fieldname=Score, jndi, jndi_proto, env_var, uridetect, all_match, jndi_fastmatch, keywords, obf, lookups | where Score > 2 | stats values(Score) by  jndi, jndi_proto, env_var, uridetect, all_match, jndi_fastmatch, keywords, lookups, obf, _raw | `hunting_for_log4shell_filter`",80,['T1190'],{'cve-2021-44228'},,"['jndi_fastmatch', 'jndi_proto', 'logs', 'jndi', 'log4shell']"
s416,Icacls Deny Command,This analytic identifies a potential adversary that changes the security permission of a specific file or directory. This technique is commonly seen in APT tradecraft or coinminer scripts. This behavior is meant to evade detection and prevent access to their component files.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""icacls.exe"" OR Processes.process_name = ""cacls.exe"" OR Processes.process_name = ""xcacls.exe"" AND Processes.process = ""*/deny*"" by Processes.parent_process_name Processes.process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `icacls_deny_command_filter`",90,['T1222'],"{'permission', 'coinminer', 'azorult'}",,"['security', 'permission', 'adversary', 'files', 'file']"
s417,ICACLS Grant Command,This analytic identifies potential adversaries that modify the security permission of a specific file or directory. This technique is commonly seen in APT tradecraft and coinminer scripts to evade detections and restrict access to their component files.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""icacls.exe"" OR Processes.process_name = ""cacls.exe"" OR Processes.process_name = ""xcacls.exe"" AND Processes.process = ""*/grant*"" by Processes.parent_process_name Processes.process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `icacls_grant_command_filter`",70,['T1222'],"{'permission', 'coinminer'}",18.0,"['security', 'permission', 'files', 'adversaries', 'file']"
s418,IcedID Exfiltrated Archived File Creation,This search is to detect a suspicious file creation namely passff.tar and cookie.tar. This files are possible archived of stolen browser information like history and cookies in a compromised machine with IcedID.,"`sysmon` EventCode= 11  (TargetFilename = ""*\\passff.tar"" OR TargetFilename = ""*\\cookie.tar"") |stats count min(_time) as firstTime max(_time) as lastTime by TargetFilename EventCode process_id  process_name Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `icedid_exfiltrated_archived_file_creation_filter`",80,"['T1560.001', 'T1560']",{'icedid'},,"['cookies', 'search', 'archived', 'tar', 'icedid']"
s419,Impacket Lateral Movement Commandline Parameters,"This analytic looks for the presence of suspicious commandline parameters typically present when using Impacket tools. Impacket is a collection of python classes meant to be used with Microsoft network protocols. There are multiple scripts that leverage impacket libraries like `wmiexec.py`, `smbexec.py`, `dcomexec.py` and `atexec.py` used to execute commands on remote endpoints. By default, these scripts leverage administrative shares and hardcoded parameters that can be used as a signature to detect its use. Red Teams and adversaries alike may leverage Impackets tools for lateral movement and remote code execution.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process = ""*/c* \\\\127.0.0.1\\*"" OR Processes.process= ""*/c* 2>&1"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `impacket_lateral_movement_commandline_parameters_filter`",90,"['T1021', 'T1021.002', 'T1021.003', 'T1047', 'T1543.003']","{'leverage', 'industroyer2', 'impacket', 'whispergate'}",,"['impacket', 'impackets', 'tools', 'execution', 'smbexec']"
s420,Interactive Session on Remote Endpoint with PowerShell,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the usage of the `Enter-PSSession`. This commandlet can be used to open an interactive session on a remote endpoint leveraging the WinRM protocol. Red Teams and adversaries alike may abuse WinRM and `Enter-PSSession` for lateral movement and remote code execution.,"`powershell` EventCode=4104 (ScriptBlockText=""*Enter-PSSession*"" AND ScriptBlockText=""*-ComputerName*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `interactive_session_on_remote_endpoint_with_powershell_filter`",90,"['T1021', 'T1021.006']","{'leverage', 'powershell'}",38.0,"['pssession', 'winrm', 'powershell', 'session', 'logging']"
s421,Java Class File download by Java User Agent,The following analytic identifies a Java user agent performing a GET request for a .class file from the remote site. This is potentially indicative of exploitation of the Java application and may be related to current event CVE-2021-44228 (Log4Shell).,"| tstats count from datamodel=Web where Web.http_user_agent=""*Java*"" Web.http_method=""GET"" Web.url=""*.class*"" by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `java_class_file_download_by_java_user_agent_filter`",80,['T1190'],"{'havoc', 'cve-2021-44228'}",,"['java', 'agent', 'file', 'log4shell', 'class']"
s422,Java Writing JSP File,"The following analytic identifies the process java writing a .jsp to disk. This is potentially indicative of a web shell being written to disk. Modify and tune the analytic based on data ingested. For instance, it may be worth running a broad query for jsp file writes first before performing a join.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name IN (""java"",""java.exe"", ""javaw.exe"") by _time Processes.process_id Processes.process_name Processes.dest Processes.process_guid Processes.user | `drop_dm_object_name(Processes)` | join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem where Filesystem.file_name=""*.jsp*"" by _time Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.process_guid Filesystem.user | `drop_dm_object_name(Filesystem)` | fields _time process_guid file_path file_name file_create_time user dest process_name] | stats count min(_time) as firstTime max(_time) as lastTime by dest process_name process_guid file_name file_path file_create_time user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `java_writing_jsp_file_filter`",60,['T1190'],{'cve-2022-22965'},,"['jsp', 'java', 'process', 'writes', 'disk']"
s423,Jscript Execution Using Cscript App,This search is to detect a execution of jscript using cscript process. Commonly when a user run jscript file it was executed by wscript.exe application. This technique was seen in FIN7 js implant to execute its malicious script using cscript process. This behavior is uncommon and a good artifacts to check further anomalies within the network,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = ""cscript.exe"" AND Processes.parent_process = ""*//e:jscript*"") OR (Processes.process_name = ""cscript.exe"" AND Processes.process = ""*//e:jscript*"") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `jscript_execution_using_cscript_app_filter`",70,"['T1059', 'T1059.007']","{'fin7', 'remcos'}",,"['wscript', 'jscript', 'cscript', 'script', 'execution']"
s424,Kerberoasting spn request with RC4 encryption,"The following analytic leverages Kerberos Event 4769, A Kerberos service ticket was requested, to identify a potential kerberoasting attack against Active Directory networks. Kerberoasting allows an adversary to request kerberos tickets for domain accounts typically used as service accounts and attempt to crack them offline allowing them to obtain privileged access to the domain. This analytic looks for a specific combination of the Ticket_Options field based on common kerberoasting tools. Defenders should be aware that it may be possible for a Kerberoast attack to use different Ticket_Options.","`wineventlog_security` EventCode=4769 Service_Name!=""*$"" (Ticket_Options=0x40810000 OR Ticket_Options=0x40800000 OR Ticket_Options=0x40810010) Ticket_Encryption_Type=0x17 | stats count min(_time) as firstTime max(_time) as lastTime by dest, service, service_id, Ticket_Encryption_Type, Ticket_Options | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `kerberoasting_spn_request_with_rc4_encryption_filter`",90,"['T1558', 'T1558.003']","{'kerberos', 'wiper'}",,"['kerberoasting', 'kerberos', 'kerberoast', 'ticket_options', 'ticket']"
s425,Kerberos Pre-Authentication Flag Disabled in UserAccountControl,"The following analytic leverages Windows Security Event 4738, `A user account was changed`, to identify a change performed on a domain user object that disables Kerberos Pre-Authentication. Disabling the Pre Authentication flag in the UserAccountControl property allows an adversary to easily perform a brute force attack against the user's password offline leveraging the ASP REP Roasting technique. Red Teams and adversaries alike who have obtained privileges in an Active Directory network may use this technique as a backdoor or a way to escalate privileges."," `wineventlog_security` EventCode=4738 MSADChangedAttributes=""*Don't Require Preauth' - Enabled*"" | table EventCode, Account_Name, Security_ID, MSADChangedAttributes | `kerberos_pre_authentication_flag_disabled_in_useraccountcontrol_filter`",50,"['T1558', 'T1558.004']","{'kerberos', 'privilege'}",140.0,"['useraccountcontrol', 'authentication', 'kerberos', 'security', 'privileges']"
s426,Kerberos Pre-Authentication Flag Disabled with PowerShell,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Set-ADAccountControl` commandlet with specific parameters. `Set-ADAccountControl` is part of the Active Directory PowerShell module used to manage Windows Active Directory networks. As the name suggests, `Set-ADAccountControl` is used to modify User Account Control values for an Active Directory domain account. With the appropiate parameters, Set-ADAccountControl allows adversaries to disable Kerberos Pre-Authentication for an account to to easily perform a brute force attack against the user's password offline leveraging the ASP REP Roasting technique. Red Teams and adversaries alike who have obtained privileges in an Active Directory network may use this technique as a backdoor or a way to escalate privileges.","`powershell` EventCode=4104 (ScriptBlockText = ""*Set-ADAccountControl*"" AND ScriptBlockText=""*DoesNotRequirePreAuth:$true*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `kerberos_pre_authentication_flag_disabled_with_powershell_filter`",50,"['T1558', 'T1558.004']","{'powershell', 'privilege'}",309.0,"['adaccountcontrol', 'privileges', 'authentication', 'powershell', 'control']"
s427,Kerberos Service Ticket Request Using RC4 Encryption,"The following analytic leverages Kerberos Event 4769, A Kerberos service ticket was requested, to identify a potential Kerberos Service Ticket request related to a Golden Ticket attack. Adversaries who have obtained the Krbtgt account NTLM password hash may forge a Kerberos Granting Ticket (TGT) to obtain unrestricted access to an Active Directory environment. Armed with a Golden Ticket, attackers can request service tickets to move laterally and execute code on remote systems. Looking for Kerberos Service Ticket requests using the legacy RC4 encryption mechanism could represent the second stage of a Golden Ticket attack. RC4 usage should be rare on a modern network since Windows Vista & Windows Sever 2008 and newer support AES Kerberos encryption.\ Defenders should note that if an attacker does not leverage the NTLM password hash but rather the AES key to create a golden ticket, this detection may be bypassed."," `wineventlog_security` EventCode=4769 Service_Name=""*$"" (Ticket_Options=0x40810000 OR Ticket_Options=0x40800000 OR Ticket_Options=0x40810010) Ticket_Encryption_Type=0x17 | stats count min(_time) as firstTime max(_time) as lastTime by dest, service, service_id, Ticket_Encryption_Type, Ticket_Options | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `kerberos_service_ticket_request_using_rc4_encryption_filter`",90,"['T1558', 'T1558.001']","{'kerberos', 'leverage', 'impacket'}",44.0,"['kerberos', 'ticket', 'tickets', 'ntlm', 'rc4']"
s428,Kerberos TGT Request Using RC4 Encryption,"The following analytic leverages Event 4768, A Kerberos authentication ticket (TGT) was requested, to identify a TGT request with encryption type 0x17, or RC4-HMAC. This encryption type is no longer utilized by newer systems and could represent evidence of an OverPass The Hash attack. Similar to Pass The Hash, OverPass The Hash is a form of credential theft that allows adversaries to move laterally or consume resources in a target network. Leveraging this attack, an adversary who has stolen the NTLM hash of a valid domain account is able to authenticate to the Kerberos Distribution Center(KDC) on behalf of the legitimate account and obtain a Kerberos TGT ticket. Depending on the privileges of the compromised account, this ticket may be used to obtain unauthorized access to systems and other network resources.", `wineventlog_security` EventCode=4768 Ticket_Encryption_Type=0x17 Account_Name!=*$ | `kerberos_tgt_request_using_rc4_encryption_filter` ,50,['T1550'],"{'kerberos', 'authenticate', 'impacket'}",310.0,"['kerberos', 'authentication', 'unauthorized', 'authenticate', 'kdc']"
s429,Kerberos User Enumeration,"The following analytic leverages Event Id 4768, A Kerberos authentication ticket (TGT) was requested, to identify one source endpoint trying to obtain an unusual number Kerberos TGT ticket for non existing users. This behavior could represent an adversary abusing the Kerberos protocol to perform a user enumeration attack against an Active Directory environment. When Kerberos is sent a TGT request with no preauthentication for an invalid username, it responds with KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN or 0x6. Red teams and adversaries alike may abuse the Kerberos protocol to validate a list of users use them to perform further attacks.\ The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number requests. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field."," `wineventlog_security` EventCode=4768 Result_Code=0x6 Account_Name!=""*$"" | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `kerberos_user_enumeration_filter`",30,"['T1589', 'T1589.002']",{'kerberos'},310.0,"['kerberos', 'authentication', 'attacks', 'krb5kdc_err_c_principal_unknown', 'preauthentication']"
s430,Known Services Killed by Ransomware,This search detects a suspicioous termination of known services killed by ransomware before encrypting files in a compromised machine. This technique is commonly seen in most of ransomware now a days to avoid exception error while accessing the targetted files it wants to encrypts because of the open handle of those services to the targetted file.,"`wineventlog_system` EventCode=7036 Message IN (""*Volume Shadow Copy*"",""*VSS*"", ""*backup*"", ""*sophos*"", ""*sql*"", ""*memtas*"", ""*mepocs*"", ""*veeam*"", ""*svc$*"") Message=""*service entered the stopped state*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message dest Type | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `known_services_killed_by_ransomware_filter`",90,['T1490'],"{'blackmatter', 'sodinokibi', 'stop', 'revil', 'darkside'}",,"['ransomware', 'search', 'encrypts', 'files', 'encrypting']"
s431,Linux Account Manipulation Of SSH Config and Keys,This analytic is to detect a deletion of ssh key in a linux machine. attacker may delete or modify ssh key to impair some security features or act as defense evasion in compromised linux machine. This Anomaly can be also a good indicator of a malware trying to wipe or delete several files in a compromised host as part of its destructive payload like what acidrain malware does in linux or router machines. This detection can be a good pivot to check what process and user tries to delete this type of files which is not so common and need further investigation.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted AND Filesystem.file_path IN (""/etc/ssh/*"", ""~/.ssh/*"") by _time span=1h Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid file_name file_path action _time parent_process_name parent_process  process_path dest user | `linux_account_manipulation_of_ssh_config_and_keys_filter`",70,"['T1485', 'T1070.004', 'T1070']","{'ssh', 'wiper', 'malware', 'acidrain'}",87.0,"['ssh', 'security', 'compromised', 'malware', 'anomaly']"
s432,Linux Adding Crontab Using List Parameter,"The following analytic identifies a suspicious cron jobs modification using crontab list parameters. This command line parameter can be abused by malware like industroyer2, adversaries, and red teamers to add a crontab entry to their malicious code to execute to the schedule they want. This event can also be executed by administrator or normal user for automation purposes so filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""crontab"" Processes.process= ""* -l*"" by  Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_adding_crontab_using_list_parameter_filter`",50,"['T1053.003', 'T1053']","{'malware', 'industroyer', 'industroyer2'}",131.0,"['crontab', 'cron', 'malware', 'malicious', 'suspicious']"
s433,Linux Add Files In Known Crontab Directories,"The following analytic identifies a suspicious file creation in known cron table directories. This event is commonly abuse by malware, adversaries and red teamers to persist on the target or compromised host. crontab or cronjob is like a schedule task in windows environment where you can create an executable or script on the known crontab directories to run it base on its schedule. This Anomaly query is a good indicator to look further what file is added and who added the file if to consider it legitimate file.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/etc/cron*"", ""*/var/spool/cron/*"") by Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_add_files_in_known_crontab_directories_filter`",50,"['T1053.003', 'T1053']","{'malware', 'cronrat'}",0.0,"['crontab', 'cronjob', 'cron', 'anomaly', 'malware']"
s434,Linux Add User Account,"This analytic looks for commands to create user accounts on the linux platform. This technique is commonly abuse by adversaries, malware author and red teamers to persist on the targeted or compromised host by creating new user with an elevated privilege. This Hunting query may catch normal creation of user by administrator so filter is needed.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where Processes.process_name IN (""useradd"", ""adduser"") OR Processes.process IN (""*useradd *"", ""*adduser *"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_add_user_account_filter`",50,"['T1136.001', 'T1136']",{'privilege'},226.0,"['accounts', 'privilege', 'user', 'administrator', 'compromised']"
s435,Linux apt-get Privilege Escalation,"The apt-get is a command line tool for interacting with the Advanced Package Tool (APT) library (a package management system for Linux distributions). It allows you to search for, install, manage, update, and remove software. The tool does not build software from the source code. If sudo right is given to the tool for user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*apt-get*"" AND Processes.process=""*APT::Update::Pre-Invoke::*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_apt_get_privilege_escalation_filter`",20,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['sudo', 'root', 'apt', 'commands', 'command']"
s436,Linux APT Privilege Escalation,"Advanced Package Tool, more commonly known as APT, is a collection of tools used to install, update, remove, and otherwise manage software packages on Debian and its derivative operating systems, including Ubuntu and Linux Mint. If sudo right is given to the tool for user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*apt*"" AND Processes.process=""*APT::Update::Pre-Invoke::*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_apt_privilege_escalation_filter`",20,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['sudo', 'apt', 'debian', 'packages', 'root']"
s437,Linux At Allow Config File Creation,"The following analytic identifies a suspicious file creation of /etc/at.allow or /etc/at.deny. These 2 files are commonly abused by malware, adversaries or red teamers to persist on the targeted or compromised host. These config files can restrict or allow user to execute ""at"" application (another schedule task application in linux). attacker can create a user or add the compromised username to that config file to execute ""at"" to schedule it malicious code. This anomaly detection can be a good indicator to investigate further the entry in created config file and who created it to verify if it is a false positive.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/etc/at.allow"", ""*/etc/at.deny"") by Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_at_allow_config_file_creation_filter`",50,"['T1053.003', 'T1053']",{'malware'},54.0,"['malware', 'restrict', 'deny', 'compromised', 'attacker']"
s438,Linux At Application Execution,"The following analytic identifies a suspicious process creation of At application. This process can be used by malware, adversaries and red teamers to create persistence entry to the targeted or compromised host with their malicious code. This anomaly detection can be a good indicator to investigate the event before and after this process execution, when it was executed and what schedule task it will execute.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where  Processes.process_name IN (""at"", ""atd"") OR Processes.parent_process_name IN (""at"", ""atd"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_at_application_execution_filter`",30,"['T1053.002', 'T1053']",{'malware'},232.0,"['malware', 'anomaly', 'malicious', 'process', 'suspicious']"
s439,Linux AWK Privilege Escalation,"Awk is mostly used for processing and scanning patterns. It checks one or more files to determine whether any lines fit the specified patterns, and if so, it does the appropriate action. If sudo right is given to AWK binary for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*sudo*"" AND Processes.process=""*awk*""  AND Processes.process=""*BEGIN*system*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `linux_awk_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'shell', 'sudo'}",97.0,"['sudo', 'awk', 'root', 'commands', 'shell']"
s440,Linux Busybox Privilege Escalation,"BusyBox combines tiny versions of many common UNIX utilities into a single small executable. It provides minimalist replacements for most of the utilities you usually find in GNU coreutils, util-linux, etc. If sudo right is given to BusyBox application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*busybox*"" AND Processes.process=""*sh*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_busybox_privilege_escalation_filter`",20,"['T1548.003', 'T1548']","{'root', 'shell', 'sudo'}",97.0,"['busybox', 'sudo', 'root', 'shell', 'executable']"
s441,Linux c89 Privilege Escalation,"The c89 and cc commands compile, assemble, and link-edit C programs; the cxx or c++ command does the same for C++ programs. The c89 command should be used when compiling C programs that are written according to Standard C. If sudo right is given to c89 application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*c89*"" AND Processes.process=""*-wrapper*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_c89_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['sudo', 'c89', 'commands', 'compiling', 'root']"
s442,Linux c99 Privilege Escalation,"The c99 utility is an interface to the standard C compilation system; it shall accept source code conforming to the ISO C standard. The system conceptually consists of a compiler and link editor. If sudo right is given to ruby application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*c99*"" AND Processes.process=""*-wrapper*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_c99_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'sudo'}",311.0,"['c99', 'compiler', 'sudo', 'root', 'ruby']"
s443,Linux Change File Owner To Root,"This analytic looks for a commandline that change the file owner to root using chown utility tool. This technique is commonly abuse by adversaries, malware author and red teamers to escalate privilege to the targeted or compromised host by changing the owner of their malicious file to root. This event is not so common in corporate network except from the administrator doing normal task that needs high privilege.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = chown OR Processes.process = ""*chown *"") AND Processes.process = ""* root *"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_change_file_owner_to_root_filter`",80,"['T1222.002', 'T1222']","{'root', 'malware'}",138.0,"['malware', 'chown', 'compromised', 'malicious', 'root']"
s444,Linux Clipboard Data Copy,"The following analytic identifies the use of Linux Xclip copying data out of the clipboard. Adversaries have utilized this technique to capture passwords, IP addresses, or store payloads.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=xclip Processes.process IN (""*-o *"", ""*-sel *"", ""*-selection *"", ""*clip *"",""*clipboard*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_clipboard_data_copy_filter`",40,['T1115'],{'clipboard'},312.0,"['xclip', 'clipboard', 'copying', 'capture', 'linux']"
s445,Linux Common Process For Elevation Control,"This analytic is to look for possible elevation control access using a common known process in linux platform to change the attribute and file ownership. This technique is commonly abused by adversaries, malware author and red teamers to gain persistence or privilege escalation on the target or compromised host. This common process is used to modify file attribute, file ownership or SUID. This tools can be used in legitimate purposes so filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN (""chmod"", ""chown"", ""fchmod"", ""fchmodat"", ""fchown"", ""fchownat"", ""fremovexattr"", ""fsetxattr"", ""lchown"", ""lremovexattr"", ""lsetxattr"", ""removexattr"", ""setuid"", ""setgid"", ""setreuid"", ""setregid"", ""chattr"") OR Processes.process IN (""*chmod *"", ""*chown *"", ""*fchmod *"", ""*fchmodat *"", ""*fchown *"", ""*fchownat *"", ""*fremovexattr *"", ""*fsetxattr *"", ""*lchown *"", ""*lremovexattr *"", ""*lsetxattr *"", ""*removexattr *"", ""*setuid *"", ""*setgid *"", ""*setreuid *"", ""*setregid *"", ""*setcap *"", ""*chattr *"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_common_process_for_elevation_control_filter`",30,"['T1548.001', 'T1548']","{'malware', 'privilege'}",54.0,"['elevation', 'privilege', 'ownership', 'malware', 'attribute']"
s446,Linux Composer Privilege Escalation,"Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. If sudo right is given to tool for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*composer*"" AND Processes.process=""*run-script*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_composer_privilege_escalation_filter`",20,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['composer', 'sudo', 'root', 'php', 'dependency']"
s447,Linux Cpulimit Privilege Escalation,"cpulimit is a simple program which attempts to limit the cpu usage of a process (expressed in percentage, not in cpu time). This is useful to control batch jobs, when you don't want them to eat too much cpu. If sudo right is given to the program for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*cpulimit*"" AND Processes.process=""*-l*"" AND Processes.process=""*-f*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_cpulimit_privilege_escalation_filter`",40,"['T1548.003', 'T1548']","{'root', 'sudo'}",313.0,"['cpulimit', 'sudo', 'cpu', 'root', 'limit']"
s448,Linux Csvtool Privilege Escalation,"csvtool is an easy to use command-line tool to work with .CSV files. If sudo right is given to the tool for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*csvtool*"" AND Processes.process=""*call*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_csvtool_privilege_escalation_filter`",20,"['T1548.003', 'T1548']","{'root', 'sudo'}",314.0,"['csvtool', 'csv', 'sudo', 'root', 'commands']"
s449,Linux Curl Upload File,"The following analytic identifies curl being utilized with the -F or --form, --upload-file, -T, -d, --data, --data-raw, -I and --head switches to upload AWS credentials or config to a remote destination. This enables uploading of binary files and so forth. To force the 'content' part to be a file, prefix the file name with an @ sign. To just get the content part from a file, prefix the file name with the symbol <. The difference between @ and < is then that @ makes a file get attached in the post as a file upload, while the < makes a text field and just get the contents for that text field from a file. This technique was utlized by the TeamTNT group to exfiltrate AWS credentials.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=curl Processes.process IN (""*-F *"", ""*--form *"",""*--upload-file *"",""*-T *"",""*-d *"",""*--data *"",""*--data-raw *"", ""*-I *"", ""*--head *"") AND Processes.process IN (""*.aws/credentials*"". ""*.aws/config*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_curl_upload_file_filter`",80,['T1105'],"{'teamtnt', 'curl'}",,"['curl', 'aws', 'uploading', 'upload', 'file']"
s450,Linux DD File Overwrite,"This analytic is to look for dd command to overwrite file. This technique was abused by adversaries or threat actor to destroy files or data on specific system or in a large number of host within network to interrupt host avilability, services and many more. This is also used to destroy data where it make the file irrecoverable by forensic techniques through overwriting files, data or local and remote drives.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""dd"" AND Processes.process = ""*of=*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_dd_file_overwrite_filter`",80,['T1485'],{'industroyer2'},70.0,"['dd', 'file', 'overwriting', 'overwrite', 'destroy']"
s451,Linux Decode Base64 to Shell,The following analytic identifies base64 being decoded and passed to a Linux shell.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN (""*base64 -d*"",""*base64 --decode*"") AND Processes.process=""*|*"" `linux_shells` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_decode_base64_to_shell_filter`",50,"['T1027', 'T1059.004']",{'shell'},7.0,"['base64', 'decoded', 'shell', 'linux', 'identifies']"
s452,Linux Deleting Critical Directory Using RM Command,"The following analytic identifies a suspicious deletion of a critical folder in Linux machine using rm command. This technique was seen in industroyer2 campaign to wipe or destroy energy facilities of a targeted sector. Deletion in these list of folder is not so common since it need some elevated privileges to access some of it. We recommend to look further events specially in file access or file deletion, process commandline that may related to this technique.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name =rm AND Processes.process= ""* -rf *"" AND Processes.process IN (""*/boot/*"", ""*/var/log/*"", ""*/etc/*"", ""*/dev/*"") by Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_deleting_critical_directory_using_rm_command_filter`",80,['T1485'],"{'industroyer2', 'industroyer'}",85.0,"['rm', 'folder', 'deletion', 'destroy', 'suspicious']"
s453,Linux Deletion Of Cron Jobs,"This analytic is to detect a deletion of cron job in a linux machine. This technique can be related to an attacker, threat actor or malware to disable scheduled cron jobs that might be related to security or to evade some detections. We also saw that this technique can be a good indicator for malware that is trying to wipe or delete several files on the compromised host like the acidrain malware. This anomaly detection can be a good pivot detection to look for process and user doing it why they doing. Take note that this event can be done by administrator so filtering on those possible false positive event is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted Filesystem.file_path =""/etc/cron.*"" by _time span=1h Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid file_name file_path action _time parent_process_name parent_process  process_path dest user | `linux_deletion_of_cron_jobs_filter`",70,"['T1485', 'T1070.004', 'T1070']","{'malware', 'wiper', 'acidrain'}",,"['cron', 'malware', 'detection', 'process', 'detections']"
s454,Linux Deletion Of Init Daemon Script,This analytic is to detect a deletion of init daemon script in a linux machine. daemon script that place in /etc/init.d/ is a directory that can start and stop some daemon services in linux machines. attacker may delete or modify daemon script to impair some security features or act as defense evasion in a compromised linux machine. This TTP can be also a good indicator of a malware trying to wipe or delete several files in compromised host as part of its destructive payload like what acidrain malware does in linux or router machines. This detection can be a good pivot to check what process and user tries to delete this type of files which is not so common and need further investigation.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted Filesystem.file_path IN ( ""/etc/init.d/*"") by _time span=1h Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid file_name file_path action _time parent_process_name parent_process  process_path dest user | `linux_deletion_of_init_daemon_script_filter`",70,"['T1485', 'T1070.004', 'T1070']","{'malware', 'wiper', 'stop', 'acidrain'}",,"['daemon', 'init', 'malware', 'process', 'detection']"
s455,Linux Deletion Of Services,This analytic is to detect a deletion of services in a linux machine. attacker may delete or modify services to impair some security features or act as defense evasion in a compromised linux machine. This TTP can be also a good indicator of a malware trying to wipe or delete several files in a compromised host as part of its destructive payload like what acidrain malware does in linux or router machines. This detection can be a good pivot to check what process and user tries to delete this type of files which is not so common and need further investigation.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted Filesystem.file_path IN ( ""/etc/systemd/*"", ""/usr/lib/systemd/*"") Filesystem.file_path = ""*.service"" by _time span=1h Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid file_name file_path action _time parent_process_name parent_process  process_path dest user | `linux_deletion_of_services_filter`",80,"['T1485', 'T1070.004', 'T1070']","{'malware', 'wiper', 'acidrain', 'systemd'}",,"['ttp', 'malware', 'detection', 'detect', 'process']"
s456,Linux Deletion of SSL Certificate,This analytic is to detect a deletion of ssl certificate in a linux machine. attacker may delete or modify ssl certificate to impair some security features or act as defense evasion in compromised linux machine. This Anomaly can be also a good indicator of a malware trying to wipe or delete several files in a compromised host as part of its destructive payload like what acidrain malware does in linux or router machines. This detection can be a good pivot to check what process and user tries to delete this type of files which is not so common and need further investigation.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted Filesystem.file_path = ""/etc/ssl/certs/*"" Filesystem.file_path IN (""*.pem"", ""*.crt"") by _time span=1h Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid file_name file_path action _time parent_process_name parent_process  process_path dest user | `linux_deletion_of_ssl_certificate_filter`",70,"['T1485', 'T1070.004', 'T1070']","{'malware', 'wiper', 'acidrain'}",87.0,"['malware', 'ssl', 'detection', 'certificate', 'security']"
s457,Linux Disable Services,The following analytic is to detect events that attempts to disable a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then delete it. Adversaries utilize this technique like industroyer2 malware to terminate security services or other related services to continue there objective as a destructive payload.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN (""systemctl"", ""service"", ""svcadm"")  Processes.process = ""* disable*"" by Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_disable_services_filter`",70,['T1489'],"{'malware', 'industroyer', 'industroyer2', 'stop'}",271.0,"['malware', 'service', 'detect', 'services', 'security']"
s458,Linux Doas Conf File Creation,"This analytic is to detect the creation of doas.conf file in linux host platform. This configuration file can be use by doas utility tool to allow or permit standard users to perform tasks as root, the same way sudo does. This tool is developed as a minimalistic alternative to sudo application. This tool can be abused advesaries, attacker or malware to gain elevated privileges to the targeted or compromised host. On the other hand this can also be executed by administrator for a certain task that needs admin rights. In this case filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/etc/doas.conf"") by Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_doas_conf_file_creation_filter`",70,"['T1548.003', 'T1548']","{'privilege', 'sudo'}",97.0,"['doas', 'sudo', 'privileges', 'administrator', 'configuration']"
s459,Linux Doas Tool Execution,"This analytic is to detect the doas tool execution in linux host platform. This utility tool allow standard users to perform tasks as root, the same way sudo does. This tool is developed as a minimalistic alternative to sudo application. This tool can be abused advesaries, attacker or malware to gain elevated privileges to the targeted or compromised host. On the other hand this can also be executed by administrator for a certain task that needs admin rights. In this case filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""doas"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_doas_tool_execution_filter`",70,"['T1548.003', 'T1548']","{'root', 'privilege', 'sudo'}",97.0,"['sudo', 'privileges', 'doas', 'administrator', 'root']"
s460,Linux Docker Privilege Escalation,"Docker is an open source containerization platform. It helps programmers to bundle applications into containers, which are standardized executable parts that include the application source code along with the OS libraries and dependencies needed to run that code in any setting. The user can add mount the root directory into a container and edit the /etc/password file to add a super user. This requires the user to be privileged enough to run docker, i.e. being in the docker group or being root.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN(""*docker*-v*/*:*"",""*docker*--volume*/*:*"") OR Processes.process IN(""*docker*exec*sh*"",""*docker*exec*bash*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_docker_privilege_escalation_filter`",10,"['T1548.003', 'T1548']","{'root', 'docker'}",315.0,"['docker', 'containerization', 'container', 'containers', 'root']"
s461,Linux Edit Cron Table Parameter,"The following analytic identifies a suspicious cronjobs modification using crontab edit parameter. This commandline parameter can be abuse by malware author, adversaries, and red red teamers to add cronjob entry to their malicious code to execute to the schedule they want. This event can also be executed by administrator or normal user for automation purposes so filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = crontab Processes.process = ""*crontab *"" Processes.process = ""* -e*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_edit_cron_table_parameter_filter`",30,"['T1053.003', 'T1053']",{'malware'},0.0,"['cronjob', 'crontab', 'cronjobs', 'malware', 'malicious']"
s462,Linux Emacs Privilege Escalation,"EMACS is a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as ""the extensible, customizable, self-documenting, real-time display editor"". If sudo right is given to EMACS tool for the user, then the user can run special commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*emacs*"" AND Processes.process=""*--eval*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_emacs_privilege_escalation_filter`",40,"['T1548.003', 'T1548']",{'sudo'},316.0,"['emacs', 'sudo', 'editor', 'editors', 'commands']"
s463,Linux File Created In Kernel Driver Directory,"This analytic looks for suspicious file creation in kernel/driver directory in linux platform. This directory is known folder for all linux kernel module available within the system. so creation of file in this directory is a good indicator that there is a possible rootkit installation in the host machine. This technique was abuse by adversaries, malware author and red teamers to gain high privileges to their malicious code such us in kernel level. Even this event is not so common administrator or legitimate 3rd party tool may install driver or linux kernel module as part of its installation.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/kernel/drivers/*"") by Filesystem.dest Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_file_created_in_kernel_driver_directory_filter`",80,"['T1547.006', 'T1547']","{'malware', 'driver', 'rootkit'}",320.0,"['rootkit', 'malware', 'malicious', 'suspicious', 'driver']"
s464,Linux File Creation In Init Boot Directory,"This analytic looks for suspicious file creation on init system directories for automatic execution of script or file upon boot up. This technique is commonly abuse by adversaries, malware author and red teamer to persist on the targeted or compromised host. This behavior can be executed or use by an administrator or network operator to add script files or binary files as part of a task or automation. filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/etc/init.d/*"", ""*/etc/rc.d/*"", ""*/sbin/init.d/*"", ""*/etc/rc.local*"") by Filesystem.dest Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_file_creation_in_init_boot_directory_filter`",70,"['T1037.004', 'T1037']","{'malware', 'kaiji'}",54.0,"['malware', 'init', 'compromised', 'script', 'file']"
s465,Linux File Creation In Profile Directory,"This analytic looks for suspicious file creation in /etc/profile.d directory to automatically execute scripts by shell upon boot up of a linux machine. This technique is commonly abused by adversaries, malware and red teamers as a persistence mechanism to the targeted or compromised host. This Anomaly detection is a good indicator that someone wants to run a code after boot up which can be done also by the administrator or network operator for automation purposes.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/etc/profile.d/*"") by Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_file_creation_in_profile_directory_filter`",70,"['T1546.004', 'T1546']","{'malware', 'kaiji'}",54.0,"['malware', 'anomaly', 'suspicious', 'compromised', 'scripts']"
s466,Linux Find Privilege Escalation,"Find is a command-line utility that locates files based on some user-specified criteria and either prints the pathname of each matched object or, if another action is requested, performs that action on each matched object. If sudo right is given to find utility for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*find*"" AND Processes.process=""*-exec*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_find_privilege_escalation_filter`",10,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['sudo', 'locates', 'root', 'commands', 'command']"
s467,Linux GDB Privilege Escalation,"GDB is the acronym for GNU Debugger. This tool helps to debug the programs written in C, C++, Ada, Fortran, etc. The console can be opened using the gdb command on terminal. If sudo right is given to GDB tool for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*gdb*"" AND Processes.process=""*-nx*"" AND Processes.process=""*-ex*!*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_gdb_privilege_escalation_filter`",20,"['T1548.003', 'T1548']","{'acronym', 'sudo'}",317.0,"['gdb', 'debugger', 'gnu', 'debug', 'sudo']"
s468,Linux Gem Privilege Escalation,"RubyGems is a package manager for the Ruby programming language that provides a standard format for distributing Ruby programs and libraries (in a self-contained format called a ""gem""), a tool designed to easily manage the installation of gems, and a server for distributing them. If sudo right is given to GEM utility for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*gem*open*-e*"" AND Processes.process=""*-c*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_gem_privilege_escalation_filter`",20,"['T1548.003', 'T1548']",{'sudo'},318.0,"['rubygems', 'ruby', 'gem', 'gems', 'sudo']"
s469,Linux GNU Awk Privilege Escalation,"gawk command in Linux is used for pattern scanning and processing language. The awk command requires no compiling and allows the user to use variables, numeric functions, string functions, and logical operators. It is a utility that enables programmers to write tiny and effective programs in the form of statements that define text patterns that are to be searched for, in a text document and the action that is to be taken when a match is found within a line. If sudo right is given to gawk tool for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*gawk*"" AND Processes.process=""*BEGIN*{system*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `linux_gnu_awk_privilege_escalation_filter`",60,"['T1548.003', 'T1548']",{'sudo'},319.0,"['gawk', 'awk', 'commands', 'command', 'sudo']"
s470,Linux High Frequency Of File Deletion In Boot Folder,This analytic is to detect a high frequency of file deletion relative to process name and process id /boot/ folder. These events was seen in industroyer2 wiper malware where it tries to delete all files in a critical directory in linux directory. This detection already contains some filter that might cause false positive during our testing.,"| tstats `security_content_summariesonly` values(Filesystem.file_name) as deletedFileNames values(Filesystem.file_path) as deletedFilePath dc(Filesystem.file_path) as numOfDelFilePath count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted Filesystem.file_path = ""/boot/*"" by _time span=1h  Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown NOT (Processes.parent_process_name IN (""/usr/bin/dpkg"", ""*usr/bin/python*"", ""*/usr/bin/apt-*"", ""/bin/rm"", ""*splunkd"", ""/usr/bin/mandb"")) by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid action _time  deletedFileNames deletedFilePath numOfDelFilePath parent_process_name parent_process  process_path dest user | where  numOfDelFilePath >= 200 | `linux_high_frequency_of_file_deletion_in_boot_folder_filter`",100,"['T1485', 'T1070.004', 'T1070']","{'malware', 'industroyer', 'industroyer2', 'wiper'}",54.0,"['malware', 'process', 'detection', 'detect', 'wiper']"
s471,Linux High Frequency Of File Deletion In Etc Folder,This analytic is to detect a high frequency of file deletion relative to process name and process id /etc/ folder. These events was seen in acidrain wiper malware where it tries to delete all files in a non-standard directory in linux directory. This detection already contains some filter that might cause false positive during our testing. But we recommend to add more filter if needed.,"| tstats `security_content_summariesonly` values(Filesystem.file_name) as deletedFileNames values(Filesystem.file_path) as deletedFilePath dc(Filesystem.file_path) as numOfDelFilePath count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.action=deleted Filesystem.file_path = ""/etc/*"" by _time span=1h  Filesystem.dest Filesystem.process_guid Filesystem.action | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid |join proc_guid, _time [ | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name != unknown NOT (Processes.parent_process_name IN (""/usr/bin/dpkg"", ""*usr/bin/python*"", ""*/usr/bin/apt-*"", ""/bin/rm"", ""*splunkd"", ""/usr/bin/mandb"")) by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table  process_name process proc_guid action _time  deletedFileNames deletedFilePath numOfDelFilePath parent_process_name parent_process  process_path dest user | where  numOfDelFilePath >= 200 | `linux_high_frequency_of_file_deletion_in_etc_folder_filter`",70,"['T1485', 'T1070.004', 'T1070']","{'malware', 'wiper', 'acidrain'}",,"['malware', 'process', 'deletion', 'detection', 'detect']"
s472,Linux Ingress Tool Transfer Hunting,The following analytic hunts for curl and wget being utilized in the environment. This is meant to help with identifying normal usage and potentially malicious. Utilize this query to tune other curl and wget analytics.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=curl OR Processes.process_name=wget) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_ingress_tool_transfer_hunting_filter`,10,['T1105'],{'curl'},142.0,"['wget', 'curl', 'analytics', 'malicious', 'utilize']"
s473,Linux Ingress Tool Transfer with Curl,"The following analytic identifies curl with the command-line switches that are commonly used to download, output, a remote script or binary. MetaSploit Framework will combine the -sO switch with | chmod +x to enable a simple one liner to download and set the execute bit to run the file immediately. During triage, review the remote domain and file being downloaded for legitimacy.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=curl by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process, ""(?i)(-O|-sO|-ksO|--output)"") | `linux_ingress_tool_transfer_with_curl_filter`",40,['T1105'],{'curl'},142.0,"['curl', 'metasploit', 'file', 'execute', 'downloaded']"
s474,Linux Insert Kernel Module Using Insmod Utility,This analytic looks for inserting of linux kernel module using insmod utility function. This event can detect a installation of rootkit or malicious kernel module to gain elevated privileges to their malicious code and bypassed detections. This Anomaly detection is a good indicator that someone installing kernel module in a linux host either admin or adversaries. filter is needed in this scenario,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN(""kmod"", ""sudo"") AND Processes.process = *insmod* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_insert_kernel_module_using_insmod_utility_filter`",80,"['T1547.006', 'T1547']","{'rootkit', 'sudo'}",320.0,"['rootkit', 'malicious', 'module', 'anomaly', 'kernel']"
s475,Linux Install Kernel Module Using Modprobe Utility,This analytic looks for possible installing a linux kernel module using modprobe utility function. This event can detect a installation of rootkit or malicious kernel module to gain elevated privileges to their malicious code and bypassed detections. This Anomaly detection is a good indicator that someone installing kernel module in a linux host either admin or adversaries. filter is needed in this scenario,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN(""kmod"", ""sudo"") AND Processes.process = *modprobe* by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_install_kernel_module_using_modprobe_utility_filter`",80,"['T1547.006', 'T1547']","{'rootkit', 'sudo'}",320.0,"['rootkit', 'kernel', 'malicious', 'detection', 'detect']"
s476,Linux Iptables Firewall Modification,This analytic looks for suspicious commandline that modify the iptables firewall setting of a linux machine. This technique was seen in cyclopsblink malware where it modifies the firewall setting of the compromised machine to allow traffic to its tcp port that will be used to communicate with its C2 server.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  Processes.process = ""*iptables *"" AND Processes.process = ""* --dport *"" AND Processes.process = ""* ACCEPT*"" AND Processes.process = ""*&amp;&gt;/dev/null*"" AND Processes.process = ""* tcp *"" AND NOT(Processes.parent_process_path IN(""/bin/*"", ""/lib/*"", ""/usr/bin/*"", ""/sbin/*"")) by Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid Processes.dest _time span=10s Processes.user Processes.parent_process_name  Processes.parent_process_path Processes.process_path | rex field=Processes.process ""--dport (?<port>3269|636|989|994|995|8443)"" | stats values(Processes.process) as processes_exec values(port) as ports values(Processes.process_guid) as guids values(Processes.process_id) as pids dc(port) as port_count count by Processes.process_name Processes.parent_process_name Processes.parent_process_id Processes.dest Processes.user Processes.parent_process_path Processes.process_path | where port_count >=3 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_iptables_firewall_modification_filter`",50,"['T1562.004', 'T1562']","{'cyclopsblink', 'rex', 'malware'}",54.0,"['malware', 'firewall', 'compromised', 'iptables', 'tcp']"
s477,Linux Java Spawning Shell,"The following analytic identifies the process name of Java, Apache, or Tomcat spawning a Linux shell. This is potentially indicative of exploitation of the Java application and may be related to current event CVE-2021-44228 (Log4Shell). The shells included in the macro are ""sh"", ""ksh"", ""zsh"", ""bash"", ""dash"", ""rbash"", ""fish"", ""csh', ""tcsh', ""ion"", ""eshell"". Upon triage, review parallel processes and command-line arguments to determine legitimacy.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=java OR Processes.parent_process_name=apache OR Processes.parent_process_name=tomcat `linux_shells` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_java_spawning_shell_filter`,80,['T1190'],"{'wiper', 'shell', 'cve-2021-44228'}",,"['shell', 'shells', 'bash', 'sh', 'tomcat']"
s478,Linux Kernel Module Enumeration,"The following analytic identifies the process kmod being utilized to list kernel modules in use. Typically, this is not seen as malicious, however it may be a precurser to the use of insmod to install a module.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=kmod Processes.process IN (""*lsmod*"", ""*list*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_kernel_module_enumeration_filter`",30,"['T1082', 'T1014']",,124.0,"['kmod', 'modules', 'kernel', 'module', 'insmod']"
s479,Linux Kworker Process In Writable Process Path,"This analytic looks for suspicious process kworker commandline in a linux machine. kworker process name or thread are common names of kernel threads in linux process. This hunting detections can lead to investigate process contains process path in writable directory in linux like /home/, /var/log and /tmp/. This technique was seen in cyclopsblink malware to blend its core and other of its child process as normal kworker on the compromised machine. This detection might be a good pivot to look for other IOC related to cyclopsblink malware or attacks.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  Processes.parent_process = ""*[kworker/*"" Processes.parent_process_path IN (""/home/*"", ""/tmp/*"", ""/var/log/*"") Processes.process=""*iptables*"" by  Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_path Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_kworker_process_in_writable_process_path_filter`",60,"['T1036.004', 'T1036']","{'cyclopsblink', 'malware'}",54.0,"['malware', 'kworker', 'compromised', 'suspicious', 'process']"
s480,Linux Make Privilege Escalation,"The Linux make command is used to build and maintain groups of programs and files from the source code. In Linux, it is one of the most frequently used commands by the developers. It assists developers to install and compile many utilities from the terminal. If sudo right is given to make utility for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*make*-s*"" AND Processes.process=""*--eval*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_make_privilege_escalation_filter`",40,"['T1548.003', 'T1548']",{'sudo'},321.0,"['make', 'sudo', 'linux', 'build', 'compile']"
s481,Linux MySQL Privilege Escalation,"MySQL is an open-source relational database management system. Its name is a combination of ""My"", the name of co-founder Michael Widenius's daughter My, and ""SQL"", the abbreviation for Structured Query Language. If sudo right is given to mysql utility for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*mysql*-e*"" AND Processes.process=""*\!**"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_mysql_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'sudo'}",322.0,"['mysql', 'sudo', 'database', 'root', 'sql']"
s482,Linux Node Privilege Escalation,"Node.js is a back-end JavaScript runtime environment that is open-source, cross-platform, runs on the V8 engine, and executes JavaScript code outside of a web browser. It was created to help create scalable network applications. If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*sudo*node*"" AND Processes.process=""*-e*"" AND Processes.process=""*child_process.spawn*"" AND Processes.process=""*stdio*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_node_privilege_escalation_filter`",80,"['T1548.003', 'T1548']","{'privilege', 'sudo'}",97.0,"['node', 'javascript', 'sudo', 'privileges', 'js']"
s483,Linux NOPASSWD Entry In Sudoers File,"This analytic is to look for suspicious command lines that may add entry to /etc/sudoers with NOPASSWD attribute in linux platform. This technique is commonly abuse by adversaries, malware author and red teamers to gain elevated privilege to the targeted or compromised host. /etc/sudoers file controls who can run what commands users can execute on the machines and can also control whether user need a password to execute particular commands. This file is composed of aliases (basically variables) and user specifications.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*NOPASSWD:*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_nopasswd_entry_in_sudoers_file_filter`",80,"['T1548.003', 'T1548']","{'malware', 'sudoers', 'password'}",323.0,"['sudoers', 'nopasswd', 'malware', 'compromised', 'password']"
s484,Linux Obfuscated Files or Information Base64 Decode,The following analytic identifies the use of base64 decode on Linux being utilized to deobfuscate a file. Identify the source of the file and determine if legitimate. Review parallel processes for further behavior before and after.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN (""*base64 -d*"",""*base64 --decode*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_obfuscated_files_or_information_base64_decode_filter`",30,['T1027'],,324.0,"['deobfuscate', 'base64', 'decode', 'file', 'linux']"
s485,Linux Octave Privilege Escalation,"GNU Octave is a high-level programming language primarily intended for scientific computing and numerical computation. Octave helps in solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB. If sudo right is given to the application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*octave-cli*"" AND Processes.process=""*--eval*"" AND Processes.process=""*system*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_octave_privilege_escalation_filter`",40,"['T1548.003', 'T1548']",{'sudo'},325.0,"['octave', 'matlab', 'gnu', 'programming', 'computing']"
s486,Linux OpenVPN Privilege Escalation,"OpenVPN is a virtual private network system that implements techniques to create secure point-to-point or site-to-site connections in routed or bridged configurations and remote access facilities. It implements both client and server applications. If sudo right is given to the OpenVPN application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*openvpn*"" AND Processes.process=""*--dev*"" AND Processes.process=""*--script-security*"" AND Processes.process=""*--up*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_openvpn_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'vpn', 'sudo'}",97.0,"['openvpn', 'root', 'sudo', 'user', 'client']"
s487,Linux Persistence and Privilege Escalation Risk Behavior,"The following correlation is specific to Linux persistence and privilege escalation tactics and is tied to two analytic stories and any Linux analytic tied to persistence and privilege escalation. These techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.","| tstats `security_content_summariesonly` count as risk_event_count, sum(All_Risk.calculated_risk_score) as risk_score, min(_time) as firstTime max(_time) as lastTime, values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count from datamodel=Risk.All_Risk where (All_Risk.analyticstories IN (""Linux Privilege Escalation"", ""Linux Persistence Techniques"") OR source = ""*Linux*"") All_Risk.annotations.mitre_attack.mitre_tactic IN (""persistence"", ""privilege-escalation"") All_Risk.risk_object_type=""system"" by All_Risk.risk_object, All_Risk.risk_object_type, source | `drop_dm_object_name(All_Risk)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | stats  values(source) as source, sum(risk_score) as risk_score, sum(risk_event_count) as risk_event_count, values(annotations.mitre_attack.mitre_tactic) as annotations.mitre_attack.mitre_tactic min(firstTime) as firstTime max(lastTime) as lastTime, values(annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count dc(source) as source_count by risk_object, risk_object_type | where distinct_detection_name >= 4 | `linux_persistence_and_privilege_escalation_risk_behavior_filter`",70,['T1548'],{'privilege'},326.0,"['persistence', 'persist', 'escalation', 'linux', 'privilege']"
s488,Linux PHP Privilege Escalation,"PHP is a general-purpose scripting language geared toward web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group. If sudo right is given to php application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*php*-r*"" AND Processes.process=""*system*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_php_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['php', 'sudo', 'scripting', 'programmer', 'root']"
s489,Linux pkexec Privilege Escalation,The following analytic identifies `pkexec` spawning with no command-line arguments. A vulnerability in Polkit's pkexec component identified as CVE-2021-4034 (PwnKit) which is present in the default configuration of all major Linux distributions and can be exploited to gain full root privileges on the system.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=pkexec by _time Processes.dest Processes.process_id Processes.parent_process_name Processes.process_name Processes.process Processes.process_path | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(^.{1}$)"" | `linux_pkexec_privilege_escalation_filter`",80,['T1068'],"{'cve-2021-4034', 'privilege'}",,"['pkexec', 'pwnkit', 'privileges', 'polkit', 'command']"
s490,Linux Possible Access Or Modification Of sshd Config File,"This analytic is to look for suspicious process command-line that might be accessing or modifying sshd_config. This file is the ssh configuration file that might be modify by threat actors or adversaries to redirect port connection, allow user using authorized key generated during attack. This anomaly detection might catch noise from administrator auditing or modifying ssh configuration file. In this scenario filter is needed","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN(""cat"", ""nano*"",""vim*"", ""vi*"")  AND Processes.process IN(""*/etc/ssh/sshd_config"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_access_or_modification_of_sshd_config_file_filter`",50,"['T1098.004', 'T1098']",{'ssh'},327.0,"['sshd_config', 'ssh', 'anomaly', 'suspicious', 'attack']"
s491,Linux Possible Access To Credential Files,"This analytic is to detect a possible attempt to dump or access the content of /etc/passwd and /etc/shadow to enable offline credential cracking. ""etc/passwd"" store user information within linux OS while ""etc/shadow"" contain the user passwords hash. Adversaries and threat actors may attempt to access this to gain persistence and/or privilege escalation. This anomaly detection can be a good indicator of possible credential dumping technique but it might catch some normal administrator automation scripts or during credential auditing. In this scenario filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN(""cat"", ""nano*"",""vim*"", ""vi*"")  AND Processes.process IN(""*/etc/shadow*"", ""*/etc/passwd*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_access_to_credential_files_filter`",50,"['T1003.008', 'T1003']",{'password'},169.0,"['passwd', 'credential', 'passwords', 'anomaly', 'auditing']"
s492,Linux Possible Access To Sudoers File,"This analytic is to detect a possible access or modification of /etc/sudoers file. ""/etc/sudoers"" file controls who can run what command as what users on what machine and can also control whether a specific user need a password for particular commands.  adversaries and threat actors abuse this file to gain persistence and/or privilege escalation during attack on targeted host.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN(""cat"", ""nano*"",""vim*"", ""vi*"")  AND Processes.process IN(""*/etc/sudoers*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_access_to_sudoers_file_filter`",50,"['T1548.003', 'T1548']","{'sudoers', 'privilege', 'password'}",127.0,"['sudoers', 'privilege', 'analytic', 'commands', 'password']"
s493,Linux Possible Append Command To At Allow Config File,"This analytic looks for suspicious commandline that may use to append user entry to /etc/at.allow or /etc/at.deny. These 2 files are commonly abused by malware, adversaries or red teamers to persist on the targeted or compromised host. These config file can restrict user that can only execute at application (another schedule task application in linux). attacker can create a user or add the compromised username to that config file to execute at to schedule it malicious code. This anomaly detection can be a good indicator to investigate further the entry in created config file and who created it to verify if it is a false positive.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where Processes.process = ""*echo*"" AND Processes.process IN(""*/etc/at.allow"", ""*/etc/at.deny"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_append_command_to_at_allow_config_file_filter`",30,"['T1053.002', 'T1053']",{'malware'},54.0,"['malware', 'compromised', 'anomaly', 'attacker', 'malicious']"
s494,Linux Possible Append Command To Profile Config File,"This analytic looks for suspicious command-lines that can be possibly used to modify user profile files to automatically execute scripts/executables by shell upon reboot of the machine. This technique is commonly abused by adversaries, malware and red teamers as persistence mechanism to the targeted or compromised host. This Anomaly detection is a good indicator that someone wants to run code after reboot which can be done also by the administrator or network operator for automation purposes.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*echo*"" AND Processes.process IN(""*~/.bashrc"", ""*~/.bash_profile"", ""*/etc/profile"", ""~/.bash_login"", ""*~/.profile"", ""~/.bash_logout"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_append_command_to_profile_config_file_filter`",70,"['T1546.004', 'T1546']",{'malware'},54.0,"['malware', 'executables', 'anomaly', 'scripts', 'compromised']"
s495,Linux Possible Append Cronjob Entry on Existing Cronjob File,"This analytic looks for possible suspicious commandline that may use to append a code to any existing cronjob files for persistence or privilege escalation. This technique is commonly abused by malware, adversaries and red teamers to automatically execute their code within a existing or sometimes in normal cronjob script file.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where Processes.process = ""*echo*"" AND Processes.process IN(""*/etc/cron*"", ""*/var/spool/cron/*"", ""*/etc/anacrontab*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_append_cronjob_entry_on_existing_cronjob_file_filter`",70,"['T1053.003', 'T1053']","{'malware', 'kinsing', 'kaiji'}",0.0,"['cronjob', 'malware', 'script', 'execute', 'commandline']"
s496,Linux Possible Cronjob Modification With Editor,This analytic looks for possible modification of cronjobs file using editor. This event is can be seen in normal user but can also be a good hunting indicator for unwanted user modifying cronjobs for possible persistence or privilege escalation.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name IN(""nano"",""vim.basic"") OR Processes.process IN (""*nano *"", ""*vi *"", ""*vim *"")) AND Processes.process IN(""*/etc/cron*"", ""*/var/spool/cron/*"", ""*/etc/anacrontab*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_cronjob_modification_with_editor_filter`",20,"['T1053.003', 'T1053']",,7.0,"['cronjobs', 'modification', 'event', 'modifying', 'editor']"
s497,Linux Possible Ssh Key File Creation,This analytic is to look for possible ssh key file creation on ~/.ssh/ folder. This technique is commonly abused by threat actors and adversaries to gain persistence and privilege escalation to the targeted host. by creating ssh private and public key and passing the public key to the attacker server. threat actor can access remotely the machine using openssh daemon service.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*/.ssh*"") by Filesystem.dest Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_possible_ssh_key_file_creation_filter`",60,"['T1098.004', 'T1098']",{'ssh'},106.0,"['openssh', 'ssh', 'attacker', 'daemon', 'threat']"
s498,Linux Preload Hijack Library Calls,"This analytic is to detect a suspicious command that may hijack a library function in linux platform. This technique is commonly abuse by adversaries, malware author and red teamers to gain privileges and persist on the machine. This detection pertains to loading a dll to hijack or hook a library function of specific program using LD_PRELOAD command.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*LD_PRELOAD*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_preload_hijack_library_calls_filter`",80,"['T1574.006', 'T1574']","{'malware', 'dll', 'hook'}",328.0,"['ld_preload', 'dll', 'malware', 'library', 'analytic']"
s499,Linux Proxy Socks Curl,"The following analytic identifies curl being utilized with a proxy based on command-line arguments - -x, socks, --preproxy and --proxy. This behavior is built into the MetaSploit Framework as a auxiliary module. What does socks buy an adversary? SOCKS4a extends the SOCKS4 protocol to allow a client to specify a destination domain name rather than an IP address. The SOCKS5 protocol is defined in RFC 1928. It is an incompatible extension of the SOCKS4 protocol; it offers more choices for authentication and adds support for IPv6 and UDP, the latter of which can be used for DNS lookups. The protocols, and a proxy itself, allow an adversary to evade controls in place monitoring traffic, making it harder for the defender to identify and track activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=curl Processes.process IN (""*-x *"", ""*socks4a://*"", ""*socks5h://*"", ""*socks4://*"",""*socks5://*"", ""*--preproxy *"", ""--proxy*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_proxy_socks_curl_filter`",70,"['T1090', 'T1095']",,329.0,"['proxy', 'socks4', 'socks', 'preproxy', 'socks4a']"
s500,Linux Puppet Privilege Escalation,"In computing, Puppet is a software configuration management tool which includes its own declarative language to describe system configuration. It is a model-driven solution that requires limited programming knowledge to use. If sudo right is given to the tool for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*puppet*"" AND Processes.process=""*apply*"" AND Processes.process=""*-e*"" AND Processes.process=""*exec*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_puppet_privilege_escalation_filter`",10,"['T1548.003', 'T1548']","{'root', 'shell', 'sudo'}",330.0,"['puppet', 'sudo', 'root', 'shell', 'commands']"
s501,Linux RPM Privilege Escalation,"RPM Package Manager is a free and open-source package management system. The name RPM refers to the .rpm file format and the package manager program itself. RPM was intended primarily for Linux distributions; the file format is the baseline package format of the Linux Standard Base. If sudo right is given to rpm utility for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*rpm*--eval*"" AND Processes.process=""*lua:os.execute*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_rpm_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'sudo'}",97.0,"['rpm', 'root', 'sudo', 'manager', 'package']"
s502,Linux Ruby Privilege Escalation,"Ruby is one of the most used and easy to use programming languages. Ruby is an open-source, object-oriented interpreter that can be installed on a Linux system. If sudo right is given to ruby application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*ruby*-e*"" AND Processes.process=""*exec*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_ruby_privilege_escalation_filter`",60,"['T1548.003', 'T1548']",{'sudo'},331.0,"['ruby', 'interpreter', 'sudo', 'programming', 'linux']"
s503,Linux Service File Created In Systemd Directory,"This analytic looks for suspicious file creation in systemd timer directory in linux platform. systemd is a system and service manager for Linux distributions. From the Windows perspective, this process fulfills the duties of wininit.exe and services.exe combined. At the risk of simplifying the functionality of systemd, it initializes a Linux system and starts relevant services that are defined in service unit files. Adversaries, malware and red teamers may abuse this this feature by stashing systemd service file to persist on the targetted or compromised host.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name = *.service Filesystem.file_path IN (""*/etc/systemd/system*"", ""*/lib/systemd/system*"", ""*/usr/lib/systemd/system*"", ""*/run/systemd/system*"", ""*~/.config/systemd/*"", ""*~/.local/share/systemd/*"",""*/etc/systemd/user*"", ""*/lib/systemd/user*"", ""*/usr/lib/systemd/user*"", ""*/run/systemd/user*"") by Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_service_file_created_in_systemd_directory_filter`",80,"['T1053.006', 'T1053']","{'malware', 'kaiji', 'systemd'}",,"['systemd', 'malware', 'file', 'wininit', 'process']"
s504,Linux Service Restarted,"This analytic looks for restarted or re-enable services in linux platform. This technique can be executed or performed using systemctl or service tool application. Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Administrator may also create a legitimated service for a specific tool or normal application as part of task or automation, in this scenario it is suggested to look for the service path of the actual script or executable that register as service and who created the service for further verification.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name IN (""systemctl"", ""service"") OR Processes.process IN (""*systemctl *"", ""*service *"")) Processes.process IN (""*restart*"", ""*reload*"", ""*reenable*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_service_restarted_filter`",50,"['T1053.006', 'T1053']",{'systemctl'},271.0,"['systemctl', 'executable', 'services', 'service', 'malicious']"
s505,Linux Service Started Or Enabled,"This analytic looks for created or enable services in linux platform. This technique can be executed or performed using systemctl or service tool application. Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Administrator may also create a legitimated service for a specific tool or normal application as part of task or automation, in this scenario it is suggested to look for the service path of the actual script or executable that register as service and who created the service for further verification.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name IN (""systemctl"", ""service"") OR Processes.process IN (""*systemctl *"", ""*service *"")) Processes.process IN (""* start *"", ""* enable *"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_service_started_or_enabled_filter`",60,"['T1053.006', 'T1053']",{'systemctl'},271.0,"['systemctl', 'executable', 'services', 'service', 'application']"
s506,Linux Setuid Using Chmod Utility,"This analytic looks for suspicious chmod utility execution to enable SUID bit. This allows a user to temporarily gain root access, usually in order to run a program. For example, only the root account is allowed to change the password information contained in the password database; If the SUID bit appears as an s, the file's owner also has execute permission to the file; if it appears as an S, the file's owner does not have execute permission. The second specialty permission is the SGID, or set group id bit. It is similar to the SUID bit, except it can temporarily change group membership, usually to execute a program. The SGID bit is set if an s or an S appears in the group section of permissions.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes WHERE (Processes.process_name = chmod OR Processes.process = ""*chmod *"") AND Processes.process IN(""* g+s *"", ""* u+s *"", ""* 4777 *"", ""* 4577 *"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_setuid_using_chmod_utility_filter`",70,"['T1548.001', 'T1548']","{'permission', 'suid'}",2.0,"['chmod', 'suid', 'permission', 'permissions', 'sgid']"
s507,Linux Setuid Using Setcap Utility,"This analytic looks for suspicious setcap utility execution to enable SUID bit. This allows a user to temporarily gain root access, usually in order to run a program. For example, only the root account is allowed to change the password information contained in the password database; If the SUID bit appears as an s, the file's owner also has execute permission to the file; if it appears as an S, the file's owner does not have execute permission. The second specialty permission is the SGID, or set group id bit. It is similar to the SUID bit, except it can temporarily change group membership, usually to execute a program. The SGID bit is set if an s or an S appears in the group section of permissions.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = setcap OR Processes.process = ""*setcap *"") AND Processes.process IN (""* cap_setuid=ep *"", ""* cap_setuid+ep *"", ""* cap_net_bind_service+p *"", ""* cap_net_raw+ep *"", ""* cap_dac_read_search+ep *"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_setuid_using_setcap_utility_filter`",70,"['T1548.001', 'T1548']","{'permission', 'suid'}",2.0,"['suid', 'permissions', 'permission', 'sgid', 'setcap']"
s508,Linux Shred Overwrite Command,"This analytic is to detect a shred process to overwrite a files in a linux machine. Shred Linux application is designed to overwrite file to hide its contents or make the deleted file un-recoverable. Weve seen this technique in industroyer2 malware that tries to wipe energy facilities of targeted sector as part of its destructive attack. It might be some normal user may use this command for valid purposes but it is recommended to check what files, disk or folder it tries to shred that might be good pivot for incident response in this type of destructive malware.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name =shred AND Processes.process IN (""*-n*"", ""*-u*"", ""*-z*"", ""*-s*"") by Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_shred_overwrite_command_filter`",70,['T1485'],"{'malware', 'industroyer', 'industroyer2'}",332.0,"['shred', 'destructive', 'malware', 'process', 'file']"
s509,Linux Sqlite3 Privilege Escalation,"sqlite3 is a terminal-based front-end to the SQLite library that can evaluate queries interactively and display the results in multiple formats. sqlite3 can also be used within shell scripts and other applications to provide batch processing features. If sudo right is given to this application for the user, then the user can run system commands as root and possibly get a root shell.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process=""*sqlite3*"" AND Processes.process=""*.shell*"" AND Processes.process=""*sudo*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_sqlite3_privilege_escalation_filter`",60,"['T1548.003', 'T1548']","{'root', 'sudo'}",208.0,"['sqlite3', 'sqlite', 'sudo', 'commands', 'root']"
s510,Linux SSH Authorized Keys Modification,"The following analytic identifies based on process execution the modification of SSH Authorized Keys. Adversaries perform this behavior to persist on endpoints. During triage, review parallel processes and capture any additional file modifications for review.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  Processes.process_name IN (""bash"",""cat"") Processes.process IN (""*/authorized_keys*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_ssh_authorized_keys_modification_filter`",30,['T1098.004'],{'ssh'},193.0,"['authorized', 'ssh', 'execution', 'modification', 'modifications']"
s511,Linux SSH Remote Services Script Execute,The following analytic identifies SSH being utilized to move laterally and execute a script or file on the remote host.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  Processes.process_name=ssh Processes.process IN (""*oStrictHostKeyChecking*"", ""*oConnectTimeout*"", ""*oBatchMode*"") AND CommandLine IN (""*http:*"",""*https:*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_ssh_remote_services_script_execute_filter`",80,['T1021.004'],{'ssh'},193.0,"['ssh', 'analytic', 'script', 'remote', 'execute']"
s512,Linux Stop Services,The following analytic is to detect events that attempt to stop or clear a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then delete it. Adversaries utilize this technique like industroyer2 malware to terminate security services or other related services to continue there objective as a destructive payload.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN (""systemctl"", ""service"", ""svcadm"")  Processes.process =""*stop*"" by Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_stop_services_filter`",70,['T1489'],"{'malware', 'industroyer', 'industroyer2', 'stop'}",271.0,"['terminate', 'service', 'malware', 'services', 'detect']"
s513,Linux Sudoers Tmp File Creation,"This analytic is to looks for file creation of sudoers.tmp file cause by editing /etc/sudoers using visudo or editor in linux platform. This technique may abuse by adversaries, malware author and red teamers to gain elevated privilege to targeted or compromised host. /etc/sudoers file controls who can run what commands as what users on what machines and can also control special things such as whether you need a password for particular commands. The file is composed of aliases (basically variables) and user specifications (which control who can run what).","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*sudoers.tmp*"") by Filesystem.dest Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_sudoers_tmp_file_creation_filter`",80,"['T1548.003', 'T1548']","{'malware', 'sudoers', 'sudo', 'privilege'}",323.0,"['sudoers', 'malware', 'tmp', 'privilege', 'compromised']"
s514,Linux Sudo OR Su Execution,"This analytic is to detect the execution of sudo or su command in linux operating system. The ""sudo"" command allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments. This command is commonly abused by adversaries, malware author and red teamers to elevate privileges to the targeted host. This command can be executed by administrator for legitimate purposes or to execute process that need admin privileges, In this scenario filter is needed.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN (""sudo"", ""su"") OR Processes.parent_process_name IN (""sudo"", ""su"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_sudo_or_su_execution_filter`",30,"['T1548.003', 'T1548']","{'root', 'privilege', 'sudo'}",97.0,"['sudo', 'privileges', 'root', 'su', 'administrator']"
s515,Linux System Network Discovery,This analytic is to look for possible enumeration of local network configuration. This technique is commonly used as part of recon of adversaries or threat actor to know some network information for its next or further attack. This anomaly detections may capture normal event made by administrator during auditing or testing network connection of specific host or network to network.,"| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name_list values(Processes.process) as process_list values(Processes.process_id) as process_id_list values(Processes.parent_process_id) as parent_process_id_list values(Processes.process_guid) as process_guid_list dc(Processes.process_name) as process_name_count from datamodel=Endpoint.Processes where Processes.process_name IN (""arp"", ""ifconfig"", ""ip"", ""netstat"", ""firewall-cmd"", ""ufw"", ""iptables"", ""ss"", ""route"") by _time span=30m Processes.dest Processes.user | where process_name_count >=4 | `drop_dm_object_name(Processes)`| `linux_system_network_discovery_filter`",30,['T1016'],"{'industroyer2', 'netstat', 'ifconfig', 'network', 'arp', 'route'}",,"['network', 'detections', 'anomaly', 'attack', 'auditing']"
s516,Linux Visudo Utility Execution,"This analytic is to looks for suspicious commandline that add entry to /etc/sudoers by using visudo utility tool in linux platform. This technique may abuse by adversaries, malware author and red teamers to gain elevated privilege to targeted or compromised host. /etc/sudoers file controls who can run what commands as what users on what machines and can also control special things such as whether you need a password for particular commands. The file is composed of aliases (basically variables) and user specifications (which control who can run what).",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = visudo by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_visudo_utility_execution_filter`,40,"['T1548.003', 'T1548']","{'malware', 'sudoers', 'privilege'}",323.0,"['sudoers', 'malware', 'visudo', 'compromised', 'privilege']"
s517,Living Off The Land,The following correlation identifies a distinct amount of analytics associated with the Living Off The Land analytic story that identify potentially suspicious behavior.,"| tstats `security_content_summariesonly` count as risk_event_count, sum(All_Risk.calculated_risk_score) as risk_score, min(_time) as firstTime max(_time) as lastTime, values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count from datamodel=Risk.All_Risk where All_Risk.analyticstories=""Living Off The Land"" All_Risk.risk_object_type=""system"" by All_Risk.risk_object, All_Risk.risk_object_type, source | `drop_dm_object_name(All_Risk)` | stats  values(source) as source, sum(risk_score) as risk_score, sum(risk_event_count) as risk_event_count, values(annotations.mitre_attack.mitre_tactic) as annotations.mitre_attack.mitre_tactic min(firstTime) as firstTime max(lastTime) as lastTime, values(annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count dc(source) as source_count by risk_object, risk_object_type | where source_count >= 5 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `living_off_the_land_filter`",90,"['T1105', 'T1190', 'T1059']",,333.0,"['analytics', 'behavior', 'correlation', 'suspicious', 'land']"
s518,Loading Of Dynwrapx Module,"DynamicWrapperX is an ActiveX component that can be used in a script to call Windows API functions, but it requires the dynwrapx.dll to be installed and registered. With that, registering or loading dynwrapx.dll to a host is highly suspicious. In most instances when it is used maliciously, the best way to triage is to review parallel processes and pivot on the process_guid. Review the registry for any suspicious modifications meant to load dynwrapx.dll. Identify any suspicious module loads of dynwrapx.dll. This detection will return and identify the processes that invoke vbs/wscript/cscript.","`sysmon` EventCode=7 (ImageLoaded = ""*\\dynwrapx.dll"" OR OriginalFileName = ""dynwrapx.dll"" OR  Product = ""DynamicWrapperX"") | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded OriginalFileName Product process_name Computer EventCode Signed ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `loading_of_dynwrapx_module_filter`",80,"['T1055', 'T1055.001']","{'dll', 'remcos', 'koadic'}",,"['dynamicwrapperx', 'dynwrapx', 'dll', 'wscript', 'cscript']"
s519,Local Account Discovery with Net,"This analytic looks for the execution of `net.exe` or `net1.exe` with command-line arguments utilized to query for local users. The two arguments `user` and 'users', return a list of all local users. Red Teams and adversaries alike use net.exe to enumerate users for situational awareness and Active Directory Discovery.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` (Processes.process=*user OR Processes.process=*users) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `local_account_discovery_with_net_filter`,30,"['T1087', 'T1087.001']","{'net.exe', 'exe'}",163.0,"['exe', 'users', 'net', 'net1', 'user']"
s520,Local Account Discovery With Wmic,This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to query for local users. The argument `useraccount` is used to leverage WMI to return a list of all local users. Red Teams and adversaries alike use net.exe to enumerate users for situational awareness and Active Directory Discovery.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` (Processes.process=*useraccount*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `local_account_discovery_with_wmic_filter`,30,"['T1087', 'T1087.001']","{'net.exe', 'exe', 'leverage', 'wmi'}",23.0,"['wmi', 'wmic', 'useraccount', 'exe', 'users']"
s521,Log4Shell CVE-2021-44228 Exploitation,"This correlation find exploitation of Log4Shell CVE-2021-44228 against systems using detections from Splunk Security Content Analytic Story. It does this by calculating the distinct count of MITRE ATT&CK tactics from Log4Shell detections fired. If the count is larger than 2 or more distinct MITRE ATT&CK tactics we assume high problability of exploitation. The Analytic story breaks down into 3 major phases of a Log4Shell exploitation, specifically> Initial Payload delivery eg. `${jndi:ldap://PAYLOAD_INJECTED}` Call back to malicious LDAP server eg. Exploit.class Post Exploitation Activity/Lateral Movement using Powershell or similar T1562.001 Each of these phases fall into different MITRE ATT&CK Tactics (Initial Access, Execution, Command and Control), by looking into 2 or more phases showing up in detections triggerd is how this correlation search finds exploitation. If we get a notable from this correlation search the best way to triage it is by investigating the affected systems against Log4Shell exploitation using Splunk SOAR playbooks.","| tstats `security_content_summariesonly` count as risk_event_count, sum(All_Risk.calculated_risk_score) as risk_score, min(_time) as firstTime max(_time) as lastTime, values(All_Risk.annotations.mitre_attack.mitre_tactic_id) as annotations.mitre_attack.mitre_tactic_id, dc(All_Risk.annotations.mitre_attack.mitre_tactic_id) as mitre_tactic_id_count, values(All_Risk.annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(All_Risk.annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count from datamodel=Risk.All_Risk where All_Risk.analyticstories=""Log4Shell CVE-2021-44228"" All_Risk.risk_object_type=""system"" by All_Risk.risk_object, All_Risk.risk_object_type, source | `drop_dm_object_name(All_Risk)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | stats  values(source) as source, sum(risk_score) as risk_score, sum(risk_event_count) as risk_event_count, values(annotations.mitre_attack.mitre_tactic) as annotations.mitre_attack.mitre_tactic min(firstTime) as firstTime max(lastTime) as lastTime, values(annotations.mitre_attack.mitre_technique_id) as annotations.mitre_attack.mitre_technique_id, dc(annotations.mitre_attack.mitre_technique_id) as mitre_technique_id_count dc(source) as source_count by risk_object, risk_object_type | where distinct_tactics >= 2 | `log4shell_cve_2021_44228_exploitation_filter`",90,"['T1105', 'T1190', 'T1059']","{'cve-2021-44228', 'powershell'}",,"['splunk', 'log4shell', 'exploit', 'exploitation', 'tactics']"
s522,Logon Script Event Trigger Execution,This search is to detect a suspicious modification of registry entry to persist and gain privilege escalation upon booting up of compromised host. This technique was seen in several APT and malware where it modify UserInitMprLogonScript registry entry to its malicious payload to be executed upon boot up of the machine.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path IN (""*\\Environment\\UserInitMprLogonScript"") by Registry.dest  Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `logon_script_event_trigger_execution_filter`",80,"['T1037', 'T1037.001']","{'malware', 'wiper', 'registry modification'}",,"['malware', 'registry', 'malicious', 'userinitmprlogonscript', 'compromised']"
s523,MacOS LOLbin,Detect multiple executions of Living off the Land (LOLbin) binaries in a short period of time.,"`osquery` name=es_process_events columns.cmdline IN (""find*"", ""crontab*"", ""screencapture*"", ""openssl*"", ""curl*"", ""wget*"", ""killall*"", ""funzip*"") | rename columns.* as * | stats  min(_time) as firstTime max(_time) as lastTime values(cmdline) as cmdline, values(pid) as pid, values(parent) as parent, values(path) as path, values(signing_id) as signing_id,  dc(path) as dc_path by username host | rename username as User, cmdline as process, path as process_path | where dc_path > 3 | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `macos_lolbin_filter`",50,"['T1059.004', 'T1059']",{'lolbin'},334.0,"['executions', 'binaries', 'detect', 'lolbin', 'land']"
s524,MacOS plutil,Detect usage of plutil to modify plist files. Adversaries can modiy plist files to executed binaries or add command line arguments. Plist files in auto-run locations are executed upon user logon or system startup.,"`osquery` name=es_process_events columns.path=/usr/bin/plutil | rename columns.* as * | stats count  min(_time) as firstTime max(_time) as lastTime by username host cmdline pid path parent signing_id | rename username as User, cmdline as process, path as process_path | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `macos_plutil_filter`",50,['T1647'],,66.0,"['plist', 'plutil', 'binaries', 'files', 'command']"
s525,Mailsniper Invoke functions,This search is to detect known mailsniper.ps1 functions executed in a machine. This technique was seen in some attacker to harvest some sensitive e-mail in a compromised exchange server.,"`powershell` EventCode=4104 ScriptBlockText IN (""*Invoke-GlobalO365MailSearch*"", ""*Invoke-GlobalMailSearch*"", ""*Invoke-SelfSearch*"", ""*Invoke-PasswordSprayOWA*"", ""*Invoke-PasswordSprayEWS*"",""*Invoke-DomainHarvestOWA*"", ""*Invoke-UsernameHarvestOWA*"",""*Invoke-OpenInboxFinder*"",""*Invoke-InjectGEventAPI*"",""*Invoke-InjectGEvent*"",""*Invoke-SearchGmail*"", ""*Invoke-MonitorCredSniper*"", ""*Invoke-AddGmailRule*"",""*Invoke-PasswordSprayEAS*"",""*Invoke-UsernameHarvestEAS*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mailsniper_invoke_functions_filter`",90,"['T1114', 'T1114.001']","{'mailsniper', 'ps1'}",335.0,"['mailsniper', 'ps1', 'compromised', 'detect', 'search']"
s526,Malicious InProcServer32 Modification,"The following analytic identifies a process modifying the registry with a known malicious CLSID under InProcServer32. Most COM classes are registered with the operating system and are identified by a GUID that represents the Class Identifier (CLSID) within the registry (usually under HKLM\\Software\\Classes\\CLSID or HKCU\\Software\\Classes\\CLSID).  Behind the implementation of a COM class is the server (some binary) that is referenced within registry keys under the CLSID.  The LocalServer32 key represents a path to an executable (exe) implementation, and the InprocServer32 key represents a path to a dynamic link library (DLL) implementation (Bohops). During triage, review parallel processes for suspicious activity. Pivot on the process GUID to see the full timeline of events. Analyze the value and look for file modifications. Being this is looking for inprocserver32, a DLL found in the value will most likely be loaded by a parallel process.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time Processes.process_id Processes.process_name Processes.dest Processes.process_guid Processes.user | `drop_dm_object_name(Processes)` | join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\CLSID\\{89565275-A714-4a43-912E-978B935EDCCC}\\InProcServer32\\(Default)"" by Registry.registry_path Registry.registry_key_name Registry.registry_value_name Registry.dest Registry.process_guid Registry.user | `drop_dm_object_name(Registry)` | fields _time dest registry_path registry_key_name registry_value_name process_name process_path process process_guid user] | stats count min(_time) as firstTime max(_time) as lastTime by dest, process_name registry_path registry_key_name registry_value_name user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `malicious_inprocserver32_modification_filter`",80,"['T1218.010', 'T1112']","{'dll', 'registry modification', 'remcos'}",,"['inprocserver32', 'dll', 'registry', 'executable', 'localserver32']"
s527,Malicious Powershell Executed As A Service,This detection is to identify the abuse the Windows SC.exe to execute malicious commands or payloads via PowerShell.," `wineventlog_system` EventCode=7045 | eval l_Service_File_Name=lower(Service_File_Name) | regex l_Service_File_Name=""powershell[.\s]|powershell_ise[.\s]|pwsh[.\s]|psexec[.\s]"" | regex l_Service_File_Name=""-nop[rofile\s]+|-w[indowstyle]*\s+hid[den]*|-noe[xit\s]+|-enc[odedcommand\s]+"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type Service_Account user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `malicious_powershell_executed_as_a_service_filter`",90,"['T1569', 'T1569.002']","{'exe', 'powershell', 'psexec'}",5.0,"['powershell', 'malicious', 'exe', 'detection', 'sc']"
s528,Malicious PowerShell Process With Obfuscation Techniques,This search looks for PowerShell processes launched with arguments that have characters indicative of obfuscation on the command-line.,"| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` by Processes.user Processes.process_name Processes.original_file_name Processes.parent_process_name Processes.dest Processes.process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| eval num_obfuscation = (mvcount(split(process,""`""))-1) + (mvcount(split(process, ""^""))-1) + (mvcount(split(process, ""'""))-1) | `malicious_powershell_process_with_obfuscation_techniques_filter` | search num_obfuscation > 10 ",70,"['T1059', 'T1059.001']","{'wiper', 'powershell'}",,"['powershell', 'obfuscation', 'command', 'processes', 'characters']"
s529,Malicious PowerShell Process - Encoded Command,"The following analytic identifies the use of the EncodedCommand PowerShell parameter. This is typically used by Administrators to run complex scripts, but commonly used by adversaries to hide their code. \
The analytic identifies all variations of EncodedCommand, as PowerShell allows the ability to shorten the parameter. For example enc, enco, encod and so forth. In addition, through our research it was identified that PowerShell will interpret different command switch types beyond the hyphen. We have added endash, emdash, horizontal bar, and forward slash. \
During triage, review parallel events to determine legitimacy. Tune as needed based on admin scripts in use. \
Alternatively, may use regex per matching here https://regexr.com/662ov.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.dest Processes.process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,""(?i)[\-|\/|–|—|―]e(nc*o*d*e*d*c*o*m*m*a*n*d*)*\s+[^-]"") | `malicious_powershell_process___encoded_command_filter`",70,['T1027'],"{'powershell', 'whispergate', 'wiper', 'ps1', 'nobelium'}",,"['powershell', 'encodedcommand', 'regexr', 'regex', 'command']"
s530,Malicious PowerShell Process - Execution Policy Bypass,This search looks for PowerShell processes started with parameters used to bypass the local execution policy for scripts. These parameters are often observed in attacks leveraging PowerShell scripts as they override the default PowerShell execution policy.,"| tstats `security_content_summariesonly` values(Processes.process_id) as process_id, values(Processes.parent_process_id) as parent_process_id values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=""* -ex*"" OR Processes.process=""* bypass *"") by Processes.process_id, Processes.user, Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `malicious_powershell_process___execution_policy_bypass_filter`",70,"['T1059', 'T1059.001']","{'hafnium', 'powershell'}",,"['powershell', 'scripts', 'execution', 'processes', 'attacks']"
s531,Mimikatz PassTheTicket CommandLine Parameters,"The following analytic looks for the use of Mimikatz command line parameters leveraged to execute pass the ticket attacks. Red teams and adversaries alike may use the pass the ticket technique using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Defenders should be aware that adversaries may customize the source code of Mimikatz and modify the command line parameters. This would effectively bypass this analytic.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process = ""*sekurlsa::tickets /export*"" OR Processes.process = ""*kerberos::ptt*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mimikatz_passtheticket_commandline_parameters_filter`",60,"['T1550', 'T1550.003']",{'mimikatz'},,"['ticket', 'attacks', 'defenders', 'tickets', 'adversaries']"
s532,Mmc LOLBAS Execution Process Spawn,"The following analytic identifies `mmc.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the DCOM protocol and the MMC20 COM object, the executed command is spawned as a child processs of `mmc.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of mmc.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=mmc.exe) (Processes.process_name IN (""Regsvcs.exe"", ""Ftp.exe"", ""OfflineScannerShell.exe"", ""Rasautou.exe"", ""Schtasks.exe"", ""Xwizard.exe"", ""Dllhost.exe"", ""Pnputil.exe"", ""Atbroker.exe"", ""Pcwrun.exe"", ""Ttdinject.exe"",""Mshta.exe"", ""Bitsadmin.exe"", ""Certoc.exe"", ""Ieexec.exe"", ""Microsoft.Workflow.Compiler.exe"", ""Runscripthelper.exe"", ""Forfiles.exe"", ""Msbuild.exe"", ""Register-cimprovider.exe"", ""Tttracer.exe"", ""Ie4uinit.exe"", ""Bash.exe"", ""Hh.exe"", ""SettingSyncHost.exe"", ""Cmstp.exe"", ""Mmc.exe"", ""Stordiag.exe"", ""Scriptrunner.exe"", ""Odbcconf.exe"", ""Extexport.exe"", ""Msdt.exe"", ""WorkFolders.exe"", ""Diskshadow.exe"", ""Mavinject.exe"", ""Regasm.exe"", ""Gpscript.exe"", ""Rundll32.exe"", ""Regsvr32.exe"", ""Msiexec.exe"", ""Wuauclt.exe"", ""Presentationhost.exe"", ""Wmic.exe"", ""Runonce.exe"", ""Syncappvpublishingserver.exe"", ""Verclsid.exe"", ""Infdefaultinstall.exe"", ""Explorer.exe"", ""Installutil.exe"", ""Netsh.exe"", ""Wab.exe"", ""Dnscmd.exe"", ""At.exe"", ""Pcalua.exe"", ""Msconfig.exe"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mmc_lolbas_execution_process_spawn_filter`",90,"['T1021', 'T1021.003', 'T1218.014']","{'netsh', 'schtasks', 'forfiles', 'bitsadmin', 'msbuild', 'rundll32', 'ftp'}",,"['processes', 'mmc', 'processs', 'mmc20', 'process']"
s533,Modification Of Wallpaper,This analytic identifies suspicious modification of registry to deface or change the wallpaper of a compromised machines as part of its payload. This technique was commonly seen in ransomware like REVIL where it create a bitmap file contain a note that the machine was compromised and make it as a wallpaper.,"`sysmon` EventCode =13  (TargetObject= ""*\\Control Panel\\Desktop\\Wallpaper"" AND Image != ""*\\explorer.exe"") OR (TargetObject= ""*\\Control Panel\\Desktop\\Wallpaper"" AND Details = ""*\\temp\\*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Image TargetObject Details  Computer process_guid process_id user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `modification_of_wallpaper_filter`",60,['T1491'],"{'registry modification', 'blackmatter', 'sodinokibi', 'revil', 'darkside'}",,"['wallpaper', 'ransomware', 'registry', 'bitmap', 'compromised']"
s534,Modify ACL permission To Files Or Folder,This analytic identifies suspicious modification of ACL permission to a files or folder to make it available to everyone. This technique may be used by the adversary to evade ACLs or protected files access. This changes is commonly configured by the file or directory owner with appropriate permission. This behavior is a good indicator if this command seen on a machine utilized by an account with no permission to do so.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = ""cacls.exe"" OR Processes.process_name = ""icacls.exe"" OR Processes.process_name = ""xcacls.exe"") AND Processes.process = ""*/G*"" AND (Processes.process = ""* everyone:*""  OR Processes.process = ""* SYSTEM:*"" OR Processes.process = ""* S-1-1-0:*"") by Processes.parent_process_name Processes.process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `modify_acl_permission_to_files_or_folder_filter`",40,['T1222'],{'permission'},336.0,"['acl', 'permission', 'acls', 'analytic', 'behavior']"
s535,Monitor Registry Keys for Print Monitors,"This search looks for registry activity associated with modifications to the registry key `HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors`. In this scenario, an attacker can load an arbitrary .dll into the print-monitor registry by giving the full path name to the after.dll. The system will execute the .dll with elevated (SYSTEM) permissions and will persist after reboot.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.action=modified AND Registry.registry_path=""*CurrentControlSet\\Control\\Print\\Monitors*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `monitor_registry_keys_for_print_monitors_filter`",80,"['T1547.010', 'T1547']","{'dll', 'registry modification'}",29.0,"['registry', 'dll', 'monitor', 'print', 'monitors']"
s536,MSBuild Suspicious Spawned By Script Process,"This analytic is to detect a suspicious child process of MSBuild spawned by Windows Script Host - cscript or wscript. This behavior or event are commonly seen and used by malware or adversaries to execute malicious msbuild process using malicious script in the compromised host. During triage, review parallel processes and identify any file modifications. MSBuild may load a script from the same path without having command-line arguments.","| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""wscript.exe"", ""cscript.exe"") AND `process_msbuild` by Processes.dest Processes.parent_process Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `msbuild_suspicious_spawned_by_script_process_filter`",70,"['T1127.001', 'T1127']","{'malware', 'msbuild'}",101.0,"['msbuild', 'malware', 'wscript', 'cscript', 'malicious']"
s537,Mshta spawning Rundll32 OR Regsvr32 Process,This search is to detect a suspicious mshta.exe process that spawn rundll32 or regsvr32 child process. This technique was seen in several malware nowadays like trickbot to load its initial .dll stage loader to execute and download the the actual trickbot payload.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name = ""mshta.exe""  `process_rundll32` OR `process_regsvr32` by Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `mshta_spawning_rundll32_or_regsvr32_process_filter`",70,"['T1218', 'T1218.005']","{'dll', 'exe', 'icedid', 'malware', 'trickbot', 'rundll32'}",,"['rundll32', 'malware', 'dll', 'regsvr32', 'exe']"
s538,MSHTML Module Load in Office Product,"The following detection identifies the module load of mshtml.dll into an Office product. This behavior has been related to CVE-2021-40444, whereas the malicious document will load ActiveX, which activates the MSHTML component. The vulnerability resides in the MSHTML component. During triage, identify parallel processes and capture any file modifications for analysis.","`sysmon` EventID=7  parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"",""wordpad.exe"",""wordview.exe"") ImageLoaded IN (""*\\mshtml.dll"", ""*\\Microsoft.mshtml.dll"",""*\\IE.Interop.MSHTML.dll"",""*\\MshtmlDac.dll"",""*\\MshtmlDed.dll"",""*\\MshtmlDer.dll"") | stats count min(_time) as firstTime max(_time) as lastTime by Computer, process_name, ImageLoaded, OriginalFileName, ProcessGuid | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `mshtml_module_load_in_office_product_filter`",80,"['T1566', 'T1566.001']","{'dll', 'cve-2021-40444', 'html'}",,"['mshtml', 'dll', 'vulnerability', 'malicious', 'cve']"
s539,MSI Module Loaded by Non-System Binary,"The following hunting analytic identifies `msi.dll` being loaded by a binary not located in `system32`, `syswow64`, `winsxs` or `windows` paths. This behavior is most recently related to InstallerFileTakeOver, or CVE-2021-41379, and DLL side-loading. CVE-2021-41379 requires a binary to be dropped and `msi.dll` to be loaded by it. To Successful exploitation of this issue happens in four parts \
1. Generation of an MSI that will trigger bad behavior. \
1. Preparing a directory for MSI installation. \
1. Inducing an error state. \
1. Racing to introduce a junction and a symlink to trick msiexec.exe to modify the attacker specified file. \
In addition, `msi.dll` has been abused in DLL side-loading attacks by being loaded by non-system binaries.","`sysmon` EventCode=7 ImageLoaded=""*\\msi.dll"" NOT (Image IN (""*\\System32\\*"",""*\\syswow64\\*"",""*\\windows\\*"", ""*\\winsxs\\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `msi_module_loaded_by_non_system_binary_filter`",80,"['T1574.002', 'T1574']","{'dll', 'wiper', 'msiexec', 'cve-2021-41379'}",,"['msi', 'dll', 'msiexec', 'system32', 'binaries']"
s540,Msmpeng Application DLL Side Loading,This search is to detect a suspicious creation of msmpeng.exe or mpsvc.dll in non default windows defender folder. This technique was seen couple days ago with revil ransomware in Kaseya Supply chain. The approach is to drop an old version of msmpeng.exe to load the actual payload name as mspvc.dll which will load the revil ransomware to the compromise machine,"|tstats `security_content_summariesonly` values(Filesystem.file_path) as file_path count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Filesystem where (Filesystem.file_name = ""msmpeng.exe"" OR Filesystem.file_name = ""mpsvc.dll"")  AND Filesystem.file_path != ""*\\Program Files\\windows defender\\*"" by Filesystem.file_create_time Filesystem.process_id  Filesystem.file_name Filesystem.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `msmpeng_application_dll_side_loading_filter`",50,"['T1574.002', 'T1574']","{'revil', 'dll'}",337.0,"['ransomware', 'msmpeng', 'mspvc', 'mpsvc', 'dll']"
s541,MS Scripting Process Loading Ldap Module,This search is to detect a suspicious MS scripting process such as wscript.exe or cscript.exe that loading ldap module to process ldap query. This behavior was seen in FIN7 implant where it uses javascript to execute ldap query to parse host information that will send to its C2 server. this anomaly detections is a good initial step to hunt further a suspicious ldap query or ldap related events to the host that may give you good information regarding ldap or AD information processing or might be a attacker.,"`sysmon` EventCode =7 Image IN (""*\\wscript.exe"", ""*\\cscript.exe"") ImageLoaded IN (""*\\Wldap32.dll"", ""*\\adsldp.dll"", ""*\\adsldpc.dll"") | stats min(_time) as firstTime max(_time) as lastTime count by Image EventCode process_name ProcessId ProcessGuid Computer ImageLoaded | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `ms_scripting_process_loading_ldap_module_filter`",30,"['T1059', 'T1059.007']","{'fin7', 'rundll32'}",,"['ldap', 'search', 'anomaly', 'suspicious', 'wscript']"
s542,MS Scripting Process Loading WMI Module,This search is to detect a suspicious MS scripting process such as wscript.exe or cscript.exe that loading wmi module to process wmi query. This behavior was seen in FIN7 implant where it uses javascript to execute wmi query to parse host information that will send to its C2 server. this anomaly detections is a good initial step to hunt further a suspicious wmi query or wmi related events to the host that may give you good information regarding process that are commonly using wmi query or modules or might be an attacker using this technique.,"`sysmon` EventCode =7 Image IN (""*\\wscript.exe"", ""*\\cscript.exe"") ImageLoaded IN (""*\\fastprox.dll"", ""*\\wbemdisp.dll"", ""*\\wbemprox.dll"", ""*\\wbemsvc.dll"" , ""*\\wmiutils.dll"", ""*\\wbemcomn.dll"") | stats min(_time) as firstTime max(_time) as lastTime count by Image EventCode process_name ProcessId ProcessGuid Computer ImageLoaded | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `ms_scripting_process_loading_wmi_module_filter`",30,"['T1059', 'T1059.007']","{'fin7', 'rundll32', 'wmi'}",,"['wmi', 'wscript', 'anomaly', 'search', 'suspicious']"
s543,Multiple Invalid Users Failing To Authenticate From Host Using NTLM,"The following analytic identifies one source endpoint failing to authenticate with multiple invalid users using the NTLM protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using NTLM to obtain initial access or elevate privileges. As attackers progress in a breach, mistakes will be made. In certain scenarios, adversaries may execute a password spraying attack using an invalid list of users. Event 4776 is generated on the computer that is authoritative for the provided credentials. For domain accounts, the domain controller is authoritative. For local accounts, the local computer is authoritative. Error code 0xC0000064 stands for `The username you typed does not exist` (the attempted user is a legitimate domain user).\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will only trigger on domain controllers, not on member servers or workstations.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source workstation name and attempted user accounts."," `wineventlog_security` EventCode=4776 Logon_Account!=""*$"" 0xC0000064 action=failure | bucket span=2m _time | stats dc(Logon_Account) AS unique_accounts values(Logon_Account) as tried_accounts by _time, Source_Workstation | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Source_Workstation | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_invalid_users_failing_to_authenticate_from_host_using_ntlm_filter`",70,"['T1110.003', 'T1110']",{'authenticate'},338.0,"['credentials', 'authenticate', 'ntlm', 'security', 'analytics']"
s544,Multiple Users Failing To Authenticate From Host Using Kerberos,"The following analytic identifies one source endpoint failing to authenticate with multiple valid users using the Kerberos protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using Kerberos to obtain initial access or elevate privileges. Event 4771 is generated when the Key Distribution Center fails to issue a Kerberos Ticket Granting Ticket (TGT). Failure code 0x18 stands for `wrong password provided` (the attempted user is a legitimate domain user).\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will only trigger on domain controllers, not on member servers or workstations.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source ip and attempted user accounts.","`wineventlog_security` EventCode=4771 Failure_Code=0x18 Account_Name!=""*$"" | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_failing_to_authenticate_from_host_using_kerberos_filter`",70,"['T1110.003', 'T1110']","{'kerberos', 'authenticate'}",338.0,"['analytics', 'security', 'kerberos', 'authenticate', 'statistical']"
s545,Multiple Users Failing To Authenticate From Host Using NTLM,"The following analytic identifies one source endpoint failing to authenticate with multiple valid users using the NTLM protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using NTLM to obtain initial access or elevate privileges. Event 4776 is generated on the computer that is authoritative for the provided credentials. For domain accounts, the domain controller is authoritative. For local accounts, the local computer is authoritative. Error code 0xC000006A means: misspelled or bad password (the attempted user is a legitimate domain user).\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will only trigger on domain controllers, not on member servers or workstations.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source workstation name and attempted user accounts."," `wineventlog_security` EventCode=4776 Logon_Account!=""*$"" 0xC000006A action=failure | bucket span=2m _time | stats dc(Logon_Account) AS unique_accounts values(Logon_Account) as tried_accounts by _time, Source_Workstation | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Source_Workstation | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_failing_to_authenticate_from_host_using_ntlm_filter`",70,"['T1110.003', 'T1110']",{'authenticate'},338.0,"['analytics', 'ntlm', 'authenticate', 'security', 'credentials']"
s546,Multiple Users Failing To Authenticate From Process,"The following analytic identifies a source process name failing to authenticate with multiple users. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment to obtain initial access or elevate privileges. Event 4625 generates on domain controllers, member servers, and workstations when an account fails to logon. Logon Type 2 describes an iteractive logon attempt.\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will trigger on the potenfially malicious host, perhaps controlled via a trojan or operated by an insider threat, from where a password spraying attack is being executed. This could be a domain controller as well as a member server or workstation.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source process name, source account and attempted user accounts."," `wineventlog_security` EventCode=4625 Logon_Type=2 Caller_Process_Name!=""-"" | bucket span=2m _time | eval Source_Account = mvindex(Account_Name, 0) | eval Destination_Account = mvindex(Account_Name, 1) | stats dc(Destination_Account) AS unique_accounts values(Account_Name) as tried_accounts by _time, Caller_Process_Name, Source_Account, ComputerName | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Caller_Process_Name, Source_Account, ComputerName | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_failing_to_authenticate_from_process_filter` ",70,"['T1110.003', 'T1110']",{'authenticate'},338.0,"['analytics', 'security', 'authenticate', 'monitoring', 'logon']"
s547,Multiple Users Remotely Failing To Authenticate From Host,"The following analytic identifies a source host failing to authenticate against a remote host with multiple users. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment to obtain initial access or elevate privileges. Event 4625 documents each and every failed attempt to logon to the local computer. This event generates on domain controllers, member servers, and workstations. Logon Type 3 describes an remote authentication attempt.\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will trigger on the host that is the target of the password spraying attack. This could be a domain controller as well as a member server or workstation.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source process name, source account and attempted user accounts."," `wineventlog_security` EventCode=4625 Logon_Type=3 Source_Network_Address!=""-"" | bucket span=2m _time | eval Destination_Account = mvindex(Account_Name, 1) | stats dc(Destination_Account) AS unique_accounts values(Destination_Account) as tried_accounts by _time, Source_Network_Address, ComputerName | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Source_Network_Address, ComputerName | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `multiple_users_remotely_failing_to_authenticate_from_host_filter` ",70,"['T1110.003', 'T1110']",{'authenticate'},338.0,"['authentication', 'analytics', 'security', 'monitoring', 'authenticate']"
s548,Network Connection Discovery With Arp,This analytic looks for the execution of `arp.exe` utilized to get a listing of network connections on a compromised system. Red Teams and adversaries alike may use arp.exe for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""arp.exe"") (Processes.process=*-a*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_connection_discovery_with_arp_filter`",30,['T1049'],"{'exe', 'network', 'arp'}",,"['arp', 'exe', 'execution', 'network', 'compromised']"
s549,Network Connection Discovery With Net,This analytic looks for the execution of `net.exe` with command-line arguments utilized to get a listing of network connections on a compromised system. Red Teams and adversaries alike may use net.exe for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""net.exe"" OR Processes.process_name=""net1.exe"") (Processes.process=*use*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_connection_discovery_with_net_filter`",30,['T1049'],"{'net.exe', 'azorult', 'exe', 'network'}",,"['exe', 'net', 'connections', 'network', 'execution']"
s550,Network Connection Discovery With Netstat,This analytic looks for the execution of `netstat.exe` with command-line arguments utilized to get a listing of network connections on a compromised system. Red Teams and adversaries alike may use netstat.exe for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""netstat.exe"") (Processes.process=*-a*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_connection_discovery_with_netstat_filter`",30,['T1049'],"{'netstat', 'network'}",,"['netstat', 'connections', 'compromised', 'execution', 'network']"
s551,Network Discovery Using Route Windows App,This analytic look for a spawned process of route.exe windows application. Adversaries and red teams alike abuse this application the recon or do a network discovery on a target host. but one possible false positive might be an automated tool used by a system administator or a powershell script in amazon ec2 config services.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_route` by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `network_discovery_using_route_windows_app_filter`,30,"['T1016', 'T1016.001']","{'route', 'exe', 'powershell', 'aws'}",,"['ec2', 'route', 'exe', 'discovery', 'process']"
s552,Net Localgroup Discovery,"The following hunting analytic will identify the use of localgroup discovery using `net localgroup`. During triage, review parallel processes and identify any further suspicious behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=net.exe OR Processes.process_name=net1.exe (Processes.process=""*localgroup*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `net_localgroup_discovery_filter`",30,"['T1069', 'T1069.001']","{'net.exe', 'azorult'}",,"['localgroup', 'discovery', 'suspicious', 'processes', 'behavior']"
s553,NET Profiler UAC bypass,This search is to detect modification of registry to bypass UAC windows feature. This technique is to add a payload dll path on .NET COR file path that will be loaded by mmc.exe as soon it was executed. This detection rely on monitoring the registry key and values in the detection area. It may happened that windows update some dll related to mmc.exe and add dll path in this registry. In this case filtering is needed.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Environment\\COR_PROFILER_PATH"" Registry.registry_value_data = ""*.dll"" by Registry.registry_path Registry.registry_key_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `net_profiler_uac_bypass_filter`",70,"['T1548.002', 'T1548']","{'dll', 'uac', 'registry modification'}",63.0,"['uac', 'registry', 'mmc', 'dll', 'search']"
s554,Nishang PowershellTCPOneLine,"This query detects the Nishang Invoke-PowerShellTCPOneLine utility that spawns a call back to a remote command and control server. This is a powershell oneliner. In addition, this will capture on the command-line additional utilities used by Nishang. Triage the endpoint and identify any parallel processes that look suspicious. Review the reputation of the remote IP or domain contacted by the powershell process.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=*Net.Sockets.TCPClient* AND Processes.process=*System.Text.ASCIIEncoding*) by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `nishang_powershelltcponeline_filter`,70,"['T1059', 'T1059.001']","{'ps1', 'powershell', 'hafnium'}",,"['powershelltcponeline', 'powershell', 'nishang', 'invoke', 'suspicious']"
s555,NLTest Domain Trust Discovery,"This search looks for the execution of `nltest.exe` with command-line arguments utilized to query for Domain Trust information. Two arguments `/domain trusts`, returns a list of trusted domains, and `/all_trusts`, returns all trusted domains. Red Teams and adversaries alike use NLTest.exe to enumerate the current domain to assist with further understanding where to pivot next.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_nltest` (Processes.process=*/domain_trusts* OR Processes.process=*/all_trusts*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `nltest_domain_trust_discovery_filter`,30,['T1482'],"{'trickbot', 'icedid', 'nltest', 'ryuk'}",,"['nltest', 'all_trusts', 'domains', 'trusts', 'domain']"
s556,Non Chrome Process Accessing Chrome Default Dir,"This search is to detect an anomaly event of non-chrome process accessing the files in chrome user default folder. This folder contains all the sqlite database of the chrome browser related to users login, history, cookies and etc. Most of the RAT, trojan spy as well as FIN7 jssloader try to parse the those sqlite database to collect information on the compromised host. This SACL Event (4663) need to be enabled to tthe firefox profile directory to be eable to use this. Since you monitoring this access to the folder a noise coming from firefox need to be filter and also sqlite db browser and explorer .exe to make this detection more stable.","`wineventlog_security` EventCode=4663 NOT (process_name IN (""*\\chrome.exe"", ""*\\explorer.exe"", ""*sql*"")) Object_Name=""*\\Google\\Chrome\\User Data\\Default*"" | stats count min(_time) as firstTime max(_time) as lastTime by Object_Name Object_Type process_name Access_Mask Accesses process_id EventCode dest user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `non_chrome_process_accessing_chrome_default_dir_filter`",50,"['T1555', 'T1555.003']","{'fin7', 'jssloader', 'remcos', 'browser'}",,"['chrome', 'browser', 'firefox', 'compromised', 'trojan']"
s557,Non Firefox Process Access Firefox Profile Dir,"This search is to detect an anomaly event of non-firefox process accessing the files in  profile folder. This folder contains all the sqlite database of the firefox browser related to users login, history, cookies and etc. Most of the RAT, trojan spy as well as FIN7 jssloader try to parse the those sqlite database to collect information on the compromised host. This SACL Event (4663) need to be enabled to tthe firefox profile directory to be eable to use this. Since you monitoring this access to the folder a noise coming from firefox need to be filter and also sqlite db browser and explorer .exe to make this detection more stable.","`wineventlog_security` EventCode=4663 NOT (process_name IN (""*\\firefox.exe"", ""*\\explorer.exe"", ""*sql*"")) Object_Name=""*\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles*"" | stats count min(_time) as firstTime max(_time) as lastTime by Object_Name Object_Type process_name Access_Mask Accesses process_id EventCode dest user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `non_firefox_process_access_firefox_profile_dir_filter`",50,"['T1555', 'T1555.003']","{'fin7', 'azorult', 'browser', 'remcos', 'jssloader'}",,"['firefox', 'compromised', 'browser', 'search', 'folder']"
s558,Ntdsutil Export NTDS,"Monitor for signs that Ntdsutil is being used to Extract Active Directory database - NTDS.dit, typically used for offline password cracking. It may be used in normal circumstances with no command line arguments or shorthand variations of more common arguments. Ntdsutil.exe is typically seen run on a Windows Server. Typical command used to dump ntds.dit \
ntdsutil ""ac i ntds"" ""ifm"" ""create full C:\Temp"" q q \
This technique uses ""Install from Media"" (IFM), which will extract a copy of the Active Directory database. A successful export of the Active Directory database will yield a file modification named ntds.dit to the destination.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=ntdsutil.exe Processes.process=*ntds* Processes.process=*create*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `ntdsutil_export_ntds_filter`,100,"['T1003.003', 'T1003']",{'hafnium'},,"['ntdsutil', 'ntds', 'export', 'dit', 'file']"
s559,Office Application Drop Executable,This search is to detect a suspicious MS office application that drop or create executables or script in the host. This behavior is commonly seen in spear phishing office attachment where it drop malicious files or script to compromised the host. It might be some normal macro may drop script or tools as part of automation but still this behavior is reallly suspicious and not commonly seen in normal office application,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"",""wordpad.exe"",""wordview.exe"") by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*.exe"",""*.dll"",""*.pif"",""*.scr"",""*.js"",""*.vbs"",""*.vbe"",""*.ps1"") by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | rename process_guid as proc_guid | fields _time dest file_create_time file_name file_path process_name process_path process proc_guid] | dedup file_create_time | table dest, process_name, process, file_create_time, file_name, file_path, proc_guid | `office_application_drop_executable_filter`",80,"['T1566', 'T1566.001']","{'ps1', 'fin7', 'rundll32'}",,"['phishing', 'executables', 'malicious', 'script', 'search']"
s560,Office Application Spawn Regsvr32 process,this detection was designed to identifies suspicious spawned process of known MS office application due to macro or malicious code. this technique can be seen in so many malware like IcedID that used MS office as its weapon or attack vector to initially infect the machines.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = ""winword.exe"" OR Processes.parent_process_name = ""excel.exe"" OR Processes.parent_process_name = ""powerpnt.exe"" OR Processes.parent_process_name = ""outlook.exe"") `process_regsvr32` by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `office_application_spawn_regsvr32_process_filter`",70,"['T1566', 'T1566.001']","{'malware', 'icedid'}",,"['malware', 'application', 'malicious', 'ms', 'detection']"
s561,Office Application Spawn rundll32 process,this detection was designed to identifies suspicious spawned process of known MS office application due to macro or malicious code. this technique can be seen in so many malware like trickbot that used MS office as its weapon or attack vector to initially infect the machines.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = ""winword.exe"" OR Processes.parent_process_name = ""excel.exe"" OR Processes.parent_process_name = ""powerpnt.exe"") AND `process_rundll32` by Processes.parent_process Processes.process_name Processes.process_id Processes.process_guid Processes.process Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `office_application_spawn_rundll32_process_filter`",70,"['T1566', 'T1566.001']","{'microsoft office', 'icedid', 'malware', 'trickbot', 'rundll32'}",,"['malware', 'ms', 'malicious', 'detection', 'office']"
s562,Office Document Creating Schedule Task,"this search detects a potential malicious office document that create schedule task entry through macro VBA api or through loading taskschd.dll. This technique was seen in so many malicious macro malware that create persistence , beaconing using task schedule malware entry The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not. schtasks.exe is natively found in `C:\Windows\system32` and `C:\Windows\syswow64`. The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it's possible a scheduled task is being registered within that process context in memory. Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.'","`sysmon` EventCode=7 parent_process_name IN (""WINWORD.EXE"", ""EXCEL.EXE"", ""POWERPNT.EXE"") ImageLoaded = ""*\\taskschd.dll"" | stats min(_time) as firstTime max(_time) as lastTime values(ImageLoaded) as AllImageLoaded count by Computer EventCode Image parent_process_name ProcessId ProcessGuid | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `office_document_creating_schedule_task_filter`",70,"['T1566', 'T1566.001']","{'malware', 'schtasks', 'apt34'}",339.0,"['schtasks', 'taskservice', 'malware', 'taskschd', 'task']"
s563,Office Document Executing Macro Code,"this detection was designed to identifies suspicious office documents that using macro code. Macro code is known to be one of the prevalent weaponization or attack vector of threat actor. This malicious macro code is embed to a office document as an attachment that may execute malicious payload, download malware payload or other malware component. It is really good practice to disable macro by default to avoid automatically execute macro code while opening or closing a office document files.","`sysmon` EventCode=7 parent_process_name IN (""WINWORD.EXE"", ""EXCEL.EXE"", ""POWERPNT.EXE"") ImageLoaded IN (""*\\VBE7INTL.DLL"",""*\\VBE7.DLL"", ""*\\VBEUI.DLL"") | stats min(_time) as firstTime max(_time) as lastTime values(ImageLoaded) as AllImageLoaded count by Computer EventCode Image process_name ProcessId ProcessGuid | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `office_document_executing_macro_code_filter`",70,"['T1566', 'T1566.001']","{'malware', 'microsoft office', 'trickbot', 'icedid'}",,"['macro', 'malware', 'office', 'document', 'malicious']"
s564,Office Document Spawned Child Process To Download,This search is to detect potential malicious office document executing lolbin child process to download payload or other malware. Since most of the attacker abused the capability of office document to execute living on land application to blend it to the normal noise in the infected machine to cover its track.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"") Processes.process IN (""*http:*"",""*https:*"") NOT (Processes.original_file_name IN(""firefox.exe"", ""chrome.exe"",""iexplore.exe"",""msedge.exe""))  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `office_document_spawned_child_process_to_download_filter`",70,"['T1566', 'T1566.001']","{'malware', 'lolbin'}",334.0,"['malware', 'lolbin', 'document', 'search', 'detect']"
s565,Office Product Spawning BITSAdmin,"The following detection identifies the latest behavior utilized by different malware families (including TA551, IcedID). This detection identifies any Windows Office Product spawning `bitsadmin.exe`. In malicious instances, the command-line of `bitsadmin.exe` will contain a URL to a remote destination or similar command-line arguments as transfer, Download, priority, Foreground. In addition, Threat Research has released a detections identifying suspicious use of `bitsadmin.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `bitsadmin.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"") `process_bitsadmin` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_bitsadmin_filter`",70,"['T1566', 'T1566.001']","{'ta551', 'exe', 'bitsadmin', 'icedid', 'malware'}",,"['malware', 'bitsadmin', 'malicious', 'exe', 'processes']"
s566,Office Product Spawning CertUtil,"The following detection identifies the latest behavior utilized by different malware families (including TA551, IcedID). This detection identifies any Windows Office Product spawning `certutil.exe`. In malicious instances, the command-line of `certutil.exe` will contain a URL to a remote destination. In addition, Threat Research has released a detections identifying suspicious use of `certutil.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `certutil.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"") `process_certutil` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_certutil_filter`",70,"['T1566', 'T1566.001']","{'ta551', 'exe', 'icedid', 'certutil', 'malware'}",,"['malware', 'certutil', 'malicious', 'exe', 'detection']"
s567,Office Product Spawning MSHTA,"The following detection identifies the latest behavior utilized by different malware families (including TA551, IcedID). This detection identifies any Windows Office Product spawning `mshta.exe`. In malicious instances, the command-line of `mshta.exe` will contain the `hta` file locally, or a URL to the remote destination. In addition, Threat Research has released a detections identifying suspicious use of `mshta.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `mshta.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"") `process_mshta` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_mshta_filter`",70,"['T1566', 'T1566.001']","{'malware', 'exe', 'ta551', 'icedid'}",,"['malware', 'exe', 'mshta', 'malicious', 'processes']"
s568,Office Product Spawning Rundll32 with no DLL,"The following detection identifies the latest behavior utilized by IcedID malware family. This detection identifies any Windows Office Product spawning `rundll32.exe` without a `.dll` file extension. In malicious instances, the command-line of `rundll32.exe` will look like `rundll32 ..\oepddl.igk2,DllRegisterServer`. In addition, Threat Research has released a detection identifying the use of `DllRegisterServer` on the command-line of `rundll32.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze the `DLL` that was dropped to disk. The Office Product will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"") `process_rundll32` (Processes.process!=*.dll*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_rundll32_with_no_dll_filter`",70,"['T1566', 'T1566.001']","{'dll', 'malware', 'icedid', 'rundll32'}",,"['malware', 'rundll32', 'dll', 'dllregisterserver', 'malicious']"
s569,Office Product Spawning Wmic,"The following detection identifies the latest behavior utilized by Ursnif malware family. This detection identifies any Windows Office Product spawning `wmic.exe`. In malicious instances, the command-line of `wmic.exe` will contain `wmic process call create`. In addition, Threat Research has released a detection identifying the use of `wmic process call create` on the command-line of `wmic.exe`. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. The Office Product, or `wmic.exe` will have reached out to a remote destination, capture and block the IPs or domain. Review additional parallel processes for further activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"") `process_wmic` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `office_product_spawning_wmic_filter`",70,"['T1566', 'T1566.001']","{'fin7', 'exe', 'malware', 'ursnif', 'wmi'}",,"['malware', 'wmic', 'malicious', 'processes', 'exe']"
s570,Office Product Spawn CMD Process,this search is to detect a suspicious office product process that spawn cmd child process. This is commonly seen in a ms office product having macro to execute shell command to download or execute malicious lolbin relative to its malicious code. This is seen in trickbot spear phishing doc where it execute shell cmd to run mshta payload.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = ""winword.exe"" OR Processes.parent_process_name= ""excel.exe"" OR Processes.parent_process_name = ""powerpnt.exe"") `process_cmd` by Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest Processes.original_file_name | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `office_product_spawn_cmd_process_filter`",70,"['T1218', 'T1218.005']","{'trickbot', 'lolbin'}",117.0,"['cmd', 'phishing', 'malicious', 'process', 'execute']"
s571,Office Product Writing cab or inf,"The following analytic identifies behavior related to CVE-2021-40444. Whereas the malicious document will load ActiveX and download the remote payload (.inf, .cab). During triage, review parallel processes and further activity on endpoint to identify additional patterns. Retrieve the file modifications and analyze further.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"",""wordpad.exe"",""wordview.exe"") by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | join proc_guid, _time [ | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*.inf"",""*.cab"") by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.process_guid | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid | fields _time dest file_create_time file_name file_path process_name process_path process proc_guid] | dedup file_create_time | table dest, process_name, process, file_create_time, file_name, file_path, proc_guid | `office_product_writing_cab_or_inf_filter`",80,"['T1566', 'T1566.001']",{'cve-2021-40444'},,"['cve', 'malicious', 'file', '40444', 'document']"
s572,Office Spawning Control,"The following detection identifies control.exe spawning from an office product. This detection identifies any Windows Office Product spawning `control.exe`. In malicious instances, the command-line of `control.exe` will contain a file path to a .cpl or .inf, related to CVE-2021-40444. In this instance, we narrow our detection down to the Office suite as a parent process. During triage, review all file modifications. Capture and analyze any artifacts on disk. review parallel and child processes to identify further suspicious behavior","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""mspub.exe"",""visio.exe"",""wordpad.exe"",""wordview.exe"") Processes.process_name=control.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `office_spawning_control_filter`",80,"['T1566', 'T1566.001']","{'cve-2021-40444', 'exe'}",,"['exe', 'malicious', 'processes', 'suspicious', 'process']"
s573,Outbound Network Connection from Java Using Default Ports,A required step while exploiting the CVE-2021-44228-Log4j vulnerability is that the victim server will perform outbound connections to attacker-controlled infrastructure. This is required as part of the JNDI lookup as well as for retrieving the second stage .class payload. The following analytic identifies the Java process reaching out to default ports used by the LDAP and RMI protocols. This behavior could represent successfull exploitation. Note that adversaries can easily decide to use arbitrary ports for these protocols and potentially bypass this detection.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where (Processes.process_name=""java.exe"" OR Processes.process_name=javaw.exe OR Processes.process_name=javaw.exe) by _time Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where (All_Traffic.dest_port= 389 OR All_Traffic.dest_port= 636 OR All_Traffic.dest_port = 1389 OR All_Traffic.dest_port = 1099 ) by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as connection_to_CNC] | table _time dest parent_process_name process_name process_path process connection_to_CNC dest_port| `outbound_network_connection_from_java_using_default_ports_filter`",90,['T1190'],{'cve-2021-44228'},,"['log4j', 'jndi', 'vulnerability', 'ldap', 'java']"
s574,Overwriting Accessibility Binaries,Microsoft Windows contains accessibility features that can be launched with a key combination before a user has logged in. An adversary can modify or replace these programs so they can get a command prompt or backdoor without logging in to the system. This search looks for modifications to these binaries.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_path) as file_path from datamodel=Endpoint.Filesystem where (Filesystem.file_path=*\\Windows\\System32\\sethc.exe* OR Filesystem.file_path=*\\Windows\\System32\\utilman.exe* OR Filesystem.file_path=*\\Windows\\System32\\osk.exe* OR Filesystem.file_path=*\\Windows\\System32\\Magnify.exe* OR Filesystem.file_path=*\\Windows\\System32\\Narrator.exe* OR Filesystem.file_path=*\\Windows\\System32\\DisplaySwitch.exe* OR Filesystem.file_path=*\\Windows\\System32\\AtBroker.exe*) by Filesystem.file_name Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `overwriting_accessibility_binaries_filter`,80,"['T1546', 'T1546.008']",{'wiper'},,"['binaries', 'microsoft', 'accessibility', 'windows', 'programs']"
s575,Password Policy Discovery with Net,This analytic looks for the execution of `net.exe` or `net1.exe` with command line arguments used to obtain the domain password policy. Red Teams and adversaries may leverage `net.exe` for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""net.exe"" OR Processes.process_name=""net1.exe"") AND Processes.process = ""*accounts*"" AND Processes.process = ""*/domain*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `password_policy_discovery_with_net_filter`",30,['T1201'],"{'password', 'net.exe', 'exe', 'leverage', 'rundll32'}",163.0,"['exe', 'net', 'password', 'net1', 'domain']"
s576,Permission Modification using Takeown App,This search is to detect a modification of file or directory permission using takeown.exe windows app. This technique was seen in some ransomware that take the ownership of a folder or files to encrypt or delete it.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""takeown.exe"" Processes.process = ""*/f*"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `permission_modification_using_takeown_app_filter`",70,['T1222'],"{'permission', 'wastedlocker'}",6.0,"['ransomware', 'permission', 'folder', 'files', 'directory']"
s577,PetitPotam Network Share Access Request,"The following analytic utilizes Windows Event Code 5145, ""A network share object was checked to see whether client can be granted desired access"". During our research into PetitPotam, CVE-2021-36942, we identified the ocurrence of this event on the target host with specific values. \
To enable 5145 events via Group Policy - Computer Configuration->Polices->Windows Settings->Security Settings->Advanced Audit Policy Configuration. Expand this node, go to Object Access (Audit Polices->Object Access), then select the Setting Audit Detailed File Share Audit \
It is possible this is not enabled by default and may need to be reviewed and enabled. \
During triage, review parallel security events to identify further suspicious activity.","`wineventlog_security` Account_Name=""ANONYMOUS LOGON"" EventCode=5145 Relative_Target_Name=lsarpc | stats count min(_time) as firstTime max(_time) as lastTime by dest, Security_ID, Share_Name, Source_Address, Accesses, Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `petitpotam_network_share_access_request_filter`",80,['T1187'],"{'cve-2021-36942', 'expand'}",,"['audit', 'share', 'access', 'security', 'suspicious']"
s578,PetitPotam Suspicious Kerberos TGT Request,"The following analytic identifes Event Code 4768, A `Kerberos authentication ticket (TGT) was requested`, successfull occurs. This behavior has been identified to assist with detecting PetitPotam, CVE-2021-36942. Once an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes. One way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus. This request will generate a 4768 event with some unusual fields depending on the environment. This analytic will require tuning, we recommend filtering Account_Name to Domain Controllers for your environment.","`wineventlog_security` EventCode=4768 Client_Address!=""::1"" Certificate_Thumbprint!="""" Account_Name=*$ | stats count min(_time) as firstTime max(_time) as lastTime by dest, Account_Name, Client_Address, action, Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `petitpotam_suspicious_kerberos_tgt_request_filter`",80,['T1003'],"{'kerberos', 'cve-2021-36942', 'leverage'}",,"['certificate', 'attacer', 'authentication', 'kerberos', 'ticket']"
s579,Ping Sleep Batch Command,This analytic will identify the possible execution of ping sleep batch commands. This technique was seen in several malware samples and is used to trigger sleep times without explicitly calling sleep functions or commandlets. The goal is to delay the execution of malicious code and bypass detection or sandbox analysis. This  detection can be a good indicator of a process delaying its execution for malicious purposes.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_ping` (Processes.parent_process = ""*ping*"" Processes.parent_process = *-n* Processes.parent_process=""* Nul*""Processes.parent_process=""*&gt;*"") OR (Processes.process = ""*ping*"" Processes.process = *-n* Processes.process=""* Nul*""Processes.process=""*&gt;*"") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.process_guid Processes.user Processes.dest | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `ping_sleep_batch_command_filter`",60,"['T1497', 'T1497.003']","{'malware', 'ping', 'whispergate'}",,"['malware', 'ping', 'execution', 'delay', 'delaying']"
s580,Possible Browser Pass View Parameter,"This analytic will detect if a suspicious process contains a commandline parameter related to a web browser credential dumper. This technique is used by Remcos RAT malware which uses the Nirsoft webbrowserpassview.exe application to dump web browser credentials. Remcos uses the ""/stext"" command line to dump the credentials in text format. This Hunting query is a good indicator of hosts suffering from possible Remcos RAT infection. Since the hunting query is based on the parameter command and the possible path where it will save the text credential information, it may catch normal tools that are using the same command and behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process  IN (""*/stext *"", ""*/shtml *"", ""*/LoadPasswordsIE*"", ""*/LoadPasswordsFirefox*"", ""*/LoadPasswordsChrome*"", ""*/LoadPasswordsOpera*"", ""*/LoadPasswordsSafari*"" , ""*/UseOperaPasswordFile*"", ""*/OperaPasswordFile*"",""*/stab*"", ""*/scomma*"", ""*/stabular*"", ""*/shtml*"", ""*/sverhtml*"", ""*/sxml*"", ""*/skeepass*"" ) AND Processes.process IN (""*\\temp\\*"", ""*\\users\\public\\*"", ""*\\programdata\\*"") by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `possible_browser_pass_view_parameter_filter`",40,"['T1555.003', 'T1555']","{'malware', 'remcos', 'browser'}",,"['malware', 'webbrowserpassview', 'credentials', 'credential', 'commandline']"
s581,Possible Lateral Movement PowerShell Spawn,"The following analytic assists with identifying a PowerShell process spawned as a child or grand child process of commonly abused processes during lateral movement techniques including `services.exe`, `wmiprsve.exe`, `svchost.exe`, `wsmprovhost.exe` and `mmc.exe`. Legitimate Windows features such as the Service Control Manager, Windows Management Instrumentation, Task Scheduler, Windows Remote Management and the DCOM protocol can be abused to start a process on a remote endpoint. Looking for PowerShell spawned out of this processes may reveal a lateral movement attack. Red Teams and adversaries alike may abuse these services during a breach for lateral movement and remote code execution.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=wmiprvse.exe OR Processes.parent_process_name=services.exe OR Processes.parent_process_name=svchost.exe OR Processes.parent_process_name=wsmprovhost.exe OR Processes.parent_process_name=mmc.exe) (Processes.process_name=powershell.exe OR (Processes.process_name=cmd.exe AND Processes.process=*powershell.exe*) OR Processes.process_name=pwsh.exe OR (Processes.process_name=cmd.exe AND Processes.process=*pwsh.exe*)) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `possible_lateral_movement_powershell_spawn_filter`,90,"['T1021', 'T1021.003', 'T1021.006', 'T1047', 'T1053.005', 'T1543.003', 'T1059.001', 'T1218.014']","{'wiper', 'exe', 'powershell'}",,"['processes', 'process', 'powershell', 'exe', 'execution']"
s582,Potentially malicious code on commandline,"The following analytic uses a pretrained machine learning text classifier to detect potentially malicious commandlines.  The model identifies unusual combinations of keywords found in samples of commandlines where adversaries executed powershell code, primarily for C2 communication.  For example, adversaries will leverage IO capabilities such as ""streamreader"" and ""webclient"", threading capabilties such as ""mutex"" locks, programmatic constructs like ""function"" and ""catch"", and cryptographic operations like ""computehash"".  Although observing one of these keywords in a commandline script is possible, combinations of keywords observed in attack data are not typically found in normal usage of the commandline.  The model will output a score where all values above zero are suspicious, anything greater than one particularly so.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=""Endpoint.Processes"" by Processes.parent_process_name Processes.process_name Processes.process Processes.user Processes.dest  | `drop_dm_object_name(Processes)`  | where len(process) > 200 | `potentially_malicious_code_on_cmdline_tokenize_score` | apply unusual_commandline_detection | eval score='predicted(unusual_cmdline_logits)', process=orig_process | fields - unusual_cmdline* predicted(unusual_cmdline_logits) orig_process | where score > 0.5 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `potentially_malicious_code_on_commandline_filter`",60,['T1059.003'],"{'leverage', 'powershell'}",5.0,"['commandlines', 'keywords', 'malicious', 'powershell', 'commandline']"
s583,Potential password in username,"This search identifies users who have entered their passwords in username fields. This is done by looking for failed authentication attempts using usernames with a length longer than 7 characters and a high Shannon entropy, and looks for the next successful authentication attempt from the same source system to the same destination system as the failed attempt.","| tstats `security_content_summariesonly` earliest(_time) AS starttime latest(_time) AS endtime latest(sourcetype) AS sourcetype values(Authentication.src) AS src values(Authentication.dest) AS dest count FROM datamodel=Authentication WHERE nodename=Authentication.Failed_Authentication BY ""Authentication.user"" | `drop_dm_object_name(Authentication)` | lookup ut_shannon_lookup word AS user | where ut_shannon>3 AND len(user)>=8 AND mvcount(src) == 1 | sort count, - ut_shannon | eval incorrect_cred=user | eval endtime=endtime+1000 | map maxsearches=70 search=""| tstats `security_content_summariesonly` earliest(_time) AS starttime latest(_time) AS endtime latest(sourcetype) AS sourcetype values(Authentication.src) AS src values(Authentication.dest) AS dest count FROM datamodel=Authentication WHERE nodename=Authentication.Successful_Authentication Authentication.src=\""$src$\"" Authentication.dest=\""$dest$\"" sourcetype IN (\""$sourcetype$\"") earliest=\""$starttime$\"" latest=\""$endtime$\"" BY \""Authentication.user\"" | `drop_dm_object_name(\""Authentication\"")` | `potential_password_in_username_false_positive_reduction` | eval incorrect_cred=\""$incorrect_cred$\"" | eval ut_shannon=\""$ut_shannon$\"" | sort count"" | where user!=incorrect_cred | outlier action=RM count | `potential_password_in_username_filter`",30,"['T1078.003', 'T1552.001']","{'entropy', 'password'}",225.0,"['passwords', 'authentication', 'search', 'entered', 'users']"
s584,PowerShell 4104 Hunting,"The following Hunting analytic assists with identifying suspicious PowerShell execution using Script Block Logging, or EventCode 4104. This analytic is not meant to be ran hourly, but occasionally to identify malicious or suspicious PowerShell. This analytic is a combination of work completed by Alex Teixeira and Splunk Threat Research Team.","`powershell` EventCode=4104 | eval DoIt = if(match(ScriptBlockText,""(?i)(\$doit)""), ""4"", 0) | eval enccom=if(match(ScriptBlockText,""[A-Za-z0-9+\/]{44,}([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)"") OR match(ScriptBlockText, ""(?i)[-]e(nc*o*d*e*d*c*o*m*m*a*n*d*)*\s+[^-]""),4,0) | eval suspcmdlet=if(match(ScriptBlockText, ""(?i)Add-Exfiltration|Add-Persistence|Add-RegBackdoor|Add-ScrnSaveBackdoor|Check-VM|Do-Exfiltration|Enabled-DuplicateToken|Exploit-Jboss|Find-Fruit|Find-GPOLocation|Find-TrustedDocuments|Get-ApplicationHost|Get-ChromeDump|Get-ClipboardContents|Get-FoxDump|Get-GPPPassword|Get-IndexedItem|Get-Keystrokes|LSASecret|Get-PassHash|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-RickAstley|Get-Screenshot|Get-SecurityPackages|Get-ServiceFilePermission|Get-ServicePermission|Get-ServiceUnquoted|Get-SiteListPassword|Get-System|Get-TimedScreenshot|Get-UnattendedInstallFile|Get-Unconstrained|Get-VaultCredential|Get-VulnAutoRun|Get-VulnSchTask|Gupt-Backdoor|HTTP-Login|Install-SSP|Install-ServiceBinary|Invoke-ACLScanner|Invoke-ADSBackdoor|Invoke-ARPScan|Invoke-AllChecks|Invoke-BackdoorLNK|Invoke-BypassUAC|Invoke-CredentialInjection|Invoke-DCSync|Invoke-DllInjection|Invoke-DowngradeAccount|Invoke-EgressCheck|Invoke-Inveigh|Invoke-InveighRelay|Invoke-Mimikittenz|Invoke-NetRipper|Invoke-NinjaCopy|Invoke-PSInject|Invoke-Paranoia|Invoke-PortScan|Invoke-PoshRat|Invoke-PostExfil|Invoke-PowerDump|Invoke-PowerShellTCP|Invoke-PsExec|Invoke-PsUaCme|Invoke-ReflectivePEInjection|Invoke-ReverseDNSLookup|Invoke-RunAs|Invoke-SMBScanner|Invoke-SSHCommand|Invoke-Service|Invoke-Shellcode|Invoke-Tater|Invoke-ThunderStruck|Invoke-Token|Invoke-UserHunter|Invoke-VoiceTroll|Invoke-WScriptBypassUAC|Invoke-WinEnum|MailRaider|New-HoneyHash|Out-Minidump|Port-Scan|PowerBreach|PowerUp|PowerView|Remove-Update|Set-MacAttribute|Set-Wallpaper|Show-TargetScreen|Start-CaptureServer|VolumeShadowCopyTools|NEEEEWWW|(Computer|User)Property|CachedRDPConnection|get-net\S+|invoke-\S+hunter|Install-Service|get-\S+(credent|password)|remoteps|Kerberos.*(policy|ticket)|netfirewall|Uninstall-Windows|Verb\s+Runas|AmsiBypass|nishang|Invoke-Interceptor|EXEonRemote|NetworkRelay|PowerShelludp|PowerShellIcmp|CreateShortcut|copy-vss|invoke-dll|invoke-mass|out-shortcut|Invoke-ShellCommand""),1,0) | eval base64 = if(match(lower(ScriptBlockText),""frombase64""), ""4"", 0) | eval empire=if(match(lower(ScriptBlockText),""system.net.webclient"") AND match(lower(ScriptBlockText), ""frombase64string"") ,5,0) | eval mimikatz=if(match(lower(ScriptBlockText),""mimikatz"") OR match(lower(ScriptBlockText), ""-dumpcr"") OR match(lower(ScriptBlockText), ""SEKURLSA::Pth"") OR match(lower(ScriptBlockText), ""kerberos::ptt"") OR match(lower(ScriptBlockText), ""kerberos::golden"") ,5,0) | eval iex = if(match(lower(ScriptBlockText),""iex""), ""2"", 0) | eval webclient=if(match(lower(ScriptBlockText),""http"") OR match(lower(ScriptBlockText),""web(client|request)"") OR match(lower(ScriptBlockText),""socket"") OR match(lower(ScriptBlockText),""download(file|string)"") OR match(lower(ScriptBlockText),""bitstransfer"") OR match(lower(ScriptBlockText),""internetexplorer.application"") OR match(lower(ScriptBlockText),""xmlhttp""),5,0) | eval get = if(match(lower(ScriptBlockText),""get-""), ""1"", 0) | eval rundll32 = if(match(lower(ScriptBlockText),""rundll32""), ""4"", 0) | eval suspkeywrd=if(match(ScriptBlockText, ""(?i)(bitstransfer|mimik|metasp|AssemblyBuilderAccess|Reflection\.Assembly|shellcode|injection|cnvert|shell\.application|start-process|Rc4ByteStream|System\.Security\.Cryptography|lsass\.exe|localadmin|LastLoggedOn|hijack|BackupPrivilege|ngrok|comsvcs|backdoor|brute.?force|Port.?Scan|Exfiltration|exploit|DisableRealtimeMonitoring|beacon)""),1,0) | eval syswow64 = if(match(lower(ScriptBlockText),""syswow64""), ""3"", 0) | eval httplocal = if(match(lower(ScriptBlockText),""http://127.0.0.1""), ""4"", 0) | eval reflection = if(match(lower(ScriptBlockText),""reflection""), ""1"", 0) | eval invokewmi=if(match(lower(ScriptBlockText), ""(?i)(wmiobject|WMIMethod|RemoteWMI|PowerShellWmi|wmicommand)""),5,0) | eval downgrade=if(match(ScriptBlockText, ""(?i)([-]ve*r*s*i*o*n*\s+2)"") OR match(lower(ScriptBlockText),""powershell -version""),3,0) | eval compressed=if(match(ScriptBlockText, ""(?i)GZipStream|::Decompress|IO.Compression|write-zip|(expand|compress)-Archive""),5,0) | eval invokecmd = if(match(lower(ScriptBlockText),""invoke-command""), ""4"", 0) | addtotals fieldname=Score DoIt, enccom, suspcmdlet, suspkeywrd, compressed, downgrade, mimikatz, iex, empire, rundll32, webclient, syswow64, httplocal, reflection, invokewmi, invokecmd, base64, get | stats values(Score) by DoIt, enccom, compressed, downgrade, iex, mimikatz, rundll32, empire, webclient, syswow64, httplocal, reflection, invokewmi, invokecmd, base64, get, suspcmdlet, suspkeywrd | `powershell_4104_hunting_filter`",80,"['T1059', 'T1059.001']","{'ngrok', 'powershell', 'empire', 'mimikatz', 'wiper', 'psexec', 'expand', 'rundll32'}",,"['powershell', 'logging', 'splunk', 'script', 'suspicious']"
s585,Powershell Creating Thread Mutex,"The following analytic identifies suspicious PowerShell script execution via EventCode 4104 that is using the `mutex` function. This function is commonly seen in some obfuscated PowerShell scripts to make sure that only one instance of there process is running on a compromise machine. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.","`powershell` EventCode=4104 ScriptBlockText = ""*Threading.Mutex*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_creating_thread_mutex_filter`",50,"['T1027', 'T1027.005', 'T1059.001']",{'powershell'},257.0,"['powershell', 'processes', 'mutex', 'process', 'scripts']"
s586,Powershell Disable Security Monitoring,"This search is to identifies a modification in registry to disable the windows denfender real time behavior monitoring. This event or technique is commonly seen in RAT, bot, or Trojan to disable AV to evade detections.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=""*set-mppreference*"" AND Processes.process IN (""*disablerealtimemonitoring*"",""*disableioavprotection*"",""*disableintrusionpreventionsystem*"",""*disablescriptscanning*"",""*disableblockatfirstseen*"",""*DisableBehaviorMonitoring*"",""*drtm *"",""*dioavp *"",""*dscrptsc *"",""*dbaf *"",""*dbm *"") by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_disable_security_monitoring_filter`",50,"['T1562.001', 'T1562']","{'revil', 'registry modification', 'powershell'}",161.0,"['disable', 'registry', 'trojan', 'av', 'detections']"
s587,PowerShell Domain Enumeration,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies specific PowerShell modules typically used to enumerate an organizations domain or users. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText IN (*get-netdomaintrust*, *get-netforesttrust*, *get-addomain*, *get-adgroupmember*, *get-domainuser*) | stats count min(_time) as firstTime max(_time) as lastTime by Computer EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_domain_enumeration_filter`",60,"['T1059', 'T1059.001']","{'wiper', 'powershell'}",,"['powershell', 'logs', 'processes', 'logging', 'execution']"
s588,Powershell Enable SMB1Protocol Feature,"This search is to detect a suspicious enabling of smb1protocol through ""powershell.exe"". This technique was seen in some ransomware (like reddot) where it enable smb share to do the lateral movement and encrypt other files within the compromise network system.","`powershell` EventCode=4104 ScriptBlockText = ""*Enable-WindowsOptionalFeature*"" ScriptBlockText = ""*SMB1Protocol*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_enable_smb1protocol_feature_filter`",50,"['T1027', 'T1027.005']","{'wiper', 'powershell'}",,"['smb1protocol', 'smb', 'ransomware', 'powershell', 'search']"
s589,Powershell Execute COM Object,This search is to detect a COM CLSID execution through powershell. This technique was seen in several adversaries and malware like ransomware conti where it has a feature to execute command using COM Object. This technique may use by network operator at some cases but a good indicator if some application want to gain privilege escalation or bypass uac.,"`powershell` EventCode=4104 ScriptBlockText = ""*CreateInstance([type]::GetTypeFromCLSID*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_execute_com_object_filter`",10,"['T1546.015', 'T1546', 'T1059.001']","{'malware', 'wiper', 'powershell', 'conti'}",,"['malware', 'powershell', 'ransomware', 'execute', 'clsid']"
s590,Powershell Fileless Process Injection via GetProcAddress,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable no critical endpoints or all. \
This analytic identifies `GetProcAddress` in the script block. This is not normal to be used by most PowerShell scripts and is typically unsafe/malicious. Many attack toolkits use GetProcAddress to obtain code execution. \
In use, `$var_gpa = $var_unsafe_native_methods.GetMethod(GetProcAddress` and later referenced/executed elsewhere. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.",`powershell` EventCode=4104 ScriptBlockText=*getprocaddress* | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_fileless_process_injection_via_getprocaddress_filter`,60,"['T1059', 'T1055', 'T1059.001']","{'wiper', 'powershell'}",,"['powershell', 'logging', 'logs', 'getprocaddress', 'execution']"
s591,Powershell Fileless Script Contains Base64 Encoded Content,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies `FromBase64String` within the script block. A typical malicious instance will include additional code. \
Command example - `[Byte[]]$var_code = [System.Convert]::FromBase64String(38uqIyMjQ6rG....` \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.",`powershell` EventCode=4104 ScriptBlockText=*frombase64string* | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_fileless_script_contains_base64_encoded_content_filter`,70,"['T1059', 'T1027', 'T1059.001']","{'wiper', 'powershell'}",,"['powershell', 'frombase64string', 'processes', 'execution', 'logs']"
s592,PowerShell Get LocalGroup Discovery,"The following hunting analytic identifies the use of `get-localgroup` being used with PowerShell to identify local groups on the endpoint. During triage, review parallel processes and identify any further suspicious behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=powershell.exe OR Processes.process_name=cmd.exe) (Processes.process=""*get-localgroup*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `powershell_get_localgroup_discovery_filter`",30,"['T1069', 'T1069.001']",{'powershell'},5.0,"['localgroup', 'groups', 'powershell', 'local', 'processes']"
s593,Powershell Get LocalGroup Discovery with Script Block Logging,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies PowerShell cmdlet - `get-localgroup` being ran. Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText = ""*get-localgroup*"" | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_get_localgroup_discovery_with_script_block_logging_filter`",30,"['T1069', 'T1069.001']",{'powershell'},5.0,"['powershell', 'processes', 'suspicious', 'suspicion', 'logs']"
s594,PowerShell Loading DotNET into Memory via Reflection,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable no critical endpoints or all. \
This analytic identifies the use of PowerShell loading .net assembly via reflection. This is commonly found in malicious PowerShell usage, including Empire and Cobalt Strike. In addition, the `load(` value may be modifed by removing `(` and it will identify more events to review. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.","`powershell` EventCode=4104 ScriptBlockText IN (""*[system.reflection.assembly]::load(*"",""*[reflection.assembly]*"", ""*reflection.assembly*"") | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_loading_dotnet_into_memory_via_reflection_filter`",70,"['T1059', 'T1059.001']","{'wiper', 'cobalt strike', 'powershell', 'empire'}",,"['powershell', 'processes', 'execution', 'logs', 'logging']"
s595,Powershell Processing Stream Of Data,"The following analytic identifies suspicious PowerShell script execution via EventCode 4104 that is processing compressed stream data. This is typically found in obfuscated PowerShell or PowerShell executing embedded .NET or binary files that are stream flattened and will be deflated durnig execution. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.","`powershell` EventCode=4104 ScriptBlockText = ""*IO.Compression.*"" OR ScriptBlockText = ""*IO.StreamReader*"" OR ScriptBlockText = ""*]::Decompress*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_processing_stream_of_data_filter`",50,"['T1059', 'T1059.001']","{'wiper', 'powershell'}",,"['powershell', 'obfuscated', 'processes', 'artifacts', '4104']"
s596,Powershell Remote Thread To Known Windows Process,this search is designed to detect suspicious powershell process that tries to inject code and to known/critical windows process and execute it using CreateRemoteThread. This technique is seen in several malware like trickbot and offensive tooling like cobaltstrike where it load a shellcode to svchost.exe to execute reverse shell to c2 and download another payload,"`sysmon` EventCode = 8 parent_process_name IN (""powershell_ise.exe"", ""powershell.exe"") TargetImage IN (""*\\svchost.exe"",""*\\csrss.exe"" ""*\\gpupdate.exe"", ""*\\explorer.exe"",""*\\services.exe"",""*\\winlogon.exe"",""*\\smss.exe"",""*\\wininit.exe"",""*\\userinit.exe"",""*\\spoolsv.exe"",""*\\taskhost.exe"") | stats  min(_time) as firstTime max(_time) as lastTime count by SourceImage process_name SourceProcessId SourceProcessGuid TargetImage TargetProcessId NewThreadId StartAddress Computer EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_remote_thread_to_known_windows_process_filter`",70,['T1055'],"{'malware', 'shell', 'trickbot', 'powershell'}",8.0,"['malware', 'powershell', 'shellcode', 'process', 'shell']"
s597,Powershell Remove Windows Defender Directory,This analytic will identify a suspicious PowerShell command used to delete the Windows Defender folder. This technique was seen used by the WhisperGate malware campaign where it used Nirsofts advancedrun.exe to gain administrative privileges to then execute a PowerShell command to delete the Windows Defender folder. This is a good indicator the offending process is trying corrupt a Windows Defender installation.,"`powershell` EventCode=4104 ScriptBlockText = ""*rmdir *"" AND ScriptBlockText = ""*\\Microsoft\\Windows Defender*"" | stats count min(_time) as firstTime max(_time) as lastTime by Opcode Computer UserID EventCode ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_remove_windows_defender_directory_filter` ",100,"['T1562.001', 'T1562']","{'malware', 'powershell', 'whispergate'}",,"['malware', 'defender', 'suspicious', 'process', 'folder']"
s598,PowerShell Start-BitsTransfer,"Start-BitsTransfer is the PowerShell ""version"" of BitsAdmin.exe. Similar functionality is present. This technique variation is not as commonly used by adversaries, but has been abused in the past. Lesser known uses include the ability to set the `-TransferType` to `Upload` for exfiltration of files. In an instance where `Upload` is used, it is highly possible files will be archived. During triage, review parallel processes and process lineage. Capture any files on disk and review. For the remote domain or IP, what is the reputation?",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` Processes.process=*start-bitstransfer* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.original_file_name Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_start_bitstransfer_filter`,70,['T1197'],"{'powershell', 'bitsadmin'}",340.0,"['bitstransfer', 'bitsadmin', 'powershell', 'files', 'capture']"
s599,Powershell Using memory As Backing Store,"The following analytic identifies suspicious PowerShell script execution via EventCode 4104 that is using memory stream as new object backstore. The malicious PowerShell script will contain stream flate data and will be decompressed in memory to run or drop the actual payload. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.",`powershell` EventCode=4104 ScriptBlockText = *New-Object* ScriptBlockText = *IO.MemoryStream* | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_using_memory_as_backing_store_filter`,50,"['T1059.001', 'T1059']","{'wiper', 'powershell'}",,"['powershell', 'malicious', 'artifacts', '4104', 'processes']"
s600,Powershell Windows Defender Exclusion Commands,"This analytic will detect a suspicious process commandline related to windows defender exclusion feature. This command is abused by adversaries, malware author and red teams to bypassed Windows Defender Anti-Virus product by excluding  folder path, file path, process, extensions and etc. from its real time or schedule scan to execute their malicious code. This is a good indicator for defense evasion and to look further for events after this behavior.","`powershell` EventCode=4104 (Message = ""*Add-MpPreference *"" OR Message = ""*Set-MpPreference *"") AND Message = ""*-exclusion*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_windows_defender_exclusion_commands_filter`",80,"['T1562.001', 'T1562']","{'malware', 'remcos', 'powershell', 'whispergate'}",,"['malware', 'virus', 'malicious', 'defender', 'anti']"
s601,PowerShell - Connect To Internet With Hidden Window,"The following hunting analytic identifies PowerShell commands utilizing the WindowStyle parameter to hide the window on the compromised endpoint. This combination of command-line options is suspicious because it is overriding the default PowerShell execution policy, attempts to hide its activity from the user, and connects to the Internet. Removed in this version of the query is New-Object. The analytic identifies all variations of WindowStyle, as PowerShell allows the ability to shorten the parameter. For example w, win, windowsty and so forth. In addition, through our research it was identified that PowerShell will interpret different command switch types beyond the hyphen. We have added endash, emdash, horizontal bar, and forward slash.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.dest Processes.process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,""(?i)[\-|\/|–|—|―]w(in*d*o*w*s*t*y*l*e*)*\s+[^-]"") | `powershell___connect_to_internet_with_hidden_window_filter`",90,"['T1059.001', 'T1059']","{'hafnium', 'cve-2021-44228', 'powershell', 'wiper', 'ps1', 'mudcarp'}",,"['powershell', 'windowstyle', 'windowsty', 'command', 'compromised']"
s602,Prevent Automatic Repair Mode using Bcdedit,This search is to detect a suspicious bcdedit.exe execution to ignore all failures. This technique was used by ransomware to prevent the compromise machine automatically boot in repair mode.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""bcdedit.exe"" Processes.process = ""*bootstatuspolicy*""  Processes.process = ""*ignoreallfailures*"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `prevent_automatic_repair_mode_using_bcdedit_filter`",70,['T1490'],{'exe'},137.0,"['bcdedit', 'ransomware', 'boot', 'exe', 'search']"
s603,Print Spooler Adding A Printer Driver,"The following analytic identifies new printer drivers being load by utilizing the Windows PrintService operational logs, EventCode 316. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. \
Within the proof of concept code, the following event will occur - ""Printer driver 1234 for Windows x64 Version-3 was added or updated. Files:- UNIDRV.DLL, kernelbase.dll, evil.dll. No user action is required."" \
During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events and review the source of where the exploitation began.","`printservice` EventCode=316 category = ""Adding a printer driver"" Message = ""*kernelbase.dll,*"" Message = ""*UNIDRV.DLL,*"" Message = ""*.DLL.*"" | stats  count min(_time) as firstTime max(_time) as lastTime by OpCode EventCode ComputerName Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `print_spooler_adding_a_printer_driver_filter`",80,"['T1547.012', 'T1547']","{'driver', 'cve-2021-34527'}",,"['printservice', 'printer', 'printnightmare', 'driver', 'drivers']"
s604,Print Spooler Failed to Load a Plug-in,"The following analytic identifies driver load errors utilizing the Windows PrintService Admin logs. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. \
Within the proof of concept code, the following error will occur - ""The print spooler failed to load a plug-in module C:\Windows\system32\spool\DRIVERS\x64\3\meterpreter.dll, error code 0x45A. See the event user data for context information."" \
The analytic is based on file path and failure to load the plug-in. \
During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.","`printservice` ((ErrorCode=""0x45A"" (EventCode=""808"" OR EventCode=""4909"")) OR (""The print spooler failed to load a plug-in module"" OR ""\\drivers\\x64\\"")) | stats count min(_time) as firstTime max(_time) as lastTime by OpCode EventCode ComputerName Message | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `print_spooler_failed_to_load_a_plug_in_filter`",80,"['T1547.012', 'T1547']","{'meterpreter', 'driver', 'cve-2021-34527'}",,"['printservice', 'print', 'spooler', 'driver', 'printnightmare']"
s605,Processes launching netsh,"This search looks for processes launching netsh.exe. Netsh is a command-line scripting utility that allows you to, either locally or remotely, display or modify the network configuration of a computer that is currently running. Netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed. In this search, we are looking for processes spawned by netsh.exe and executing commands via the command line.","| tstats `security_content_summariesonly` count values(Processes.process) AS Processes.process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_netsh` by Processes.parent_process_name Processes.parent_process Processes.original_file_name Processes.process_name Processes.user Processes.dest |`drop_dm_object_name(""Processes"")` |`security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` |`processes_launching_netsh_filter`",60,"['T1562.004', 'T1562']","{'dll', 'netsh', 'azorult'}",,"['netsh', 'dll', 'processes', 'command', 'commands']"
s606,Process Creating LNK file in Suspicious Location,This search looks for a process launching an `*.lnk` file under `C:\User*` or `*\Local\Temp\*`. This is common behavior used by various spear phishing tools.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name=""*.lnk"" AND (Filesystem.file_path=""C:\\User\\*"" OR Filesystem.file_path=""*\\Temp\\*"") by _time span=1h Filesystem.process_guid Filesystem.file_name Filesystem.file_path Filesystem.file_hash Filesystem.user | `drop_dm_object_name(Filesystem)` | rename process_guid as lnk_guid | join lnk_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=* by _time span=1h Processes.parent_process_guid Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process | `drop_dm_object_name(Processes)` | rename parent_process_guid as lnk_guid | fields _time lnk_guid process_id dest process_name process_path process] | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | table firstTime, lastTime, lnk_guid, process_id, user, dest, file_name, file_path, process_name, process, process_path, file_hash | `process_creating_lnk_file_in_suspicious_location_filter`",70,"['T1566', 'T1566.002']",,7.0,"['phishing', 'spear', 'lnk', 'launching', 'file']"
s607,Process Deleting Its Process File Path,This detection is to identify a suspicious process that tries to delete the process file path related to its process. This technique is known to be defense evasion once a certain condition of malware is satisfied or not. Clop ransomware use this technique where it will try to delete its process file path using a .bat command if the keyboard layout is not the layout it tries to infect.,"`sysmon` EventCode=1 CommandLine = ""* /c *"" CommandLine = ""* del*"" Image = ""*\\cmd.exe"" | eval result = if(like(process,""%"".parent_process.""%""), ""Found"", ""Not Found"") | stats min(_time) as firstTime max(_time) as lastTime count by Computer user ParentImage ParentCommandLine Image CommandLine EventCode ProcessID result | where result = ""Found"" | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_deleting_its_process_file_path_filter`",60,['T1070'],"{'malware', 'remcos', 'whispergate', 'clop'}",,"['malware', 'ransomware', 'clop', 'process', 'detection']"
s608,Process Execution via WMI,"The following analytic identifies `WmiPrvSE.exe` spawning a process. This typically occurs when a process is instantiated from a local or remote process using `wmic.exe`. During triage, review parallel processes for suspicious behavior or commands executed. Review the process and command-line spawning from `wmiprvse.exe`. Contain and remediate the endpoint as necessary.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=WmiPrvSE.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_execution_via_wmi_filter` ,70,['T1047'],"{'exe', 'wmi'}",139.0,"['wmiprvse', 'wmic', 'processes', 'process', 'exe']"
s609,Process Kill Base On File Path,The following analytic identifies the use of `wmic.exe` using `delete` to remove a executable path. This is typically ran via a batch file during beginning stages of an adversary setting up for mining on an endpoint.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where `process_wmic` AND Processes.process=""*process*"" AND Processes.process=""*executablepath*"" AND Processes.process=""*delete*"" by  Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_kill_base_on_file_path_filter`",70,"['T1562.001', 'T1562']","{'exe', 'wmi'}",248.0,"['executable', 'wmic', 'exe', 'remove', 'path']"
s610,Process Writing DynamicWrapperX,"DynamicWrapperX is an ActiveX component that can be used in a script to call Windows API functions, but it requires the dynwrapx.dll to be installed and registered. With that, a binary writing dynwrapx.dll to disk and registering it into the registry is highly suspect. Why is it needed? In most malicious instances, it will be written to disk at a non-standard location. During triage, review parallel processes and pivot on the process_guid. Review the registry for any suspicious modifications meant to load dynwrapx.dll. Identify any suspicious module loads of dynwrapx.dll. This will identify the process that will invoke vbs/wscript/cscript.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time Processes.process_id Processes.process_name Processes.dest Processes.process_guid Processes.user | `drop_dm_object_name(Processes)` | join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem where Filesystem.file_name=""dynwrapx.dll"" by _time Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.process_guid Filesystem.user | `drop_dm_object_name(Filesystem)` | fields _time process_guid file_path file_name file_create_time user dest process_name] | stats count min(_time) as firstTime max(_time) as lastTime by dest process_name process_guid file_name file_path file_create_time user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `process_writing_dynamicwrapperx_filter`",80,"['T1059', 'T1559.001']","{'dll', 'remcos', 'koadic'}",,"['dynamicwrapperx', 'dynwrapx', 'dll', 'wscript', 'cscript']"
s611,Ransomware Notes bulk creation,"The following analytics identifies a big number of instance of ransomware notes (filetype e.g .txt, .html, .hta) file creation to the infected machine. This behavior is a good sensor if the ransomware note filename is quite new for security industry or the ransomware note filename is not in your ransomware lookup table list for monitoring.","`sysmon` EventCode=11 file_name IN (""*\.txt"",""*\.html"",""*\.hta"") |bin _time span=10s | stats min(_time) as firstTime max(_time) as lastTime dc(TargetFilename) as unique_readme_path_count values(TargetFilename) as list_of_readme_path by Computer Image file_name | where unique_readme_path_count >= 15 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `ransomware_notes_bulk_creation_filter`",90,['T1486'],"{'blackmatter', 'darkside', 'clop'}",,"['ransomware', 'file', 'filetype', 'notes', 'filename']"
s612,Recon AVProduct Through Pwh or WMI,"The following analytic identifies suspicious PowerShell script execution via EventCode 4104 performing checks to identify anti-virus products installed on the endpoint. This technique is commonly found in malware and APT events where the adversary will map all running security applications or services. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.","`powershell` EventCode=4104 (ScriptBlockText = ""*SELECT*"" OR ScriptBlockText = ""*WMIC*"") AND (ScriptBlockText = ""*AntiVirusProduct*"" OR ScriptBlockText = ""*AntiSpywareProduct*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `recon_avproduct_through_pwh_or_wmi_filter`",70,['T1592'],"{'maze', 'powershell', 'wiper', 'malware', 'wmi'}",,"['malware', 'powershell', 'virus', 'execution', 'script']"
s613,Recon Using WMI Class,"The following analytic identifies suspicious PowerShell via EventCode 4104, where WMI is performing an event query looking for running processes or running services. This technique is commonly found where the adversary will identify services and system information on the compromised machine. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.","`powershell` EventCode=4104 (ScriptBlockText= ""*SELECT*"" OR ScriptBlockText= ""*Get-WmiObject*"") AND (ScriptBlockText= ""*Win32_Bios*"" OR ScriptBlockText= ""*Win32_OperatingSystem*"" OR ScriptBlockText= ""*Win32_Processor*"" OR ScriptBlockText= ""*Win32_ComputerSystem*"" OR ScriptBlockText= ""*Win32_ComputerSystemProduct*"" OR ScriptBlockText= ""*Win32_ShadowCopy*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `recon_using_wmi_class_filter`",75,"['T1592', 'T1059.001']","{'industroyer2', 'industroyer', 'maze', 'powershell', 'wiper', 'wmi'}",,"['wmi', 'powershell', 'processes', 'compromised', 'suspicious']"
s614,Recursive Delete of Directory In Batch CMD,This search is to detect a suspicious commandline designed to delete files or directory recursive using batch command. This technique was seen in ransomware (reddot) where it it tries to delete the files in recycle bin to impaire user from recovering deleted files.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_cmd` Processes.process=*/c*  Processes.process=* rd * Processes.process=""*/s*"" Processes.process=""*/q*"" by Processes.user Processes.process_name Processes.parent_process_name Processes.parent_process Processes.process Processes.process_id Processes.dest |`drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `recursive_delete_of_directory_in_batch_cmd_filter`",50,"['T1070.004', 'T1070']",,6.0,"['ransomware', 'commandline', 'delete', 'search', 'reddot']"
s615,Registry Keys for Creating SHIM Databases,"This search looks for registry activity associated with application compatibility shims, which can be leveraged by attackers for various nefarious purposes.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where Registry.registry_path=*CurrentVersion\\AppCompatFlags\\Custom* OR Registry.registry_path=*CurrentVersion\\AppCompatFlags\\InstalledSDB* by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `registry_keys_for_creating_shim_databases_filter`",70,"['T1546.011', 'T1546']","{'leverage', 'registry modification'}",29.0,"['registry', 'compatibility', 'application', 'attackers', 'search']"
s616,Registry Keys Used For Persistence,The search looks for modifications to registry keys that can be used to launch an application or service at system startup.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce OR Registry.registry_path=*\\currentversion\\run* OR Registry.registry_path=*\\currentVersion\\Windows\\Appinit_Dlls* OR Registry.registry_path=*\\CurrentVersion\\Winlogon\\Shell* OR Registry.registry_path=*\\CurrentVersion\\Winlogon\\Notify* OR Registry.registry_path=*\\CurrentVersion\\Winlogon\\Userinit* OR Registry.registry_path=*\\CurrentVersion\\Winlogon\\VmApplet* OR Registry.registry_path=*\\currentversion\\policies\\explorer\\run* OR Registry.registry_path=*\\currentversion\\runservices* OR Registry.registry_path=HKLM\\SOFTWARE\\Microsoft\\Netsh\\* OR (Registry.registry_path=""*Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options*"" AND Registry.registry_key_name=Debugger) OR (Registry.registry_path=""*\\CurrentControlSet\\Control\\Lsa"" AND Registry.registry_key_name=""Security Packages"") OR (Registry.registry_path=""*\\CurrentControlSet\\Control\\Lsa\\OSConfig"" AND Registry.registry_key_name=""Security Packages"") OR (Registry.registry_path=""*\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\*"") OR (Registry.registry_path=""*currentVersion\\Windows"" AND Registry.registry_key_name=""Load"") OR (Registry.registry_path=""*\\CurrentVersion"" AND Registry.registry_key_name=""Svchost"") OR (Registry.registry_path=""*\\CurrentControlSet\Control\Session Manager""AND Registry.registry_key_name=""BootExecute"") OR (Registry.registry_path=""*\\Software\\Run"" AND Registry.registry_key_name=""auto_update"")) by Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.registry_key_name | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `registry_keys_used_for_persistence_filter`",80,"['T1547.001', 'T1547']","{'registry modification', 'netsh', 'icedid', 'azorult', 'remcos', 'mudcarp', 'emotet'}",,"['registry', 'startup', 'launch', 'search', 'application']"
s617,Registry Keys Used For Privilege Escalation,"This search looks for modifications to registry keys that can be used to elevate privileges. The registry keys under ""Image File Execution Options"" are used to intercept calls to an executable and can be used to attach malicious binaries to benign system binaries.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where (Registry.registry_path=""*Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options*"") AND (Registry.registry_value_name=GlobalFlag OR Registry.registry_value_name=Debugger) by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.registry_key_name | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `registry_keys_used_for_privilege_escalation_filter`",80,"['T1546.012', 'T1546']","{'wiper', 'registry modification', 'privilege'}",,"['privileges', 'registry', 'executable', 'binaries', 'malicious']"
s618,Regsvr32 Silent and Install Param Dll Loading,"This analytic is to detect a loading of dll using regsvr32 application with silent parameter and dllinstall execution. This technique was seen in several RAT malware similar to remcos, njrat and adversaries to load their malicious DLL on the compromised machine. This TTP may executed by normal 3rd party application so it is better to pivot by the parent process, parent command-line and command-line of the file that execute this regsvr32.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` AND Processes.process=""*/i*"" by Processes.dest Processes.parent_process Processes.process Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,""(?i)[\-|\/][Ss]{1}"") | `regsvr32_silent_and_install_param_dll_loading_filter`",60,"['T1218', 'T1218.010']","{'dll', 'njrat', 'wiper', 'remcos', 'malware'}",,"['dll', 'malware', 'dllinstall', 'regsvr32', 'malicious']"
s619,Regsvr32 with Known Silent Switch Cmdline,"The following analytic identifies Regsvr32.exe utilizing the silent switch to load DLLs. This technique has most recently been seen in IcedID campaigns to load its initial dll that will download the 2nd stage loader that will download and decrypt the config payload. The switch type may be either a hyphen `-` or forward slash `/`. This behavior is typically found with `-s`, and it is possible there are more switch types that may be used. \ During triage, review parallel processes and capture any artifacts that may have landed on disk. Isolate and contain the endpoint as necessary.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` by Processes.user Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.dest Processes.process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,""(?i)[\-|\/][Ss]{1}"") | `regsvr32_with_known_silent_switch_cmdline_filter`",70,"['T1218', 'T1218.010']","{'dll', 'exe', 'remcos', 'icedid'}",,"['regsvr32', 'dlls', 'dll', 'exe', 'loader']"
s620,Reg exe Manipulating Windows Services Registry Keys,The search looks for reg.exe modifying registry keys that define Windows services and their configurations.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process_name) as process_name values(Processes.parent_process_name) as parent_process_name values(Processes.user) as user FROM datamodel=Endpoint.Processes where Processes.process_name=reg.exe Processes.process=*reg* Processes.process=*add* Processes.process=*Services* by Processes.process_id Processes.dest Processes.process | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `reg_exe_manipulating_windows_services_registry_keys_filter`",75,"['T1574.011', 'T1574']","{'exe', 'registry modification'}",29.0,"['registry', 'services', 'exe', 'reg', 'configurations']"
s621,Remcos client registry install entry,This search detects registry key license at host where Remcos RAT agent is installed.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where (Registry.registry_key_name=*\\Software\\Remcos*) by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data |`remcos_client_registry_install_entry_filter`",90,['T1112'],"{'registry modification', 'remcos'}",,"['remcos', 'registry', 'rat', 'license', 'agent']"
s622,Remcos RAT File Creation in Remcos Folder,"This search is to detect file creation in remcos folder in appdata which is the keylog and clipboard logs that will be send to its c2 server. This is really a good TTP indicator that there is a remcos rat in the system that do keylogging, clipboard grabbing and audio recording.","|tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*.dat"") Filesystem.file_path = ""*\\remcos\\*"" by _time Filesystem.file_name Filesystem.file_path Filesystem.dest Filesystem.file_create_time | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remcos_rat_file_creation_in_remcos_folder_filter`",100,['T1113'],{'remcos'},,"['keylog', 'keylogging', 'remcos', 'ttp', 'logs']"
s623,Remote Process Instantiation via DCOM and PowerShell,"This analytic looks for the execution of `powershell.exe` with arguments utilized to start a process on a remote endpoint by abusing the DCOM protocol. Specifically, this search looks for the abuse of ShellExecute and ExecuteShellCommand. Red Teams and adversaries alike may abuse DCOM and `powershell.exe` for lateral movement and remote code execution.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=""*Document.ActiveView.ExecuteShellCommand*"" OR Processes.process=""*Document.Application.ShellExecute*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_dcom_and_powershell_filter`",90,"['T1021', 'T1021.003']","{'leverage', 'shell', 'powershell'}",39.0,"['powershell', 'shellexecute', 'executeshellcommand', 'execution', 'dcom']"
s624,Remote Process Instantiation via DCOM and PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of PowerShell with arguments utilized to start a process on a remote endpoint by abusing the DCOM protocol. Specifically, this search looks for the abuse of ShellExecute and ExecuteShellCommand. Red Teams and adversaries alike may abuse DCOM for lateral movement and remote code execution.","`powershell` EventCode=4104 (ScriptBlockText=""*Document.Application.ShellExecute*"" OR ScriptBlockText=""*Document.ActiveView.ExecuteShellCommand*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_process_instantiation_via_dcom_and_powershell_script_block_filter`",90,"['T1021', 'T1021.003']","{'leverage', 'shell', 'powershell'}",39.0,"['shellexecute', 'executeshellcommand', 'powershell', 'execution', 'dcom']"
s625,Remote Process Instantiation via WinRM and PowerShell,"This analytic looks for the execution of `powershell.exe` with arguments utilized to start a process on a remote endpoint by abusing the WinRM protocol. Specifically, this search looks for the abuse of the `Invoke-Command` commandlet. Red Teams and adversaries alike may abuse WinRM and `powershell.exe` for lateral movement and remote code execution.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=""*Invoke-Command*"" AND Processes.process=""*-ComputerName*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_winrm_and_powershell_filter`",90,"['T1021', 'T1021.006']","{'leverage', 'exe', 'powershell'}",38.0,"['powershell', 'winrm', 'exe', 'execution', 'commandlet']"
s626,Remote Process Instantiation via WinRM and PowerShell Script Block,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of PowerShell with arguments utilized to start a process on a remote endpoint by abusing the WinRM protocol. Specifically, this search looks for the abuse of the `Invoke-Command` commandlet. Red Teams and adversaries alike may abuse WinRM for lateral movement and remote code execution.","`powershell` EventCode=4104 (ScriptBlockText=""*Invoke-Command*"" AND ScriptBlockText=""*-ComputerName*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_process_instantiation_via_winrm_and_powershell_script_block_filter`",90,"['T1021', 'T1021.006']","{'leverage', 'powershell'}",38.0,"['powershell', 'winrm', 'invoke', 'commandlet', 'execution']"
s627,Remote Process Instantiation via WinRM and Winrs,This analytic looks for the execution of `winrs.exe` with command-line arguments utilized to start a process on a remote endpoint. Red Teams and adversaries alike may abuse the WinRM protocol and this binary for lateral movement and remote code execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=winrs.exe OR Processes.original_file_name=winrs.exe) (Processes.process=""*-r:*"" OR Processes.process=""*-remote:*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_winrm_and_winrs_filter`",90,"['T1021', 'T1021.006']","{'leverage', 'exe'}",341.0,"['winrm', 'exe', 'execution', 'winrs', 'endpoint']"
s628,Remote Process Instantiation via WMI,This analytic identifies wmic.exe being launched with parameters to spawn a process on a remote system. Red Teams and adversaries alike may abuse WMI and this binary for lateral movement and remote code execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` (Processes.process=""*/node:*"" AND Processes.process=""*process*"" AND Processes.process=""*call*"" AND  Processes.process=""*create*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_wmi_filter`",70,['T1047'],"{'exe', 'wmi'}",23.0,"['wmic', 'wmi', 'exe', 'process', 'execution']"
s629,Remote Process Instantiation via WMI and PowerShell,This analytic looks for the execution of `powershell.exe` leveraging the `Invoke-WmiMethod` commandlet complemented with arguments utilized to start a process on a remote endpoint by abusing WMI. Red Teams and adversaries alike may abuse WMI and `powershell.exe` for lateral movement and remote code execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` (Processes.process=""*Invoke-WmiMethod*"" AND Processes.process=""*-CN*"" AND Processes.process=""*-Class Win32_Process*"" AND  Processes.process=""*-Name create*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `remote_process_instantiation_via_wmi_and_powershell_filter`",90,['T1047'],"{'leverage', 'exe', 'powershell', 'wmi'}",341.0,"['powershell', 'wmi', 'exe', 'wmimethod', 'execution']"
s630,Remote Process Instantiation via WMI and PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Invoke-WmiMethod` commandlet with arguments utilized to start a process on a remote endpoint by abusing WMI. Red Teams and adversaries alike may abuse WMI and this commandlet for lateral movement and remote code execution.,"`powershell` EventCode=4104 (Message=""*Invoke-WmiMethod*"" AND Message=""*-CN*"" AND Message=""*-Class Win32_Process*"" AND Message=""*-Name create*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `remote_process_instantiation_via_wmi_and_powershell_script_block_filter`",90,['T1047'],"{'leverage', 'powershell', 'wmi'}",23.0,"['wmi', 'wmimethod', 'powershell', 'execution', 'logging']"
s631,Remote System Discovery with Adsisearcher,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain computers. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain computers for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText = ""*adsisearcher*"" AND ScriptBlockText = ""*objectcategory=computer*"" AND ScriptBlockText IN (""*findAll()*"",""*findOne()*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `remote_system_discovery_with_adsisearcher_filter`",30,['T1018'],"{'leverage', 'powershell'}",307.0,"['powershell', 'adsisearcher', 'script', 'logging', 'computers']"
s632,Remote System Discovery with Dsquery,This analytic looks for the execution of `dsquery.exe` with command-line arguments utilized to discover remote systems. The `computer` argument returns a list of all computers registered in the domain. Red Teams and adversaries alike engage in remote system discovery for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""dsquery.exe"") (Processes.process=""*computer*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_system_discovery_with_dsquery_filter`",30,['T1018'],{'dsquery'},,"['dsquery', 'command', 'discover', 'computers', 'discovery']"
s633,Remote System Discovery with Net,This analytic looks for the execution of `net.exe` or `net1.exe` with command-line arguments utilized to discover remote systems. The argument `domain computers /domain` returns a list of all domain computers. Red Teams and adversaries alike use net.exe to identify remote systems for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""net.exe"" OR Processes.process_name=""net1.exe"") (Processes.process=""*domain computers*"" AND Processes.process=*/do*) OR (Processes.process=""*view*"" AND Processes.process=*/do*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_system_discovery_with_net_filter`",30,['T1018'],"{'net.exe', 'exe'}",163.0,"['net', 'exe', 'net1', 'command', 'computers']"
s634,Remote System Discovery with Wmic,This analytic looks for the execution of `wmic.exe` with command-line arguments utilized to discover remote systems. The arguments utilized in this command return a list of all the systems registered in the domain. Red Teams and adversaries alike may leverage WMI and wmic.exe to identify remote systems for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""wmic.exe"") (Processes.process=*/NAMESPACE:\\\\root\\directory\\ldap* AND Processes.process=*ds_computer* AND Processes.process=""*GET ds_samaccountname*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_system_discovery_with_wmic_filter`",30,['T1018'],"{'leverage', 'exe', 'wmi'}",23.0,"['wmic', 'wmi', 'exe', 'command', 'systems']"
s635,Remote WMI Command Attempt,"The following analytic identifies usage of `wmic.exe` spawning a local or remote process, identified by the `node` switch. During triage, review parallel processes for additional commands executed. Look for any file modifications before and after `wmic.exe` execution. In addition, identify the remote endpoint and confirm execution or file modifications. Contain and isolate the endpoint as needed.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process=*node* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `remote_wmi_command_attempt_filter`,60,['T1047'],"{'exe', 'wmi'}",139.0,"['wmic', 'processes', 'exe', 'process', 'execution']"
s636,Resize ShadowStorage volume,The following analytics identifies the resizing of shadowstorage by ransomware malware to avoid the shadow volumes being made again. this technique is an alternative by ransomware attacker than deleting the shadowstorage which is known alert in defensive team. one example of ransomware that use this technique is CLOP ransomware where it drops a .bat file that will resize the shadowstorage to minimum size as much as possible,"| tstats `security_content_summariesonly` values(Processes.process) as cmdline values(Processes.parent_process_name) as parent_process values(Processes.process_name) as process_name min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name = ""cmd.exe"" OR Processes.parent_process_name = ""powershell.exe"" OR Processes.parent_process_name = ""powershell_ise.exe"" OR Processes.parent_process_name =  ""wmic.exe"" Processes.process_name = ""vssadmin.exe"" Processes.process=""*resize*"" Processes.process=""*shadowstorage*"" Processes.process=""*/maxsize*"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `resize_shadowstorage_volume_filter`",80,['T1490'],"{'malware', 'clop', 'blackbyte'}",,"['shadowstorage', 'ransomware', 'resizing', 'malware', 'shadow']"
s637,Revil Common Exec Parameter,This analytic identifies suspicious commandline parameter that are commonly used by REVIL ransomware to encrypts the compromise machine.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""* -nolan *"" OR Processes.process = ""* -nolocal *"" OR Processes.process = ""* -fast *"" OR Processes.process = ""* -full *"" by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `revil_common_exec_parameter_filter`",60,['T1204'],"{'revil', 'sodinokibi', 'darkside'}",6.0,"['ransomware', 'commandline', 'revil', 'parameter', 'suspicious']"
s638,Revil Registry Entry,"This analytic identifies suspicious modification in registry entry to keep some malware data during its infection. This technique seen in several apt implant, malware and ransomware like REVIL where it keep some information like the random generated file extension it uses for all the encrypted files and ransomware notes file name in the compromised host.","| tstats `security_content_summariesonly` count  FROM datamodel=Endpoint.Registry where (Registry.registry_path=""*\\SOFTWARE\\WOW6432Node\\Facebook_Assistant\\*"" OR Registry.registry_path=""*\\SOFTWARE\\WOW6432Node\\BlackLivesMatter*"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `revil_registry_entry_filter`",60,['T1112'],"{'registry modification', 'revil', 'sodinokibi', 'malware', 'darkside'}",115.0,"['malware', 'ransomware', 'registry', 'compromised', 'revil']"
s639,Rubeus Command Line Parameters,"Rubeus is a C# toolset for raw Kerberos interaction and abuses. It is heavily adapted from Benjamin Delpys Kekeo project and Vincent LE TOUXs MakeMeEnterpriseAdmin project. This analytic looks for the use of Rubeus command line arguments utilized in common Kerberos attacks like exporting and importing tickets, forging silver and golden tickets, requesting a TGT or TGS, kerberoasting, password spraying, etc. Red teams and adversaries alike use Rubeus for Kerberos attacks within Active Directory networks. Defenders should be aware that adversaries may customize the source code of Rubeus and modify the command line parameters. This would effectively bypass this analytic.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process = ""*ptt /ticket*"" OR Processes.process = ""* monitor *"" OR Processes.process =""* asktgt* /user:*"" OR Processes.process =""* asktgs* /service:*"" OR Processes.process =""* golden* /user:*"" OR Processes.process =""* silver* /service:*"" OR Processes.process =""* kerberoast*"" OR Processes.process =""* asreproast*"" OR Processes.process = ""* renew* /ticket:*"" OR Processes.process = ""* brute* /password:*"" OR Processes.process = ""* brute* /passwords:*"" OR Processes.process =""* harvest*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rubeus_command_line_parameters_filter`",60,"['T1550', 'T1550.003', 'T1558', 'T1558.003', 'T1558.004']",{'kerberos'},116.0,"['rubeus', 'kerberos', 'kerberoasting', 'attacks', 'toolset']"
s640,Rubeus Kerberos Ticket Exports Through Winlogon Access,"The following analytic looks for a process accessing the winlogon.exe system process. The Splunk Threat Research team identified this behavior when using the Rubeus tool to monitor for and export kerberos tickets from memory. Before being able to export tickets. Rubeus will try to escalate privileges to SYSTEM by obtaining a handle to winlogon.exe before trying to monitor for kerberos tickets. Exporting tickets from memory is typically the first step for pass the ticket attacks. Red teams and adversaries alike may use the pass the ticket technique using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Defenders should be aware that adversaries may customize the source code of Rubeus to potentially bypass this analytic."," `sysmon` EventCode=10 TargetImage=C:\\Windows\\system32\\winlogon.exe (GrantedAccess=0x1f3fff) (SourceImage!=C:\\Windows\\system32\\svchost.exe AND SourceImage!=C:\\Windows\\system32\\lsass.exe AND SourceImage!=C:\\Windows\\system32\\LogonUI.exe AND SourceImage!=C:\\Windows\\system32\\smss.exe AND SourceImage!=C:\\Windows\\system32\\wbem\\wmiprvse.exe) | stats count min(_time) as firstTime max(_time) as lastTime by Computer, SourceImage, SourceProcessId, TargetImage, TargetProcessId, EventCode, GrantedAccess | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `rubeus_kerberos_ticket_exports_through_winlogon_access_filter`",60,"['T1550', 'T1550.003']","{'kerberos', 'exe'}",296.0,"['splunk', 'winlogon', 'rubeus', 'kerberos', 'exe']"
s641,Runas Execution in CommandLine,"This analytic look for a spawned runas.exe process with a administrator user option parameter. This parameter was abused by adversaries, malware author or even red teams to gain elevated privileges in target host. This is a good hunting query to figure out privilege escalation tactics that may used for different stages like lateral movement but take note that administrator may use this command in purpose so its better to see other event context before and after this analytic.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_runas` AND Processes.process = ""*/user:*"" AND Processes.process = ""*admin*"" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `runas_execution_in_commandline_filter`",50,"['T1134', 'T1134.001']","{'malware', 'wiper', 'exe', 'privilege'}",,"['administrator', 'runas', 'privileges', 'malware', 'exe']"
s642,Rundll32 Control RunDLL Hunt,"The following hunting detection identifies rundll32.exe with `control_rundll` within the command-line, loading a .cpl or another file type. Developed in relation to CVE-2021-40444. Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. \ This is written to be a bit more broad by not including .cpl. \ During triage, review parallel processes to identify any further suspicious behavior.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*Control_RunDLL*  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_control_rundll_hunt_filter`,30,"['T1218', 'T1218.011']","{'dll', 'cve-2021-40444', 'rundll32'}",,"['rundll32', 'control_rundll', 'control_rundllasuser', 'dll', 'cpl']"
s643,Rundll32 Control RunDLL World Writable Directory,"The following detection identifies rundll32.exe with `control_rundll` within the command-line, loading a .cpl or another file type from windows\temp, programdata, or appdata. Developed in relation to CVE-2021-40444. Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. This is written to be a bit more broad by not including .cpl. The paths are specified, add more as needed. During triage, review parallel processes to identify any further suspicious behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*Control_RunDLL* AND Processes.process IN (""*\\appdata\\*"", ""*\\windows\\temp\\*"", ""*\\programdata\\*"")  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_control_rundll_world_writable_directory_filter`",80,"['T1218', 'T1218.011']","{'dll', 'cve-2021-40444', 'rundll32'}",,"['rundll32', 'control_rundll', 'control_rundllasuser', 'dll', 'cpl']"
s644,Rundll32 CreateRemoteThread In Browser,"This analytic identifies the suspicious Remote Thread execution of rundll32.exe process to ""firefox.exe"" and ""chrome.exe"" browser. This technique was seen in IcedID malware where it hooks the browser to parse banking information as user used the targetted browser process.","`sysmon` EventCode=8 SourceImage = ""*\\rundll32.exe"" TargetImage IN (""*\\firefox.exe"", ""*\\chrome.exe"", ""*\\iexplore.exe"",""*\\microsoftedgecp.exe"") | stats count min(_time) as firstTime max(_time) as lastTime by SourceImage TargetImage TargetProcessId SourceProcessId StartAddress EventCode Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_createremotethread_in_browser_filter`",70,['T1055'],"{'dll', 'exe', 'icedid', 'browser', 'malware', 'rundll32'}",,"['malware', 'rundll32', 'browser', 'firefox', 'exe']"
s645,Rundll32 Create Remote Thread To A Process,This analytic identifies the suspicious Remote Thread execution of rundll32.exe to any process. This technique was seen in IcedID malware to execute its malicious code in normal process for defense evasion and to steal sensitive information in the compromised host.,"`sysmon` EventCode=8 SourceImage = ""*\\rundll32.exe"" TargetImage = ""*.exe"" | stats count min(_time) as firstTime max(_time) as lastTime by SourceImage TargetImage TargetProcessId SourceProcessId StartAddress EventCode Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_create_remote_thread_to_a_process_filter`",70,['T1055'],"{'dll', 'exe', 'icedid', 'malware', 'rundll32'}",,"['rundll32', 'malware', 'malicious', 'execution', 'exe']"
s646,Rundll32 DNSQuery,This search is to detect a suspicious rundll32.exe process having a http connection and do a dns query in some web domain. This technique was seen in IcedID malware where the rundll32 that execute its payload will contact amazon.com to check internet connect and to communicate to its C&C server to download config and other file component.,"`sysmon` EventCode=22 process_name=""rundll32.exe"" | stats count min(_time) as firstTime max(_time) as lastTime by Image QueryName QueryStatus ProcessId  Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_dnsquery_filter`",70,"['T1218', 'T1218.011']","{'dll', 'icedid', 'dns', 'malware', 'rundll32'}",,"['malware', 'rundll32', 'http', 'dns', 'amazon']"
s647,Rundll32 LockWorkStation,This search is to detect a suspicious rundll32 commandline to lock the workstation through command line. This technique was seen in CONTI leak tooling and script as part of its defense evasion. This technique is not a common practice to lock a screen and maybe a good indicator of compromise.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=rundll32.exe Processes.process= ""*user32.dll,LockWorkStation*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_lockworkstation_filter`",50,"['T1218', 'T1218.011']","{'dll', 'rundll32', 'conti'}",254.0,"['rundll32', 'lock', 'screen', 'workstation', 'commandline']"
s648,Rundll32 Process Creating Exe Dll Files,This search is to detect a suspicious rundll32 process that drops executable (.exe or .dll) files. this behavior seen in rundll32 process of IcedID that tries to drop copy of itself in temp folder or download executable drop it either appdata or programdata as part of its execution.,"`sysmon` EventCode=11 process_name=""rundll32.exe"" TargetFilename IN (""*.exe"", ""*.dll"",) | stats count min(_time) as firstTime max(_time) as lastTime by Image TargetFilename ProcessGuid dest user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_process_creating_exe_dll_files_filter`",80,"['T1218', 'T1218.011']","{'dll', 'rundll32', 'icedid'}",,"['rundll32', 'executable', 'dll', 'programdata', 'icedid']"
s649,Rundll32 Shimcache Flush,This analytic is to detect a suspicious rundll32 commandline to clear shim cache. This technique is a anti-forensic technique to clear the cache taht are one important artifacts in terms of digital forensic during attacks or incident. This TTP is a good indicator that someone tries to evade some tools and clear foothold on the machine.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where  `process_rundll32` AND Processes.process = ""*apphelp.dll,ShimFlushCache*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `rundll32_shimcache_flush_filter`",80,['T1112'],"{'dll', 'forensic', 'rundll32'}",342.0,"['ttp', 'rundll32', 'forensic', 'cache', 'detect']"
s650,Rundll32 with no Command Line Arguments with Network,"The following analytic identifies rundll32.exe with no command line arguments and performing a network connection. It is unusual for rundll32.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, triage any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_rundll32` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(rundll32\.exe.{0,4}$)"" | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time dest parent_process_name process_name process_path process process_id dest_port C2 | `rundll32_with_no_command_line_arguments_with_network_filter`",70,"['T1218', 'T1218.011']","{'dll', 'cobalt strike', 'exe', 'rundll32', 'cve-2021-34527'}",,"['rundll32', 'system32', 'exe', 'execute', 'malicious']"
s651,RunDLL Loading DLL By Ordinal,"The following analytic identifies rundll32.exe loading an export function by ordinal value. Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly, may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Utilizing ordinal values makes it a bit more complicated for analysts to understand the behavior until the DLL is reviewed.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | where match(process,""rundll32.+\#\d+"") | `rundll_loading_dll_by_ordinal_filter`",70,"['T1218', 'T1218.011']","{'dll', 'exe', 'rundll32', 'qbot'}",254.0,"['rundll32', 'dll', 'exe', 'ordinal', 'executing']"
s652,Ryuk Test Files Detected,"The search looks for files that contain the key word *Ryuk* under any folder in the C drive, which is consistent with Ryuk propagation.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem WHERE ""Filesystem.file_path""=C:\\*Ryuk* BY ""Filesystem.dest"", ""Filesystem.user"", ""Filesystem.file_path"" | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `ryuk_test_files_detected_filter`",70,['T1486'],{'ryuk'},,"['ryuk', 'search', 'files', 'folder', 'contain']"
s653,Ryuk Wake on LAN Command,"This Splunk query identifies the use of Wake-on-LAN utilized by Ryuk ransomware. The Ryuk Ransomware uses the Wake-on-Lan feature to turn on powered off devices on a compromised network to have greater success encrypting them. This is a high fidelity indicator of Ryuk ransomware executing on an endpoint. Upon triage, isolate the endpoint. Additional file modification events will be within the users profile (\appdata\roaming) and in public directories (users\public\). Review all Scheduled Tasks on the isolated endpoint and across the fleet. Suspicious Scheduled Tasks will include a path to a unknown binary and those endpoints should be isolated until triaged.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=""*8 LAN*"" OR Processes.process=""*9 REP*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `ryuk_wake_on_lan_command_filter`",70,"['T1059', 'T1059.003']",{'ryuk'},,"['ransomware', 'splunk', 'compromised', 'ryuk', 'wake']"
s654,Samsam Test File Write,"The search looks for a file named ""test.txt"" written to the windows system directory tree, which is consistent with Samsam propagation.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.user) as user values(Filesystem.dest) as dest values(Filesystem.file_name) as file_name from datamodel=Endpoint.Filesystem where Filesystem.file_path=*\\windows\\system32\\test.txt by Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `samsam_test_file_write_filter`,60,['T1486'],{'samsam'},,"['samsam', 'txt', 'file', 'search', 'directory']"
s655,SAM Database File Access Attempt,"The following analytic identifies access to SAM, SYSTEM or SECURITY databases' within the file path of `windows\system32\config` using Windows Security EventCode 4663. This particular behavior is related to credential access, an attempt to either use a Shadow Copy or recent CVE-2021-36934 to access the SAM database. The Security Account Manager (SAM) is a database file in Windows XP, Windows Vista, Windows 7, 8.1 and 10 that stores users' passwords.","`wineventlog_security` (EventCode=4663)  process_name!=*\\dllhost.exe Object_Name IN (""*\\Windows\\System32\\config\\SAM*"",""*\\Windows\\System32\\config\\SYSTEM*"",""*\\Windows\\System32\\config\\SECURITY*"") | stats values(Accesses) count by process_name Object_Name  dest user | `sam_database_file_access_attempt_filter`",80,"['T1003.002', 'T1003']","{'cve-2021-36934', 'password'}",,"['security', 'sam', 'passwords', 'system32', 'access']"
s656,SchCache Change By App Connect And Create ADSI Object,"This analytic is to detect an application try to connect and create ADSI Object to do LDAP query. Every time an application connects to the directory and attempts to create an ADSI object, the Active Directory Schema is checked for changes. If it has changed since the last connection, the schema is downloaded and stored in a cache on the local computer either in %LOCALAPPDATA%\Microsoft\Windows\SchCache or %systemroot%\SchCache. We found this a good anomaly use case to detect suspicious application like blackmatter ransomware that use ADS object api to execute ldap query. having a good list of ldap or normal AD query tool used within the network is a good start to reduce the noise.","`sysmon` EventCode=11  TargetFilename = ""*\\Windows\\SchCache\\*"" TargetFilename = ""*.sch*"" NOT (Image IN (""*\\Windows\\system32\\mmc.exe"")) |stats count min(_time) as firstTime max(_time) as lastTime by Image TargetFilename EventCode process_id  process_name Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schcache_change_by_app_connect_and_create_adsi_object_filter`",50,"['T1087.002', 'T1087']","{'blackmatter', 'darkside'}",343.0,"['ldap', 'adsi', 'ad', 'ads', 'ransomware']"
s657,Scheduled Task Creation on Remote Endpoint using At,"This analytic looks for the execution of `at.exe` with command-line arguments utilized to create a Scheduled Task on a remote endpoint. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution. The `at.exe` binary internally leverages the AT protocol which was deprecated starting with Windows 8 and Windows Server 2012 but may still work on previous versions of Windows. Furthermore, attackers may enable this protocol on demand by changing a sytem registry key.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=at.exe OR Processes.original_file_name=at.exe) (Processes.process=*\\\\*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `scheduled_task_creation_on_remote_endpoint_using_at_filter`,90,"['T1053', 'T1053.002']",{'exe'},341.0,"['execution', 'exe', 'scheduler', 'protocol', 'attackers']"
s658,Scheduled Task Deleted Or Created via CMD,"The following analytic identifies the creation or deletion of a scheduled task using schtasks.exe with flags - create or delete being passed on the command-line. This has been associated with the Dragonfly threat actor, and the SUNBURST attack against Solarwinds. This analytic replaces ""Scheduled Task used in BadRabbit Ransomware"".",| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process=*delete* OR Processes.process=*create*) by Processes.user Processes.process_name Processes.parent_process_name Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `scheduled_task_deleted_or_created_via_cmd_filter` ,70,"['T1053.005', 'T1053']","{'solarwinds', 'qbot', 'sunburst', 'schtasks', 'azorult', 'nobelium', 'dragonfly'}",,"['schtasks', 'scheduled', 'task', 'ransomware', 'deletion']"
s659,Scheduled Task Initiation on Remote Endpoint,This analytic looks for the execution of `schtasks.exe` with command-line arguments utilized to start a Scheduled Task on a remote endpoint. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=schtasks.exe OR Processes.original_file_name=schtasks.exe) (Processes.process=*/s* AND Processes.process=*/run*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `scheduled_task_initiation_on_remote_endpoint_filter`,90,"['T1053', 'T1053.005']",{'schtasks'},146.0,"['schtasks', 'scheduler', 'execution', 'endpoint', 'scheduled']"
s660,Schedule Task with HTTP Command Arguments,"The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with an arguments ""HTTP"" string that are unique entry of malware or attack that uses lolbin to download other file or payload to the infected machine. The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not. schtasks.exe is natively found in `C:\Windows\system32` and `C:\Windows\syswow64`. The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory. Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.'","`wineventlog_security` EventCode=4698 | xmlkv Message| search Arguments IN (""*http*"") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden, Arguments | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schedule_task_with_http_command_arguments_filter`",70,['T1053'],"{'malware', 'schtasks', 'lolbin'}",339.0,"['schtasks', 'malware', 'taskservice', 'taskschd', 'task']"
s661,Schedule Task with Rundll32 Command Trigger,"The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a command to be executed with a Rundll32. This technique is common in new trickbot that uses rundll32 to load is trickbot downloader. The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not. schtasks.exe is natively found in `C:\Windows\system32` and `C:\Windows\syswow64`. The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory. Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.'","`wineventlog_security` EventCode=4698 | xmlkv Message | search Command IN (""*rundll32*"") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden, Arguments | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schedule_task_with_rundll32_command_trigger_filter`",70,['T1053'],"{'dll', 'schtasks', 'icedid', 'trickbot', 'rundll32', 'ryuk'}",,"['schtasks', 'taskservice', 'taskschd', 'rundll32', 'task']"
s662,Schtasks Run Task On Demand,This analytic identifies an on demand run of a Windows Schedule Task through shell or command-line. This technique has been used by adversaries that force to run their created Schedule Task as their persistence mechanism or for lateral movement as part of their malicious attack to the compromised machine.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where Processes.process_name = ""schtasks.exe"" Processes.process = ""*/run*"" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schtasks_run_task_on_demand_filter`",60,['T1053'],"{'industroyer2', 'shell', 'schtasks'}",,"['malicious', 'shell', 'task', 'attack', 'schedule']"
s663,Schtasks scheduling job on remote system,This analytic looks for the execution of `schtasks.exe` with command-line arguments utilized to create a Scheduled Task on a remote endpoint. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = schtasks.exe OR Processes.original_file_name=schtasks.exe) (Processes.process=""*/create*"" AND Processes.process=""*/s*"") by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schtasks_scheduling_job_on_remote_system_filter`",70,"['T1053.005', 'T1053']","{'schtasks', 'nobelium'}",,"['schtasks', 'scheduler', 'execution', 'scheduled', 'endpoint']"
s664,Schtasks used for forcing a reboot,This search looks for flags passed to schtasks.exe on the command-line that indicate that a forced reboot of system is scheduled.,"| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe Processes.process=""*shutdown*"" Processes.process=""*/create *"" by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `schtasks_used_for_forcing_a_reboot_filter`",70,"['T1053.005', 'T1053']",{'schtasks'},,"['schtasks', 'scheduled', 'reboot', 'flags', 'command']"
s665,Screensaver Event Trigger Execution,This analytic is developed to detect possible event trigger execution through screensaver registry entry modification for persistence or privilege escalation. This technique was seen in several APT and malware where they put the malicious payload path to the SCRNSAVE.EXE registry key to redirect the execution to their malicious payload path. This TTP is a good indicator that some attacker may modify this entry for their persistence and privilege escalation.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path=""*\\Control Panel\\Desktop\\SCRNSAVE.EXE*"") by Registry.dest Registry.user Registry.registry_path Registry.registry_key_name Registry.registry_value_name | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(Registry)` | `screensaver_event_trigger_execution_filter`",80,"['T1546', 'T1546.002']","{'malware', 'wiper', 'registry modification', 'screensaver'}",,"['screensaver', 'malware', 'registry', 'execution', 'malicious']"
s666,Script Execution via WMI,This search looks for scripts launched via WMI.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=scrcons.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `script_execution_via_wmi_filter` ,60,['T1047'],{'wmi'},23.0,"['scripts', 'wmi', 'launched', 'search', 'looks']"
s667,Sc exe Manipulating Windows Services,This search looks for arguments to sc.exe indicating the creation or modification of a Windows service.,"| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = sc.exe (Processes.process=""* create *"" OR Processes.process=""* config *"") by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sc_exe_manipulating_windows_services_filter`",70,"['T1543.003', 'T1543']","{'orangeworm', 'exe', 'nobelium', 'azorult'}",,"['service', 'sc', 'exe', 'windows', 'modification']"
s668,Sdclt UAC Bypass,This search is to detect a suspicious sdclt.exe registry modification. This technique is commonly seen when attacker try to bypassed UAC by using sdclt.exe application by modifying some registry that sdclt.exe tries to open or query with payload file path on it to be executed.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where (Registry.registry_path= ""*\\Windows\\CurrentVersion\\App Paths\\control.exe*"" OR Registry.registry_path= ""*\\exefile\\shell\\runas\\command\\*"") (Registry.registry_value_name = ""(Default)"" OR Registry.registry_value_name = ""IsolatedCommand"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `sdclt_uac_bypass_filter`",70,"['T1548.002', 'T1548']","{'uac', 'exe', 'registry modification', 'uacme'}",276.0,"['sdclt', 'registry', 'uac', 'exe', 'search']"
s669,Sdelete Application Execution,This analytic is to detect the execution of sdelete.exe application sysinternal tools. This tool is one of the most use tool of malware and adversaries to remove or clear their tracks and artifact in the targetted host. This tool is designed to delete securely a file in file system that remove the forensic evidence on the machine. A good TTP query to check why user execute this application which is not a common practice.,| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_sdelete` by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name Processes.parent_process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sdelete_application_execution_filter`,70,"['T1485', 'T1070.004', 'T1070']","{'malware', 'exe', 'sdelete'}",344.0,"['sdelete', 'malware', 'exe', 'execution', 'application']"
s670,SearchProtocolHost with no Command Line with Network,"The following analytic identifies searchprotocolhost.exe with no command line arguments and with a network connection. It is unusual for searchprotocolhost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. searchprotocolhost.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=searchprotocolhost.exe by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(searchprotocolhost\.exe.{0,4}$)"" | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time dest parent_process_name process_name process_path process process_id dest_port C2 | `searchprotocolhost_with_no_command_line_with_network_filter`",70,['T1055'],"{'exe', 'cobalt strike'}",,"['searchprotocolhost', 'exe', 'execute', 'command', 'system32']"
s671,SecretDumps Offline NTDS Dumping Tool,"This analytic detects a potential usage of secretsdump.py tool for dumping credentials (ntlm hash) from a copy of ntds.dit and SAM.Security,SYSTEM registrry hive. This technique was seen in some attacker that dump ntlm hashes offline after having a copy of ntds.dit and SAM/SYSTEM/SECURITY registry hive.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = ""python*.exe"" Processes.process = ""*.py*"" Processes.process = ""*-ntds*"" (Processes.process = ""*-system*"" OR Processes.process = ""*-sam*"" OR Processes.process = ""*-security*"" OR Processes.process = ""*-bootkey*"") by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `secretdumps_offline_ntds_dumping_tool_filter`",80,"['T1003.003', 'T1003']","{'hive', 'casper', 'impacket'}",338.0,"['secretsdump', 'ntds', 'credentials', 'security', 'ntlm']"
s672,ServicePrincipalNames Discovery with PowerShell,"The following analytic identifies `powershell.exe` usage, using Script Block Logging EventCode 4104, related to querying the domain for Service Principle Names. typically, this is a precursor activity related to kerberoasting or the silver ticket attack. \
What is a ServicePrincipleName? \
A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.\
The following analytic identifies the use of KerberosRequestorSecurityToken class within the script block. Using .NET System.IdentityModel.Tokens.KerberosRequestorSecurityToken class in PowerShell is the equivelant of using setspn.exe. \
During triage, review parallel processes for further suspicious activity.","`powershell` EventCode=4104 ScriptBlockText=""*KerberosRequestorSecurityToken*"" | stats count min(_time) as firstTime max(_time) as lastTime by ScriptBlockText Opcode Computer UserID EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `serviceprincipalnames_discovery_with_powershell_filter`",80,['T1558.003'],"{'kerberos', 'powershell', 'mimikatz'}",345.0,"['kerberosrequestorsecuritytoken', 'serviceprinciplename', 'powershell', 'kerberoasting', 'kerberos']"
s673,ServicePrincipalNames Discovery with SetSPN,"The following analytic identifies `setspn.exe` usage related to querying the domain for Service Principle Names. typically, this is a precursor activity related to kerberoasting or the silver ticket attack. \
What is a ServicePrincipleName? \
A service principal name (SPN) is a unique identifier of a service instance. SPNs are used by Kerberos authentication to associate a service instance with a service logon account. This allows a client application to request that the service authenticate an account even if the client does not have the account name.\
Example usage includes the following \
1. setspn -T offense -Q */* 1. setspn -T attackrange.local -F -Q MSSQLSvc/* 1. setspn -Q */* > allspns.txt 1. setspn -q \
Values \
1. -F = perform queries at the forest, rather than domain level 1. -T = perform query on the specified domain or forest (when -F is also used) 1. -Q = query for existence of SPN \
During triage, review parallel processes for further suspicious activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_setspn` (Processes.process=""*-t*"" AND Processes.process=""*-f*"") OR (Processes.process=""*-q*"" AND Processes.process=""**/**"") OR (Processes.process=""*-q*"") OR (Processes.process=""*-s*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `serviceprincipalnames_discovery_with_setspn_filter`",80,['T1558.003'],{'mimikatz'},98.0,"['spns', 'spn', 'serviceprinciplename', 'setspn', 'allspns']"
s674,Services Escalate Exe,"The following analytic identifies the use of `svc-exe` with Cobalt Strike. The behavior typically follows after an adversary has already gained initial access and is escalating privileges. Using `svc-exe`, a randomly named binary will be downloaded from the remote Teamserver and placed on disk within `C:\Windows\400619a.exe`. Following, the binary will be added to the registry under key `HKLM\System\CurrentControlSet\Services\400619a\` with multiple keys and values added to look like a legitimate service. Upon loading, `services.exe` will spawn the randomly named binary from `\\127.0.0.1\ADMIN$\400619a.exe`. The process lineage is completed with `400619a.exe` spawning rundll32.exe, which is the default `spawnto_` value for Cobalt Strike. The `spawnto_` value is arbitrary and may be any process on disk (typically system32/syswow64 binary). The `spawnto_` process will also contain a network connection. During triage, review parallel procesess and identify any additional file modifications.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=services.exe Processes.process_path=*admin$* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `services_escalate_exe_filter`,80,['T1548'],"{'dll', 'cobalt strike', 'exe', 'sodinokibi', 'revil', 'rundll32'}",,"['system32', 'rundll32', 'exe', 'svc', 'cobalt']"
s675,Services LOLBAS Execution Process Spawn,"The following analytic identifies `services.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the Service Control Manager and creating a remote malicious service, the executed command is spawned as a child process of `services.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of services.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=services.exe) (Processes.process_name IN (""Regsvcs.exe"", ""Ftp.exe"", ""OfflineScannerShell.exe"", ""Rasautou.exe"", ""Schtasks.exe"", ""Xwizard.exe"", ""Dllhost.exe"", ""Pnputil.exe"", ""Atbroker.exe"", ""Pcwrun.exe"", ""Ttdinject.exe"",""Mshta.exe"", ""Bitsadmin.exe"", ""Certoc.exe"", ""Ieexec.exe"", ""Microsoft.Workflow.Compiler.exe"", ""Runscripthelper.exe"", ""Forfiles.exe"", ""Msbuild.exe"", ""Register-cimprovider.exe"", ""Tttracer.exe"", ""Ie4uinit.exe"", ""Bash.exe"", ""Hh.exe"", ""SettingSyncHost.exe"", ""Cmstp.exe"", ""Mmc.exe"", ""Stordiag.exe"", ""Scriptrunner.exe"", ""Odbcconf.exe"", ""Extexport.exe"", ""Msdt.exe"", ""WorkFolders.exe"", ""Diskshadow.exe"", ""Mavinject.exe"", ""Regasm.exe"", ""Gpscript.exe"", ""Rundll32.exe"", ""Regsvr32.exe"", ""Msiexec.exe"", ""Wuauclt.exe"", ""Presentationhost.exe"", ""Wmic.exe"", ""Runonce.exe"", ""Syncappvpublishingserver.exe"", ""Verclsid.exe"", ""Infdefaultinstall.exe"", ""Explorer.exe"", ""Installutil.exe"", ""Netsh.exe"", ""Wab.exe"", ""Dnscmd.exe"", ""At.exe"", ""Pcalua.exe"", ""Msconfig.exe"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `services_lolbas_execution_process_spawn_filter`",90,"['T1543', 'T1543.003']","{'netsh', 'exe', 'forfiles', 'schtasks', 'bitsadmin', 'msbuild', 'rundll32', 'ftp'}",,"['processes', 'process', 'exe', 'services', 'execution']"
s676,Set Default PowerShell Execution Policy To Unrestricted or Bypass,"Monitor for changes of the ExecutionPolicy in the registry to the values ""unrestricted"" or ""bypass,"" which allows the execution of malicious scripts.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path=*Software\\Microsoft\\Powershell\\1\\ShellIds\\Microsoft.PowerShell* Registry.registry_value_name=ExecutionPolicy (Registry.registry_value_data=Unrestricted OR Registry.registry_value_data=Bypass) by Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `set_default_powershell_execution_policy_to_unrestricted_or_bypass_filter`,60,"['T1059', 'T1059.001']","{'wiper', 'registry modification', 'powershell', 'hafnium'}",,"['executionpolicy', 'registry', 'scripts', 'malicious', 'execution']"
s677,Shim Database File Creation,"This search looks for shim database files being written to default directories. The sdbinst.exe application is used to install shim database files (.sdb). According to Microsoft, a shim is a small library that transparently intercepts an API, changes the parameters passed, handles the operation itself, or redirects the operation elsewhere.",| tstats `security_content_summariesonly` count values(Filesystem.action) values(Filesystem.file_hash) as file_hash values(Filesystem.file_path) as file_path  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path=*Windows\\AppPatch\\Custom* by Filesystem.file_name Filesystem.dest | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` |`drop_dm_object_name(Filesystem)` | `shim_database_file_creation_filter`,70,"['T1546.011', 'T1546']",{'exe'},92.0,"['sdbinst', 'sdb', 'files', 'exe', 'shim']"
s678,Shim Database Installation With Suspicious Parameters,"This search detects the process execution and arguments required to silently create a shim database.  The sdbinst.exe application is used to install shim database files (.sdb). A shim is a small library which transparently intercepts an API, changes the parameters passed, handles the operation itself, or redirects the operation elsewhere.",| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = sdbinst.exe by Processes.process_name Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `shim_database_installation_with_suspicious_parameters_filter`,70,"['T1546.011', 'T1546']",{'exe'},92.0,"['sdbinst', 'sdb', 'shim', 'exe', 'application']"
s679,Short Lived Scheduled Task,"The following analytic leverages Windows Security EventCode 4698, `A scheduled task was created` and Windows Security EventCode 4699, `A scheduled task was deleted` to identify scheduled tasks created and deleted in less than 30 seconds. This behavior may represent a lateral movement attack abusing the Task Scheduler to obtain code execution. Red Teams and adversaries alike may abuse the Task Scheduler for lateral movement and remote code execution."," `wineventlog_security` EventCode=4698 OR EventCode=4699 | xmlkv Message | transaction Task_Name  startswith=(EventCode=4698) endswith=(EventCode=4699) | eval short_lived=case((duration<30),""TRUE"") | search  short_lived = TRUE | table _time, ComputerName, Account_Name, Command, Task_Name, short_lived | `short_lived_scheduled_task_filter` ",90,['T1053.005'],,147.0,"['eventcode', 'task', 'scheduler', 'tasks', 'scheduled']"
s680,Short Lived Windows Accounts,This search detects accounts that were created and deleted in a short time period.,"| tstats `security_content_summariesonly` values(All_Changes.result_id) as result_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Change where All_Changes.result_id=4720 OR All_Changes.result_id=4726 by _time span=4h All_Changes.user All_Changes.dest | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `drop_dm_object_name(""All_Changes"")` | search result_id = 4720 result_id=4726 | transaction user connected=false maxspan=240m | table firstTime lastTime count user dest result_id | `short_lived_windows_accounts_filter`",70,"['T1136.001', 'T1136']",,285.0,"['search', 'accounts', 'deleted', 'created', 'detects']"
s681,SilentCleanup UAC Bypass,This search is to detect a suspicious modification of registry that may related to UAC bypassed. This registry will be trigger once the attacker abuse the silentcleanup task schedule to gain high privilege execution that will bypass User control account.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Environment\\windir"" Registry.registry_value_data = ""*.exe*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.registry_key_name | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `silentcleanup_uac_bypass_filter`",70,"['T1548.002', 'T1548']","{'uac', 'registry modification', 'uacme'}",276.0,"['uac', 'registry', 'bypassed', 'control', 'search']"
s682,Single Letter Process On Endpoint,This search looks for process names that consist only of a single letter.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.dest, Processes.user, Processes.process, Processes.process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | eval process_name_length = len(process_name), endExe = if(substr(process_name, -4) == "".exe"", 1, 0) | search process_name_length=5 AND endExe=1 | table count, firstTime, lastTime, dest, user, process, process_name | `single_letter_process_on_endpoint_filter`",70,"['T1204', 'T1204.002']",,285.0,"['process', 'search', 'names', 'letter', 'looks']"
s683,SLUI RunAs Elevated,"The following analytic identifies the Microsoft Software Licensing User Interface Tool, `slui.exe`, elevating access using the `-verb runas` function. This particular bypass utilizes a registry key/value. Identified by two sources, the registry keys are `HKCU\Software\Classes\exefile\shell` and `HKCU\Software\Classes\launcher.Systemsettings\Shell\open\command`. To simulate this behavior, multiple POC are available. The analytic identifies the use of `runas` by `slui.exe`.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=slui.exe (Processes.process=*-verb* Processes.process=*runas*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `slui_runas_elevated_filter`,70,"['T1548.002', 'T1548']","{'exe', 'registry modification', 'darkside'}",,"['registry', 'exe', 'runas', 'hkcu', 'licensing']"
s684,SLUI Spawning a Process,"The following analytic identifies the Microsoft Software Licensing User Interface Tool, `slui.exe`, spawning a child process. This behavior is associated with publicly known UAC bypass. `slui.exe` is commonly associated with software updates and is most often spawned by `svchost.exe`. The `slui.exe` process should not have child processes, and any processes spawning from it will be running with elevated privileges. During triage, review the child process and additional parallel processes. Identify any file modifications that may have lead to the bypass.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=slui.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `slui_spawning_a_process_filter`,70,"['T1548.002', 'T1548']","{'uac', 'exe', 'darkside'}",,"['slui', 'exe', 'processes', 'uac', 'process']"
s685,Spoolsv Spawning Rundll32,"The following analytic identifies a suspicious child process, `rundll32.exe`, with no command-line arguments being spawned from `spoolsv.exe`. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. Typically, this is not normal behavior for `spoolsv.exe` to spawn a process. During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=spoolsv.exe `process_rundll32` by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_spawning_rundll32_filter`,80,"['T1547.012', 'T1547']","{'dll', 'exe', 'rundll32', 'cve-2021-34527'}",,"['rundll32', 'spoolsv', 'exe', 'cve', 'process']"
s686,Spoolsv Suspicious Loaded Modules,This search is to detect suspicious loading of dll in specific path relative to printnightmare exploitation. In this search we try to detect the loaded modules made by spoolsv.exe after the exploitation.,"`sysmon` EventCode=7 Image =""*\\spoolsv.exe"" ImageLoaded=""*\\Windows\\System32\\spool\\drivers\\x64\\*"" ImageLoaded = ""*.dll"" | stats dc(ImageLoaded) as countImgloaded values(ImageLoaded) as ImgLoaded count min(_time) as firstTime max(_time) as lastTime by Image Computer ProcessId EventCode | where countImgloaded >= 3 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_suspicious_loaded_modules_filter`",80,"['T1547.012', 'T1547']","{'dll', 'cve-2021-34527'}",,"['dll', 'printnightmare', 'exploitation', 'spoolsv', 'loading']"
s687,Spoolsv Suspicious Process Access,"This analytic identifies a suspicious behavior related to PrintNightmare, or CVE-2021-34527 previously (CVE-2021-1675),  to gain privilege escalation on the vulnerable machine. This exploit attacks a critical Windows Print Spooler Vulnerability to elevate privilege. This detection is to look for suspicious process access made by the spoolsv.exe that may related to the attack.","`sysmon` EventCode=10 SourceImage = ""*\\spoolsv.exe"" CallTrace = ""*\\Windows\\system32\\spool\\DRIVERS\\x64\\*"" TargetImage IN (""*\\rundll32.exe"", ""*\\spoolsv.exe"") GrantedAccess = 0x1fffff | stats  count min(_time) as firstTime max(_time) as lastTime by Computer SourceImage TargetImage GrantedAccess CallTrace  EventCode ProcessID| `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_suspicious_process_access_filter`",80,['T1068'],"{'rundll32', 'impacket', 'cve-2021-34527'}",,"['printnightmare', 'spoolsv', 'exploit', 'vulnerability', 'print']"
s688,Spoolsv Writing a DLL,"The following analytic identifies a `.dll` being written by `spoolsv.exe`. This was identified during our testing of CVE-2021-34527 previously (CVE-2021-1675) or PrintNightmare. Typically, this is not normal behavior for `spoolsv.exe` to write a `.dll`. Current POC code used will write the suspicious DLL to disk within a path of `\spool\drivers\x64\`. During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=spoolsv.exe by _time Processes.process_id Processes.process_name Processes.dest | `drop_dm_object_name(Processes)` | join process_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path=""*\\spool\\drivers\\x64\\*"" Filesystem.file_name=""*.dll"" by _time Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path | `drop_dm_object_name(Filesystem)` | fields _time dest file_create_time file_name file_path process_name process_path process] | dedup file_create_time | table dest file_create_time, file_name, file_path, process_name | `spoolsv_writing_a_dll_filter`",80,"['T1547.012', 'T1547']","{'dll', 'exe', 'cve-2021-34527'}",,"['dll', 'spoolsv', 'spool', 'exe', 'cve']"
s689,Spoolsv Writing a DLL - Sysmon,"The following analytic identifies a `.dll` being written by `spoolsv.exe`. This was identified during our testing of CVE-2021-34527 previously(CVE-2021-1675) or PrintNightmare. Typically, this is not normal behavior for `spoolsv.exe` to write a `.dll`. Current POC code used will write the suspicious DLL to disk within a path of `\spool\drivers\x64\`. During triage, isolate the endpoint and review for source of exploitation. Capture any additional file modification events.","`sysmon` EventID=11 process_name=spoolsv.exe file_path=""*\\spool\\drivers\\x64\\*"" file_name=*.dll | stats count min(_time) as firstTime max(_time) as lastTime by dest, UserID, process_name, file_path, file_name, TargetFilename, process_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spoolsv_writing_a_dll___sysmon_filter`",80,"['T1547.012', 'T1547']","{'dll', 'impacket', 'exe', 'rundll32', 'cve-2021-34527'}",,"['dll', 'spoolsv', 'spool', 'exe', 'cve']"
s690,Sqlite Module In Temp Folder,"This search is to detect a suspicious file creation of sqlite3.dll in %temp% folder. This behavior was seen in IcedID malware where it download sqlite module to parse browser database like for chrome or firefox to stole browser information related to bank, credit card or credentials.","`sysmon` EventCode=11 (TargetFilename = ""*\\sqlite32.dll"" OR TargetFilename = ""*\\sqlite64.dll"") (TargetFilename = ""*\\temp\\*"") |stats count min(_time) as firstTime max(_time) as lastTime by process_name TargetFilename EventCode ProcessId Image | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `sqlite_module_in_temp_folder_filter`",30,['T1005'],"{'malware', 'icedid', 'browser'}",,"['sqlite3', 'sqlite', 'malware', 'firefox', 'browser']"
s691,Anomalous usage of Archive Tools,The following detection identifies the usage of archive tools from the command line.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event,""_time""), ""string"", null)), process=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), parent_process=ucast(map_get(input_event, ""parent_process""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process_name IS NOT NULL AND parent_process_name IS NOT NULL | where like(process_name, ""7z%"") OR process_name=""WinRAR.exe"" OR like(process_name, ""winzip%"") | where like(parent_process_name, ""%cmd.exe"") OR like(parent_process_name, ""%powershell.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1560.001', 'T1560']","{'cobalt strike', 'nobelium'}",,"['archive', 'tools', 'command', 'detection', 'usage']"
s692,Attempted Credential Dump From Registry via Reg exe,The following analytic identifies the use of `reg.exe` attempting to export Windows registry keys that contain hashed credentials. Adversaries will utilize this technique to capture and perform offline password cracking.," | from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)) | eval process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), dest_user_id=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), dest_device_id=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process_name=""cmd.exe"" OR process_name=""reg.exe"" | where cmd_line != null  AND match_regex(cmd_line, /(?i)save\s+/)=true AND ( match_regex(cmd_line, /(?i)HKLM\\Security/)=true OR match_regex(cmd_line, /(?i)HKLM\\SAM/)=true OR match_regex(cmd_line, /(?i)HKLM\\System/)=true OR match_regex(cmd_line, /(?i)HKEY_LOCAL_MACHINE\\Security/)=true OR match_regex(cmd_line, /(?i)HKEY_LOCAL_MACHINE\\SAM/)=true OR match_regex(cmd_line, /(?i)HKEY_LOCAL_MACHINE\\System/)=true ) | eval start_time = timestamp, end_time = timestamp, entities = mvappend(dest_device_id, dest_user_id), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name]) | into write_ssa_detected_events(); ",70,"['T1003', 'T1003.002']","{'exe', 'registry modification', 'password'}",29.0,"['registry', 'exe', 'reg', 'password', 'credentials']"
s693,Attempt To Delete Services,"The following analytic identifies Windows Service Control, `sc.exe`, attempting to delete a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then delete it. Adversaries utilize this technique to terminate security services or other related services to continue there objective and evade detections.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""%delete%"") AND process_name = ""sc.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",60,"['T1489', 'T1543', 'T1543.003']","{'exe', 'stop'}",271.0,"['services', 'service', 'exe', 'terminate', 'security']"
s694,Attempt To Disable Services,"The following analytic identifies Windows Service Control, `sc.exe`, attempting to disable a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then disable it. Adversaries utilize this technique to terminate security services or other related services to continue there objective and evade detections.","| from read_ssa_enriched_events() | eval _datamodels=ucast(map_get(input_event, ""_datamodels""), ""collection<string>"", []), body={} | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""%disabled%"") AND like(cmd_line, ""%config%"") AND process_name=""sc.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",60,['T1489'],"{'exe', 'stop'}",271.0,"['service', 'services', 'disable', 'exe', 'security']"
s695,BCDEdit Failure Recovery Modification,This search looks for flags passed to bcdedit.exe modifications to the built-in Windows error recovery boot configurations. This is typically used by ransomware to prevent recovery.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""bcdedit.exe"" AND (like (cmd_line, ""%recoveryenabled%"") AND like (cmd_line, ""%no%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",100,['T1490'],"{'exe', 'ryuk'}",,"['bcdedit', 'ransomware', 'recovery', 'boot', 'exe']"
s696,Clear Unallocated Sector Using Cipher App,this search is to detect execution of `cipher.exe` to clear the unallocated sectors of a specific disk. This technique was seen in some ransomware to make it impossible to forensically recover deleted files.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""%/w:%"") AND process_name=""cipher.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",90,"['T1070.004', 'T1070']","{'forensic', 'pyxie'}",6.0,"['ransomware', 'cipher', 'disk', 'files', 'forensically']"
s697,Delete A Net User,"This analytic will detect a suspicious net.exe/net1.exe command-line to delete a user on a system. This technique may be use by an administrator for legitimate purposes, however this behavior has been used in the wild to impair some user or deleting adversaries tracks created during its lateral movement additional systems. During triage, review parallel processes for additional behavior. Identify any other user accounts created before or after.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"",null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"",null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process IS NOT NULL AND like(process, ""%/delete%"") AND like(process, ""%user%"") AND (process_name=""net1.exe"" OR process_name=""net.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""process"", process, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,['T1531'],"{'net.exe', 'exe'}",163.0,"['deleting', 'exe', 'administrator', 'delete', 'net']"
s698,Deny Permission using Cacls Utility,"The following analytic identifies the use of `cacls.exe`, `icacls.exe` or `xcacls.exe` placing the deny permission on a file or directory. Adversaries perform this behavior to prevent responders from reviewing or gaining access to adversary files on disk.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND match_regex(cmd_line, /(?i)deny/)=true AND (process_name=""cacls.exe"" OR process_name=""xcacls.exe"" OR process_name=""icacls.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1222'],"{'permission', 'cacls'}",346.0,"['xcacls', 'cacls', 'permission', 'icacls', 'deny']"
s699,Detect RClone Command-Line Usage,"This analytic identifies commonly used command-line arguments used by `rclone.exe` to initiate a file transfer. Some arguments were negated as they are specific to the configuration used by adversaries. In particular, an adversary may list the files or directories of the remote file share using `ls` or `lsd`, which is not indicative of malicious behavior. During triage, at this stage of a ransomware event, exfiltration is about to occur or has already. Isolate the endpoint and continue investigating by review file modifications and parallel processes.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""rclone.exe"" AND (like (cmd_line, ""%copy%"") OR like (cmd_line, ""%mega%"")OR like (cmd_line, ""%pcloud%"") OR like (cmd_line, ""%ftp%"") OR like (cmd_line, ""%--config%"") OR like (cmd_line, ""%--progress%"") OR like (cmd_line, ""%--no-check-certificate%"") OR like (cmd_line, ""%--ignore-existing%"") OR like (cmd_line, ""%--auto-confirm%"") OR like (cmd_line, ""%--transfers%"") OR like (cmd_line, ""%--multi-thread-streams%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1020'],"{'sodinokibi', 'rclone', 'revil', 'bazar', 'ftp', 'darkside'}",,"['ransomware', 'rclone', 'files', 'file', 'exfiltration']"
s700,Disable Net User Account,This analytic will identify a suspicious command-line that disables a user account using the native `net.exe` or `net1.exe` utility to Windows. This technique may used by the adversaries to interrupt availability of accounts and continue the impact against the organization.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""%/active:no%"") AND like(cmd_line, ""%user%"") AND (process_name=""net1.exe"" OR process_name=""net.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1489', 'T1078']","{'net.exe', 'exe'}",134.0,"['exe', 'disables', 'accounts', 'net1', 'account']"
s701,DNS Exfiltration Using Nslookup App,"This search is to detect potential DNS exfiltration using nslookup application. This technique are seen in couple of malware and APT group to exfiltrated collected data in a infected machine or infected network. This detection is looking for unique use of nslookup where it tries to use specific record type, TXT, A, AAAA, that are commonly used by attacker and also the retry parameter which is designed to query C2 DNS multiple tries.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""nslookup.exe"" AND (like (cmd_line, ""%-querytype=%"") OR like (cmd_line, ""%-qt=%"") OR like (cmd_line, ""%-q=%"") OR like (cmd_line, ""%-type=%"") OR like (cmd_line, ""%-retry=%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",90,['T1048'],"{'fin7', 'teardrop', 'sunburst', 'solorigate', 'raindrop', 'dns', 'malware'}",223.0,"['nslookup', 'dns', 'malware', 'search', 'exfiltration']"
s702,Fsutil Zeroing File,This search is to detect a suspicious fsutil process to zeroing a target file. This technique was seen in lockbit ransomware where it tries to zero out its malware path as part of its defense evasion after encrypting the compromised host.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""fsutil.exe"" AND (like (cmd_line, ""%setzerodata%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",60,['T1070'],"{'net.exe', 'malware', 'lockbit'}",115.0,"['ransomware', 'malware', 'search', 'compromised', 'fsutil']"
s703,Grant Permission Using Cacls Utility,"The following analytic identifies the use of `cacls.exe`, `icacls.exe` or `xcacls.exe` placing the grant permission on a file or directory. Adversaries perform this behavior to allow components of their files to run, however it allows responders to review or gaining access to adversary files on disk.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND match_regex(cmd_line, /(?i)grant/)=true AND (process_name=""cacls.exe"" OR process_name=""xcacls.exe"" OR process_name=""icacls.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1222'],"{'permission', 'cacls'}",346.0,"['xcacls', 'cacls', 'permission', 'icacls', 'files']"
s704,Hiding Files And Directories With Attrib exe,"Attackers leverage an existing Windows binary, attrib.exe, to mark specific as hidden by using specific flags so that the victim does not see the file.  The search looks for specific command-line arguments to detect the use of attrib.exe to hide files.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND match_regex(cmd_line, /\+h/)=true AND process_name=""attrib.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1222.001', 'T1222']","{'leverage', 'hidden'}",197.0,"['hidden', 'hide', 'attrib', 'file', 'attackers']"
s705,Modify ACLs Permission Of Files Or Folders,This analytic identifies suspicious modification of ACL permission to a files or folder to make it available to everyone or to a specific user. This technique may be used by the adversary to evade ACLs or protected files access. This changes is commonly configured by the file or directory owner with appropriate permission. This behavior raises suspicion if this command is seen on an endpoint utilized by an account with no permission to do so.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process IS NOT NULL AND NOT like(process, ""%:\\Windows\\QG\\ServiceNow%"") AND like(process, ""%/g%"") | where (match_regex(process, /(?i)everyone:/)=true OR match_regex(process, /(?i)SYSTEM:/)=true OR match_regex(process, /(?i)S-1-1-0:/)=true) | where (process_name=""cacls.exe"" OR process_name=""xcacls.exe"" OR process_name=""icacls.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""process"", process, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1222'],{'permission'},336.0,"['acl', 'permission', 'acls', 'behavior', 'suspicious']"
s706,Detect Prohibited Applications Spawning cmd exe,"The following analytic identifies parent processes, browsers, Windows terminal applications, Office Products and Java spawning cmd.exe. By its very nature, many applications spawn cmd.exe natively or built into macros. Much of this will need to be tuned to further enhance the risk.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)) | eval process_name = ucast(map_get(input_event, ""process_name""), ""string"", null), parent_process_name = lower(ucast(input_event.parent_process_name, ""string"", null)), cmd_line = lower(ucast(map_get(input_event, ""process""),""string"", null)), dest_user_id=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), dest_device_id=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), event_id=ucast(map_get(input_event,""event_id""), ""string"", null) | where process_name=""cmd.exe"" | rex field=parent_process_name ""(?<ParentBaseFileName>[^\\\\]+)$"" | where ParentBaseFileName=""winword.exe"" OR ParentBaseFileName=""excel.exe"" OR ParentBaseFileName=""outlook.exe"" OR ParentBaseFileName=""powerpnt.exe"" OR ParentBaseFileName=""visio.exe"" OR ParentBaseFileName=""mspub.exe"" OR ParentBaseFileName=""acrobat.exe"" OR ParentBaseFileName=""acrord32.exe"" OR ParentBaseFileName=""iexplore.exe"" OR ParentBaseFileName=""opera.exe"" OR ParentBaseFileName=""firefox.exe"" OR (ParentBaseFileName=""java.exe"" AND (parent_process_name IS NOT NULL AND match_regex(parent_process_name, /(?i)patch1-Hotfix1a/)=false)) OR ParentBaseFileName=""powershell.exe"" OR (ParentBaseFileName=""chrome.exe"" AND (cmd_line IS NULL OR (cmd_line IS NOT NULL AND match_regex(cmd_line, /(?i)chrome-extension/)=false))) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(dest_device_id, dest_user_id), body=create_map([""event_id"", event_id,  ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""cmd_line"", cmd_line, ""ParentBaseFileName"", ParentBaseFileName]) | into write_ssa_detected_events()",70,['T1059'],"{'exe', 'rex'}",139.0,"['cmd', 'exe', 'processes', 'applications', 'windows']"
s707,Resize Shadowstorage Volume,The following analytic identifies the resizing of shadowstorage using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""%resize%"") AND like(cmd_line, ""%shadowstorage%"") AND like(cmd_line, ""%maxsize%"") AND process_name=""vssadmin.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,['T1489'],{'clop'},,"['shadowstorage', 'vssadmin', 'resizing', 'shadow', 'ransomware']"
s708,Sdelete Application Execution,This analytic will detect the execution of sdelete.exe attempting to delete potentially important files that may related to adversary or insider threats to destroy evidence or information sabotage. Sdelete is a SysInternals utility meant to securely delete files on disk. This tool is commonly used to clear tracks and artifact on the targeted host.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event,""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), parent_cmd_line=ucast(map_get(input_event, ""parent_process""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND like(process_name, ""%sdelete%"") AND (like (cmd_line, ""%-c %"") OR like (cmd_line, ""%-f %"")OR like (cmd_line, ""%-p %"") OR like (cmd_line, ""%-r %"") OR like (cmd_line, ""%-q %"") OR like (cmd_line, ""%-s %"") OR like (cmd_line, ""%-z %"") OR like (cmd_line, ""%/accepteula%"") OR like (cmd_line, ""%-nobanner%"")OR like (cmd_line, ""%.doc%"")OR like (cmd_line, ""%.xls%"") OR like (cmd_line, ""%.ppt%"")OR like (cmd_line, ""%.rtf%"") OR like (cmd_line, ""%.pdf%"") OR like (cmd_line, ""%.key%"")OR like (cmd_line, ""%.log%"") OR like (cmd_line, ""%.txt%"") OR like (cmd_line, ""%.jpg%"") OR like (cmd_line, ""%.png%"") OR like (cmd_line, ""%.gif%"") OR like (cmd_line, ""%.bmp%"") OR like (cmd_line, ""%.7z%"")  OR like (cmd_line, ""%.zip%"") OR like (cmd_line, ""%.rar%"") OR like (cmd_line, ""%.tar%"") OR like (cmd_line, ""%.gz%"") OR like (cmd_line, ""%.xls%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""process_path"", process_path, ""parent_process_name"", parent_process_name, ""parent_cmd_line"", parent_cmd_line]) | into write_ssa_detected_events();",60,"['T1485', 'T1070.004', 'T1070']","{'exe', 'sdelete'}",344.0,"['sdelete', 'exe', 'tool', 'execution', 'disk']"
s709,System Process Running from Unexpected Location,"An attacker tries might try to use different version of a system command without overriding original, or they might try to avoid some detection running the process from a different folder. This detection checks that a list of system processes run inside C:\\Windows\System32 or C:\\Windows\SysWOW64 The list of system processes has been extracted from https://github.com/splunk/security_content/blob/develop/lookups/is_windows_system_file.csv and the original detection https://github.com/splunk/security_content/blob/develop/detections/system_processes_run_from_unexpected_locations.yml"," $ssa_input = | from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), user=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=lower(ucast(map_get(input_event, ""process_path""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null);
$cond_1 = | from $ssa_input | where process_name=""arp.exe"" OR process_name=""adaptertroubleshooter.exe"" OR process_name=""applicationframehost.exe"" OR process_name=""atbroker.exe"" OR process_name=""authhost.exe"" OR process_name=""autoworkplace.exe"" OR process_name=""axinstui.exe"" OR process_name=""backgroundtransferhost.exe"" OR process_name=""bdehdcfg.exe"" OR process_name=""bdeuisrv.exe"" OR process_name=""bdeunlockwizard.exe"" OR process_name=""bitlockerdeviceencryption.exe"" OR process_name=""bitlockerwizard.exe"" OR process_name=""bitlockerwizardelev.exe"" OR process_name=""bytecodegenerator.exe"" OR process_name=""camerasettingsuihost.exe"" OR process_name=""castsrv.exe"" OR process_name=""certenrollctrl.exe"" OR process_name=""checknetisolation.exe"" OR process_name=""clipup.exe"" OR process_name=""cloudexperiencehostbroker.exe"" OR process_name=""cloudnotifications.exe"" OR process_name=""cloudstoragewizard.exe"" OR process_name=""compmgmtlauncher.exe"" OR process_name=""compattelrunner.exe"" OR process_name=""computerdefaults.exe"" OR process_name=""credentialuibroker.exe"" OR process_name=""dfdwiz.exe"" OR process_name=""dwwin.exe"" OR process_name=""dataexchangehost.exe"" OR process_name=""defrag.exe"" OR process_name=""devicedisplayobjectprovider.exe"" OR process_name=""deviceeject.exe"" OR process_name=""deviceenroller.exe"" OR process_name=""devicepairingwizard.exe"" OR process_name=""deviceproperties.exe"" OR process_name=""disksnapshot.exe"" OR process_name=""dism.exe"" OR process_name=""displayswitch.exe"" OR process_name=""dmnotificationbroker.exe"" OR process_name=""dmomacpmo.exe"" OR process_name=""dpiscaling.exe"" OR process_name=""dsmusertask.exe"" OR process_name=""dxpserver.exe"" OR process_name=""edpcleanup.exe"" OR process_name=""eosnotify.exe"" OR process_name=""eap3host.exe"" OR process_name=""easpoliciesbrokerhost.exe"" OR process_name=""easeofaccessdialog.exe"" OR process_name=""ehstorauthn.exe"" OR process_name=""fxscover.exe"" OR process_name=""fxssvc.exe"" OR process_name=""fxsunatd.exe"" OR process_name=""filehistory.exe"" OR process_name=""fondue.exe"" OR process_name=""gamepanel.exe"" OR process_name=""genvalobj.exe"" OR process_name=""gettingstarted.exe"" OR process_name=""hostname.exe"" OR process_name=""icsentitlementhost.exe"" OR process_name=""infdefaultinstall.exe"" OR process_name=""installagent.exe"" OR process_name=""languagecomponentsinstallercomhandler.exe"" OR process_name=""launchtm.exe"" OR process_name=""launchwinapp.exe"" OR process_name=""legacynetuxhost.exe"" OR process_name=""licensemanagershellext.exe"" OR process_name=""licensingui.exe"" OR process_name=""locationnotificationwindows.exe"" OR process_name=""locationnotifications.exe"" OR process_name=""locator.exe"" OR process_name=""lockapphost.exe"" OR process_name=""lockscreencontentserver.exe"" OR process_name=""logonui.exe"" OR process_name=""lsaiso.exe"" OR process_name=""mdeserver.exe"" OR process_name=""mdmagent.exe"" OR process_name=""mdmappinstaller.exe"" OR process_name=""mrinfo.exe"" OR process_name=""mrt.exe"" OR process_name=""mschedexe.exe"" OR process_name=""magnify.exe"" OR process_name=""mbaeparsertask.exe"" OR process_name=""mdres.exe"" OR process_name=""mdsched.exe"" OR process_name=""migautoplay.exe"" OR process_name=""mpsigstub.exe"" OR process_name=""msspellcheckinghost.exe"" OR process_name=""muiunattend.exe"" OR process_name=""multidigimon.exe"" OR process_name=""musnotification.exe"" OR process_name=""musnotificationux.exe"" OR process_name=""napstat.exe"" OR process_name=""netstat.exe"" OR process_name=""narrator.exe"" OR process_name=""netcfgnotifyobjecthost.exe"" OR process_name=""netevtfwdr.exe"" OR process_name=""netproj.exe"" OR process_name=""netplwiz.exe"" OR process_name=""networkuxbroker.exe"";
$cond_2 = | from $ssa_input | where process_name=""openwith.exe"" OR process_name=""optionalfeatures.exe"" OR process_name=""pathping.exe"" OR process_name=""ping.exe"" OR process_name=""passwordonwakesettingflyout.exe"" OR process_name=""pickerhost.exe"" OR process_name=""pkgmgr.exe"" OR process_name=""pnpunattend.exe"" OR process_name=""pnputil.exe"" OR process_name=""presentationhost.exe"" OR process_name=""presentationsettings.exe"" OR process_name=""printbrmui.exe"" OR process_name=""printdialoghost.exe"" OR process_name=""printdialoghost3d.exe"" OR process_name=""printisolationhost.exe"" OR process_name=""proximityuxhost.exe"" OR process_name=""rdspnf.exe"" OR process_name=""rmactivate.exe"" OR process_name=""rmactivate_isv.exe"" OR process_name=""rmactivate_ssp.exe"" OR process_name=""rmactivate_ssp_isv.exe"" OR process_name=""route.exe"" OR process_name=""rdpsa.exe"" OR process_name=""rdpsaproxy.exe"" OR process_name=""rdpsauachelper.exe"" OR process_name=""reagentc.exe"" OR process_name=""recoverydrive.exe"" OR process_name=""register-cimprovider.exe"" OR process_name=""registeriepkeys.exe"" OR process_name=""relpost.exe"" OR process_name=""remoteposworker.exe"" OR process_name=""rmclient.exe"" OR process_name=""rpcping.exe"" OR process_name=""runlegacycplelevated.exe"" OR process_name=""runtimebroker.exe"" OR process_name=""sihclient.exe"" OR process_name=""searchfilterhost.exe"" OR process_name=""searchindexer.exe"" OR process_name=""searchprotocolhost.exe"" OR process_name=""secedit.exe"" OR process_name=""sensordataservice.exe"" OR process_name=""setieinstalleddate.exe"" OR process_name=""settingsynchost.exe"" OR process_name=""slidetoshutdown.exe"" OR process_name=""smartscreensettings.exe"" OR process_name=""sndvol.exe"" OR process_name=""snippingtool.exe"" OR process_name=""soundrecorder.exe"" OR process_name=""spaceagent.exe"" OR process_name=""sppextcomobj.exe"" OR process_name=""srtasks.exe"" OR process_name=""stikynot.exe"" OR process_name=""synchost.exe"" OR process_name=""sysreseterr.exe"" OR process_name=""systempropertiesadvanced.exe"" OR process_name=""systempropertiescomputername.exe"" OR process_name=""systempropertiesdataexecutionprevention.exe"" OR process_name=""systempropertieshardware.exe"" OR process_name=""systempropertiesperformance.exe"" OR process_name=""systempropertiesprotection.exe"" OR process_name=""systempropertiesremote.exe"" OR process_name=""systemsettingsadminflows.exe"" OR process_name=""systemsettingsbroker.exe"" OR process_name=""systemsettingsremovedevice.exe"" OR process_name=""tcpsvcs.exe"" OR process_name=""tracert.exe"" OR process_name=""tstheme.exe"" OR process_name=""tswbprxy.exe"" OR process_name=""tapiunattend.exe"" OR process_name=""taskmgr.exe"" OR process_name=""thumbnailextractionhost.exe"" OR process_name=""tokenbrokercookies.exe"" OR process_name=""tpminit.exe"" OR process_name=""tswpfwrp.exe"" OR process_name=""ui0detect.exe"" OR process_name=""upgraderesultsui.exe"" OR process_name=""useraccountbroker.exe"" OR process_name=""useraccountcontrolsettings.exe"" OR process_name=""usoclient.exe"" OR process_name=""utilman.exe"" OR process_name=""vssvc.exe"" OR process_name=""vaultcmd.exe"" OR process_name=""vaultsysui.exe"" OR process_name=""wfs.exe"" OR process_name=""wmpdmc.exe"" OR process_name=""wpdshextautoplay.exe"" OR process_name=""wscollect.exe"" OR process_name=""wsmanhttpconfig.exe"" OR process_name=""wsreset.exe"" OR process_name=""wudfhost.exe"" OR process_name=""wwahost.exe"" OR process_name=""wallpaperhost.exe"" OR process_name=""webcache.exe"" OR process_name=""werfault.exe"" OR process_name=""werfaultsecure.exe"" OR process_name=""winsat.exe"" OR process_name=""windows.media.backgroundplayback.exe"" OR process_name=""windowsactiondialog.exe"" OR process_name=""windowsanytimeupgrade.exe"" OR process_name=""windowsanytimeupgraderesults.exe"";
$cond_3 = | from $ssa_input | where process_name=""windowsanytimeupgradeui.exe"" OR process_name=""windowsupdateelevatedinstaller.exe"" OR process_name=""workfolders.exe"" OR process_name=""wpcmon.exe"" OR process_name=""acu.exe"" OR process_name=""aitagent.exe"" OR process_name=""aitstatic.exe"" OR process_name=""alg.exe"" OR process_name=""appidcertstorecheck.exe"" OR process_name=""appidpolicyconverter.exe"" OR process_name=""at.exe"" OR process_name=""attrib.exe"" OR process_name=""audiodg.exe"" OR process_name=""auditpol.exe"" OR process_name=""autochk.exe"" OR process_name=""autoconv.exe"" OR process_name=""autofmt.exe"" OR process_name=""baaupdate.exe"" OR process_name=""backgroundtaskhost.exe"" OR process_name=""bcastdvr.exe"" OR process_name=""bcdboot.exe"" OR process_name=""bcdedit.exe"" OR process_name=""bdechangepin.exe"" OR process_name=""bdeunlock.exe"" OR process_name=""bitsadmin.exe"" OR process_name=""bootcfg.exe"" OR process_name=""bootim.exe"" OR process_name=""bootsect.exe"" OR process_name=""bridgeunattend.exe"" OR process_name=""browser_broker.exe"" OR process_name=""bthudtask.exe"" OR process_name=""cacls.exe"" OR process_name=""calc.exe"" OR process_name=""cdpreference.exe"" OR process_name=""certreq.exe"" OR process_name=""certutil.exe"" OR process_name=""change.exe"" OR process_name=""changepk.exe"" OR process_name=""charmap.exe"" OR process_name=""chglogon.exe"" OR process_name=""chgport.exe"" OR process_name=""chgusr.exe"" OR process_name=""chkdsk.exe"" OR process_name=""chkntfs.exe"" OR process_name=""choice.exe"" OR process_name=""cipher.exe"" OR process_name=""cleanmgr.exe"" OR process_name=""cliconfg.exe"" OR process_name=""clip.exe"" OR process_name=""cmd.exe"" OR process_name=""cmdkey.exe"" OR process_name=""cmdl32.exe"" OR process_name=""cmmon32.exe"" OR process_name=""cmstp.exe"" OR process_name=""cofire.exe"" OR process_name=""colorcpl.exe"" OR process_name=""comp.exe"" OR process_name=""compact.exe"" OR process_name=""conhost.exe"" OR process_name=""consent.exe"" OR process_name=""control.exe"" OR process_name=""convert.exe"" OR process_name=""credwiz.exe"" OR process_name=""cscript.exe"" OR process_name=""csrss.exe"" OR process_name=""ctfmon.exe"" OR process_name=""cttune.exe"" OR process_name=""cttunesvr.exe"" OR process_name=""dashost.exe"" OR process_name=""dccw.exe"" OR process_name=""dcomcnfg.exe"" OR process_name=""ddodiag.exe"" OR process_name=""dfrgui.exe"" OR process_name=""dialer.exe"" OR process_name=""diantz.exe"" OR process_name=""dinotify.exe"" OR process_name=""diskpart.exe"" OR process_name=""diskperf.exe"" OR process_name=""diskraid.exe"" OR process_name=""dispdiag.exe"" OR process_name=""djoin.exe"" OR process_name=""dllhost.exe"" OR process_name=""dllhst3g.exe"" OR process_name=""dmcertinst.exe"" OR process_name=""dmcfghost.exe"" OR process_name=""dmclient.exe"" OR process_name=""dnscacheugc.exe"" OR process_name=""doskey.exe"" OR process_name=""dpapimig.exe"" OR process_name=""dpnsvr.exe"" OR process_name=""driverquery.exe"" OR process_name=""drvcfg.exe"" OR process_name=""drvinst.exe"" OR process_name=""dsregcmd.exe"" OR process_name=""dstokenclean.exe"" OR process_name=""dvdplay.exe"" OR process_name=""dvdupgrd.exe"" OR process_name=""dwm.exe"" OR process_name=""dxdiag.exe"" OR process_name=""easinvoker.exe"" OR process_name=""efsui.exe"";
$cond_4 = | from $ssa_input | where process_name=""embeddedapplauncher.exe"" OR process_name=""esentutl.exe"" OR process_name=""eudcedit.exe"" OR process_name=""eventcreate.exe"" OR process_name=""eventvwr.exe"" OR process_name=""expand.exe"" OR process_name=""extrac32.exe"" OR process_name=""fc.exe"" OR process_name=""fhmanagew.exe"" OR process_name=""find.exe"" OR process_name=""findstr.exe"" OR process_name=""finger.exe"" OR process_name=""fixmapi.exe"" OR process_name=""fltmc.exe"" OR process_name=""fodhelper.exe"" OR process_name=""fontdrvhost.exe"" OR process_name=""fontview.exe"" OR process_name=""forfiles.exe"" OR process_name=""fsavailux.exe"" OR process_name=""fsquirt.exe"" OR process_name=""fsutil.exe"" OR process_name=""ftp.exe"" OR process_name=""fvenotify.exe"" OR process_name=""fveprompt.exe"" OR process_name=""getmac.exe"" OR process_name=""gpresult.exe"" OR process_name=""gpscript.exe"" OR process_name=""gpupdate.exe"" OR process_name=""grpconv.exe"" OR process_name=""hdwwiz.exe"" OR process_name=""help.exe"" OR process_name=""hwrcomp.exe"" OR process_name=""hwrreg.exe"" OR process_name=""icacls.exe"" OR process_name=""icardagt.exe"" OR process_name=""icsunattend.exe"" OR process_name=""ie4uinit.exe"" OR process_name=""ieunatt.exe"" OR process_name=""ieetwcollector.exe"" OR process_name=""iexpress.exe"" OR process_name=""immersivetpmvscmgrsvr.exe"" OR process_name=""ipconfig.exe"" OR process_name=""irftp.exe"" OR process_name=""iscsicli.exe"" OR process_name=""iscsicpl.exe"" OR process_name=""isoburn.exe"" OR process_name=""klist.exe"" OR process_name=""ksetup.exe"" OR process_name=""ktmutil.exe"" OR process_name=""label.exe"" OR process_name=""licensingdiag.exe"" OR process_name=""lodctr.exe"" OR process_name=""logagent.exe"" OR process_name=""logman.exe"" OR process_name=""logoff.exe"" OR process_name=""lpkinstall.exe"" OR process_name=""lpksetup.exe"" OR process_name=""lpremove.exe"" OR process_name=""lsass.exe"" OR process_name=""lsm.exe"" OR process_name=""makecab.exe"" OR process_name=""manage-bde.exe"" OR process_name=""mblctr.exe"" OR process_name=""mcbuilder.exe"" OR process_name=""mctadmin.exe"" OR process_name=""mfpmp.exe"" OR process_name=""mmc.exe"" OR process_name=""mobsync.exe"" OR process_name=""mountvol.exe"" OR process_name=""mpnotify.exe"" OR process_name=""msconfig.exe"" OR process_name=""msdt.exe"" OR process_name=""msdtc.exe"" OR process_name=""msfeedssync.exe"" OR process_name=""msg.exe"" OR process_name=""mshta.exe"" OR process_name=""msiexec.exe"" OR process_name=""msinfo32.exe"" OR process_name=""mspaint.exe"" OR process_name=""msra.exe"" OR process_name=""mstsc.exe"" OR process_name=""mtstocom.exe"" OR process_name=""nbtstat.exe"" OR process_name=""ndadmin.exe"" OR process_name=""net.exe"" OR process_name=""net1.exe"" OR process_name=""netbtugc.exe"" OR process_name=""netcfg.exe"" OR process_name=""netiougc.exe"" OR process_name=""netsh.exe"" OR process_name=""newdev.exe"" OR process_name=""nltest.exe"" OR process_name=""notepad.exe"" OR process_name=""nslookup.exe"" OR process_name=""ntoskrnl.exe"" OR process_name=""ntprint.exe"" OR process_name=""ocsetup.exe"" OR process_name=""odbcad32.exe"" OR process_name=""odbcconf.exe"" OR process_name=""omadmclient.exe"" OR process_name=""omadmprc.exe"";
$cond_5 = | from $ssa_input | where process_name=""openfiles.exe"" OR process_name=""osk.exe"" OR process_name=""p2phost.exe"" OR process_name=""pcalua.exe"" OR process_name=""pcaui.exe"" OR process_name=""pcawrk.exe"" OR process_name=""pcwrun.exe"" OR process_name=""perfmon.exe"" OR process_name=""phoneactivate.exe"" OR process_name=""plasrv.exe"" OR process_name=""poqexec.exe"" OR process_name=""powercfg.exe"" OR process_name=""prevhost.exe"" OR process_name=""print.exe"" OR process_name=""printfilterpipelinesvc.exe"" OR process_name=""printui.exe"" OR process_name=""proquota.exe"" OR process_name=""provtool.exe"" OR process_name=""psr.exe"" OR process_name=""pwlauncher.exe"" OR process_name=""qappsrv.exe"" OR process_name=""qprocess.exe"" OR process_name=""query.exe"" OR process_name=""quser.exe"" OR process_name=""qwinsta.exe"" OR process_name=""rasautou.exe"" OR process_name=""rasdial.exe"" OR process_name=""raserver.exe"" OR process_name=""rasphone.exe"" OR process_name=""rdpclip.exe"" OR process_name=""rdpinput.exe"" OR process_name=""rdrleakdiag.exe"" OR process_name=""recdisc.exe"" OR process_name=""recover.exe"" OR process_name=""reg.exe"" OR process_name=""regedt32.exe"" OR process_name=""regini.exe"" OR process_name=""regsvr32.exe"" OR process_name=""rekeywiz.exe"" OR process_name=""relog.exe"" OR process_name=""repair-bde.exe"" OR process_name=""replace.exe"" OR process_name=""reset.exe"" OR process_name=""resmon.exe"" OR process_name=""rmttpmvscmgrsvr.exe"" OR process_name=""rrinstaller.exe"" OR process_name=""rstrui.exe"" OR process_name=""runas.exe"" OR process_name=""rundll32.exe"" OR process_name=""runonce.exe"" OR process_name=""rwinsta.exe"" OR process_name=""sbunattend.exe"" OR process_name=""sc.exe"" OR process_name=""schtasks.exe"" OR process_name=""sdbinst.exe"" OR process_name=""sdchange.exe"" OR process_name=""sdclt.exe"" OR process_name=""sdiagnhost.exe"" OR process_name=""secinit.exe"" OR process_name=""services.exe"" OR process_name=""sessionmsg.exe"" OR process_name=""sethc.exe"" OR process_name=""setspn.exe"" OR process_name=""setupcl.exe"" OR process_name=""setupugc.exe"" OR process_name=""setx.exe"" OR process_name=""sfc.exe"" OR process_name=""shadow.exe"" OR process_name=""shrpubw.exe"" OR process_name=""shutdown.exe"" OR process_name=""sigverif.exe"" OR process_name=""sihost.exe"" OR process_name=""slui.exe"" OR process_name=""smss.exe"" OR process_name=""snmptrap.exe"" OR process_name=""sort.exe"" OR process_name=""spinstall.exe"" OR process_name=""spoolsv.exe"" OR process_name=""sppsvc.exe"" OR process_name=""spreview.exe"" OR process_name=""srdelayed.exe"" OR process_name=""subst.exe"" OR process_name=""svchost.exe"" OR process_name=""sxstrace.exe"" OR process_name=""syskey.exe"" OR process_name=""systeminfo.exe"" OR process_name=""systemreset.exe"" OR process_name=""systray.exe"" OR process_name=""tabcal.exe"" OR process_name=""takeown.exe"" OR process_name=""taskeng.exe"" OR process_name=""taskhost.exe"" OR process_name=""taskhostw.exe"" OR process_name=""taskkill.exe"" OR process_name=""tasklist.exe"" OR process_name=""taskmgr.exe"" OR process_name=""tcmsetup.exe"" OR process_name=""timeout.exe"" OR process_name=""tpmvscmgr.exe"" OR process_name=""tpmvscmgrsvr.exe"";
$cond_6 = | from $ssa_input | where process_name=""tracerpt.exe"" OR process_name=""tscon.exe"" OR process_name=""tsdiscon.exe"" OR process_name=""tskill.exe"" OR process_name=""typeperf.exe"" OR process_name=""tzsync.exe"" OR process_name=""tzutil.exe"" OR process_name=""ucsvc.exe"" OR process_name=""unlodctr.exe"" OR process_name=""unregmp2.exe"" OR process_name=""upnpcont.exe"" OR process_name=""userinit.exe"" OR process_name=""vds.exe"" OR process_name=""vdsldr.exe"" OR process_name=""verclsid.exe"" OR process_name=""verifier.exe"" OR process_name=""verifiergui.exe"" OR process_name=""vmicsvc.exe"" OR process_name=""vssadmin.exe"" OR process_name=""w32tm.exe"" OR process_name=""waitfor.exe"" OR process_name=""wbadmin.exe"" OR process_name=""wbengine.exe"" OR process_name=""wecutil.exe"" OR process_name=""wermgr.exe"" OR process_name=""wevtutil.exe"" OR process_name=""wextract.exe"" OR process_name=""where.exe"" OR process_name=""whoami.exe"" OR process_name=""wiaacmgr.exe"" OR process_name=""wiawow64.exe"" OR process_name=""wifitask.exe"" OR process_name=""wimserv.exe"" OR process_name=""wininit.exe"" OR process_name=""winload.exe"" OR process_name=""winlogon.exe"" OR process_name=""winresume.exe"" OR process_name=""winrs.exe"" OR process_name=""winrshost.exe"" OR process_name=""winver.exe"" OR process_name=""wisptis.exe"" OR process_name=""wkspbroker.exe"" OR process_name=""wksprt.exe"" OR process_name=""wlanext.exe"" OR process_name=""wlrmdr.exe"" OR process_name=""wowreg32.exe"" OR process_name=""wpnpinst.exe"" OR process_name=""wpr.exe"" OR process_name=""write.exe"" OR process_name=""wscript.exe"" OR process_name=""wsmprovhost.exe"" OR process_name=""wsqmcons.exe"" OR process_name=""wuapihost.exe"" OR process_name=""wuapp.exe"" OR process_name=""wuauclt.exe"" OR process_name=""wusa.exe"" OR process_name=""xcopy.exe"" OR process_name=""xpsrchvw.exe"" OR process_name=""xwizard.exe"";
| from $cond_1 | union $cond_2 | union $cond_3 | union $cond_4 | union $cond_5 | union $cond_6 | where match_regex(process_path, /(?i)\\windows\\system32/)=false AND match_regex(process_path, /(?i)\\windows\\syswow64/)=false | eval start_time=timestamp, end_time=timestamp, entities=mvappend(device, user), body=create_map([""event_id"", event_id, ""process_path"", process_path, ""process_name"", process_name]) | into write_ssa_detected_events();",70,['T1036'],"{'netstat', 'esentutl', 'net.exe', 'forfiles', 'tasklist', 'arp', 'route', 'ipconfig', 'nbtstat', 'nltest', 'netsh', 'systeminfo', 'wevtutil', 'certutil', 'ping', 'ftp', 'schtasks', 'bitsadmin', 'sihost', 'expand', 'rundll32'}",,"['system_processes_run_from_unexpected_locations', 'is_windows_system_file', 'system32', 'processes', 'syswow64']"
s710,WBAdmin Delete System Backups,This search looks for flags passed to wbadmin.exe (Windows Backup Administrator Tool) that delete backup files. This is typically used by ransomware to prevent recovery.,"| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where (cmd_line IS NOT NULL AND process_name IS NOT NULL) | where process_name=""wbadmin.exe"" | where like (cmd_line, ""%delete%"") OR like (cmd_line, ""%catalog%"") OR like (cmd_line,  ""%systemstatebackup%"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",30,['T1490'],"{'backup', 'ryuk'}",,"['ransomware', 'backup', 'wbadmin', 'delete', 'files']"
s711,WevtUtil Usage To Clear Logs,"The wevtutil.exe application is the windows event log utility. This searches for wevtutil.exe with parameters for clearing the application, security, setup, powershell, sysmon, or system event logs.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""% cl %"") AND (match_regex(cmd_line, /(?i)security/)=true OR match_regex(cmd_line, /(?i)system/)=true OR match_regex(cmd_line, /(?i)sysmon/)=true OR match_regex(cmd_line, /(?i)application/)=true OR match_regex(cmd_line, /(?i)setup/)=true OR match_regex(cmd_line, /(?i)powershell/)=true) AND process_name=""wevtutil.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1070', 'T1070.001']","{'wevtutil', 'exe', 'powershell', 'clop'}",,"['wevtutil', 'logs', 'log', 'exe', 'application']"
s712,Wevtutil Usage To Disable Logs,This search is to detect execution of wevtutil.exe to disable logs. This technique was seen in several ransomware to disable the event logs to evade alerts and detections in compromised host.,"| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND like(cmd_line, ""% sl %"") AND like(cmd_line, ""%/e:false%"") AND process_name=""wevtutil.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1070', 'T1070.001']",{'wevtutil'},,"['ransomware', 'wevtutil', 'disable', 'logs', 'compromised']"
s713,Windows Bitsadmin Download File,"The following query identifies Microsoft Background Intelligent Transfer Service utility `bitsadmin.exe` using the `transfer` parameter to download a remote object. In addition, look for `download` or `upload` on the command-line, the switches are not required to perform a transfer. Capture any files downloaded. Review the reputation of the IP or domain used. Typically once executed, a follow on command will be used to execute the dropped file. Note that the network connection or file modification events related will not spawn or create from `bitsadmin.exe`, but the artifacts will appear in a parallel process of `svchost.exe` with a command-line similar to `svchost.exe -k netsvcs -s BITS`. It's important to review all parallel and child processes to capture any behaviors and artifacts. In some suspicious and malicious instances, BITS jobs will be created. You can use `bitsadmin /list /verbose` to list out the jobs during investigation.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""bitsadmin.exe"" AND (like (cmd_line, ""%transfer%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1197', 'T1105']","{'exe', 'bitsadmin', 'sodinokibi', 'revil', 'darkside'}",,"['bitsadmin', 'bits', 'exe', 'processes', 'capture']"
s714,Windows Bits Job Persistence,"The following query identifies Microsoft Background Intelligent Transfer Service utility `bitsadmin.exe` scheduling a BITS job to persist on an endpoint. The query identifies the parameters used to create, resume or add a file to a BITS job. Typically seen combined in a oneliner or ran in sequence. If identified, review the BITS job created and capture any files written to disk. It is possible for BITS to be used to upload files and this may require further network data analysis to identify. You can use `bitsadmin /list /verbose` to list out the jobs during investigation.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""bitsadmin.exe"" AND (like (cmd_line, ""%create%"") OR like (cmd_line, ""%addfile%"")OR like (cmd_line, ""%setnotifyflags%"") OR like (cmd_line, ""%setnotifycmdline%"") OR like (cmd_line, ""%setminretrydelay%"") OR like (cmd_line, ""%setcustomheaders%"") OR like (cmd_line, ""%resume%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,['T1197'],{'bitsadmin'},73.0,"['bitsadmin', 'bits', 'microsoft', 'files', 'file']"
s715,Windows CertUtil Decode File,"CertUtil.exe may be used to `encode` and `decode` a file, including PE and script code. Encoding will convert a file to base64 with `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` tags. Malicious usage will include decoding a encoded file that was downloaded. Once decoded, it will be loaded by a parallel process. Note that there are two additional command switches that may be used - `encodehex` and `decodehex`. Similarly, the file will be encoded in HEX and later decoded for further execution. During triage, identify the source of the file being decoded. Review its contents or execution behavior for further analysis.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""certutil.exe"" AND (like (cmd_line, ""%decode%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1140'],{'certutil'},,"['certutil', 'encoded', 'decode', 'base64', 'decoded']"
s716,Windows CertUtil URLCache Download,"Certutil.exe may download a file from a remote destination using `-urlcache`. This behavior does require a URL to be passed on the command-line. In addition, `-f` (force) and `-split` (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for `certutil.exe` to contact public IP space. However, it is uncommon for `certutil.exe` to write files to world writeable paths.\ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""certutil.exe"" AND (like (cmd_line, ""%urlcache%"") AND like (cmd_line, ""%split%"")) OR (like (cmd_line, ""%urlcache%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",90,['T1105'],"{'exe', 'darkside', 'certutil'}",,"['certutil', 'file', 'url', 'exe', 'files']"
s717,Windows CertUtil VerifyCtl Download,"Certutil.exe may download a file from a remote destination using `-VerifyCtl`. This behavior does require a URL to be passed on the command-line. In addition, `-f` (force) and `-split` (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for `certutil.exe` to contact public IP space. \ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question. Using `-VerifyCtl`, the file will either be written to the current working directory or `%APPDATA%\..\LocalLow\Microsoft\CryptnetUrlCache\Content\<hash>`. ","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""certutil.exe"" AND (like (cmd_line, ""%verifyctl%"") AND like (cmd_line, ""%split%"")) OR (like (cmd_line, ""%verifyctl%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",90,['T1105'],"{'darkside', 'certutil'}",,"['certutil', 'cryptneturlcache', 'verifyctl', 'file', 'url']"
s718,Windows Curl Upload to Remote Destination,"The following analytic identifies the use of Windows Curl.exe uploading a file to a remote destination. \
`-T` or `--upload-file` is used when a file is to be uploaded to a remotge destination. \
`-d` or `--data` POST is the HTTP method that was invented to send data to a receiving web application, and it is, for example, how most common HTML forms on the web work. \
HTTP multipart formposts are done with `-F`, but this appears to not be compatible with the Windows version of Curl. Will update if identified adversary tradecraft. \
Adversaries may use one of the three methods based on the remote destination and what they are attempting to upload (zip vs txt). During triage, review parallel processes for further behavior. In addition, identify if the upload was successful in network logs. If a file was uploaded, isolate the endpoint and review.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null)
| where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""curl.exe"" AND (like (cmd_line, ""%-T %"") OR like (cmd_line, ""%--upload-file %"")OR like (cmd_line, ""%-d %"") OR like (cmd_line, ""%--data %"") OR like (cmd_line, ""%-F %""))
| eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,['T1105'],{'curl'},142.0,"['curl', 'uploading', 'http', 'upload', 'file']"
s719,Windows Defender Tools in Non Standard Path,The following analytic identifies usage of the MPCmdRun utility that can be abused by adversaries by moving it to a new directory.," from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), user=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_path=lower(ucast(map_get(input_event, ""process_path""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process_name IS NOT NULL AND process_name=""mpcmdrun.exe"" | where process_path IS NOT NULL AND match_regex(process_path, /(?i)\\microsoft\\windows defender\\platform/)=false AND match_regex(process_path, /(?i)\\windows defender/)=false | eval start_time=timestamp, end_time=timestamp, entities=mvappend(device, user), body=create_map([""event_id"", event_id, ""process_path"", process_path, ""process_name"", process_name, ""cmd_line"", cmd_line]) | into write_ssa_detected_events(); ",70,"['T1036', 'T1036.003']",,241.0,"['mpcmdrun', 'directory', 'utility', 'adversaries', 'abused']"
s720,Windows Diskshadow Proxy Execution,"DiskShadow.exe is a Microsoft Signed binary present on Windows Server. It has a scripting mode intended for complex scripted backup operations. This feature also allows for execution of arbitrary unsigned code. This analytic looks for the usage of the scripting mode flags in executions of DiskShadow. During triage, compare to known backup behavior in your environment and then review the scripts called by diskshadow.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""diskshadow.exe"" AND (like (cmd_line, ""%-s%"") OR like (cmd_line, ""%/s%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,['T1218'],"{'signed binary', 'exe', 'backup'}",80.0,"['diskshadow', 'microsoft', 'exe', 'backup', 'scripts']"
s721,Windows DotNet Binary in Non Standard Path,The following analytic identifies native .net binaries within the Windows operating system that may be abused by adversaries by moving it to a new directory. The analytic identifies the .net binary by using a list. If one or the other matches an alert will be generated. Adversaries abuse these binaries as they are native to Windows and native DotNet. Note that not all SDK (post install of Windows) are captured in the list. Lookup - https://github.com/splunk/security_content/blob/develop/lookups/is_net_windows_file.csv.," $ssa_input = | from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), user=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=lower(ucast(map_get(input_event, ""process_path""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null);
$cond_1 = | from $ssa_input | where process_name=""msbuild.exe"" OR process_name=""comsvcconfig.exe"" OR process_name=""dfsradmin.exe"" OR process_name=""dfsvc.exe"" OR process_name=""microsoft.workflow.compiler.exe"" OR process_name=""smsvchost.exe"" OR process_name=""wsatconfig.exe"" OR process_name=""addinprocess.exe"" OR process_name=""addinprocess32.exe"" OR process_name=""addinutil.exe"" OR process_name=""aspnet_compiler.exe"" OR process_name=""aspnet_regbrowsers.exe"" OR process_name=""aspnet_regsql.exe"" OR process_name=""caspol.exe"" OR process_name=""datasvcutil.exe"" OR process_name=""edmgen.exe"" OR process_name=""installutil.exe"" OR process_name=""jsc.exe"" OR process_name=""ngentask.exe"" OR process_name=""regasm.exe"" OR process_name=""regsvcs.exe"" OR process_name=""sdnbr.exe"" OR process_name=""acu.exe"" OR process_name=""appvstreamingux.exe"" OR process_name=""dsac.exe"" OR process_name=""lbfoadmin.exe"" OR process_name=""microsoft.uev.synccontroller.exe"" OR process_name=""mtedit.exe"" OR process_name=""scriptrunner.exe"" OR process_name=""servermanager.exe"" OR process_name=""stordiag.exe"" OR process_name=""tzsync.exe"" OR process_name=""uevagentpolicygenerator.exe"" OR process_name=""uevappmonitor.exe"" OR process_name=""uevtemplatebaselinegenerator.exe"" OR process_name=""uevtemplateconfigitemgenerator.exe"" OR process_name=""powershell_ise.exe"" OR process_name=""iediagcmd.exe"" OR process_name=""xbox.tcui.exe"" OR process_name=""microsoft.activedirectory.webservices.exe"" OR process_name=""iisual.exe"" OR process_name=""filehistory.exe"" OR process_name=""secureassessmentbrowser.exe"";
| from $cond_1 | where match_regex(process_path, /(?i)\\windows\\system32/)=false AND match_regex(process_path, /(?i)\\windows\\syswow64/)=false AND match_regex(process_path, /(?i)\\windows\\adws/)=false AND match_regex(process_path, /(?i)\\windows\\networkcontroller/)=false AND match_regex(process_path, /(?i)\\windows\\systemapps/)=false AND match_regex(process_path, /(?i)\\winsxs/)=false AND match_regex(process_path, /(?i)\\microsoft.net/)=false | eval start_time=timestamp, end_time=timestamp, entities=mvappend(device, user), body=create_map([""event_id"", event_id, ""process_path"", process_path, ""process_name"", process_name]) | into write_ssa_detected_events();",70,"['T1036', 'T1036.003', 'T1218', 'T1218.004']","{'signed binary', 'msbuild', 'whispergate'}",,"['is_net_windows_file', 'binaries', 'dotnet', 'sdk', 'net']"
s722,Windows Eventvwr UAC Bypass,"The following search identifies Eventvwr bypass by identifying the registry modification into a specific path that eventvwr.msc looks to (but is not valid) upon execution. A successful attack will include a suspicious command to be executed upon eventvwr.msc loading. Upon triage, review the parallel processes that have executed. Identify any additional registry modifications on the endpoint that may look suspicious. Remediate as necessary.","| from read_ssa_enriched_events() | where ""Endpoint_Registry"" IN (_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), registry_path=lower(ucast(map_get(input_event, ""registry_path""), ""string"", null)), registry_hive=lower(ucast(map_get(input_event, ""registry_hive""), ""string"", null)), registry_value_name=lower(ucast(map_get(input_event, ""registry_value_name""), ""string"", null)), registry_key_name=lower(ucast(map_get(input_event, ""parent_process_name""), ""string"", null)), registry_value_type=lower(ucast(map_get(input_event, ""registry_value_type""), ""string"", null)), registry_value_data=lower(ucast(map_get(input_event, ""registry_value_data""), ""string"", null)), process_guid=lower(ucast(map_get(input_event, ""process_guid""), ""string"", null)) | where registry_path IS NOT NULL AND (like (registry_path, ""%mscfile\\\\shell\\\\open\\\\command%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""registry_path"", registry_path, ""registry_hive"", registry_hive, ""registry_value_name"", registry_value_name, ""registry_key_name"", registry_key_name, ""registry_value_type"", registry_value_type, ""registry_value_data"", registry_value_data, ""process_guid"", process_guid]) | into write_ssa_detected_events();",80,"['T1548.002', 'T1548']","{'icedid', 'lazyscripter', 'registry modification', 'empire'}",,"['eventvwr', 'registry', 'bypass', 'msc', 'attack']"
s723,Windows LOLBin Binary in Non Standard Path,"The following analytic identifies native living off the land binaries within the Windows operating system that may be abused by adversaries by moving it to a new directory. The list of binaries was derived from the https://lolbas-project.github.io site, and excluded common process names (cmd.exe, explorer.exe, csc.exe, hh.exe, regedit.exe) and DotNet binaries. It also does not include the category of OtherMSBinaries."," $ssa_input = | from read_ssa_enriched_events() | eval device=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), user=ucast(map_get(input_event, ""dest_user_id""), ""string"", null), timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=lower(ucast(map_get(input_event, ""process_path""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null);
$cond_1 = | from $ssa_input | where process_name=""appinstaller.exe"" OR process_name=""aspnet_compiler.exe"" OR process_name=""at.exe"" OR process_name=""atbroker.exe"" OR process_name=""bash.exe"" OR process_name=""bitsadmin.exe"" OR process_name=""certoc.exe"" OR process_name=""certreq.exe"" OR process_name=""certutil.exe"" OR process_name=""cmdkey.exe"" OR process_name=""cmdl32.exe"" OR process_name=""cmstp.exe"" OR process_name=""configsecuritypolicy.exe"" OR process_name=""control.exe"" OR process_name=""cscript.exe"" OR process_name=""datasvcutil.exe"" OR process_name=""desktopimgdownldr.exe"" OR process_name=""dfsvc.exe"" OR process_name=""diantz.exe"" OR process_name=""diskshadow.exe"" OR process_name=""dllhost.exe"" OR process_name=""dnscmd.exe"" OR process_name=""esentutl.exe"" OR process_name=""eventvwr.exe"" OR process_name=""expand.exe"" OR process_name=""extexport.exe"" OR process_name=""extrac32.exe"" OR process_name=""findstr.exe"" OR process_name=""finger.exe"" OR process_name=""fltmc.exe"" OR process_name=""forfiles.exe"" OR process_name=""ftp.exe"" OR process_name=""gfxdownloadwrapper.exe"" OR process_name=""gpscript.exe"" OR process_name=""imewdbld.exe"" OR process_name=""ie4uinit.exe"" OR process_name=""ieexec.exe"" OR process_name=""ilasm.exe"" OR process_name=""infdefaultinstall.exe"" OR process_name=""makecab.exe"" OR process_name=""mavinject.exe"" OR process_name=""microsoft.workflow.compiler.exe"" OR process_name=""mmc.exe"" OR process_name=""msconfig.exe"" OR process_name=""msdt.exe"" OR process_name=""mshta.exe"" OR process_name=""msiexec.exe"" OR process_name=""netsh.exe"" OR process_name=""odbcconf.exe"" OR process_name=""offlinescannershell.exe"" OR process_name=""onedrivestandaloneupdater.exe"" OR process_name=""pcalua.exe"" OR process_name=""pcwrun.exe"" OR process_name=""pktmon.exe"" OR process_name=""pnputil.exe"" OR process_name=""presentationhost.exe"" OR process_name=""print.exe"" OR process_name=""printbrm.exe"" OR process_name=""psr.exe"" OR process_name=""rasautou.exe"" OR process_name=""reg.exe"" OR process_name=""regini.exe"" OR process_name=""register-cimprovider.exe"" OR process_name=""regsvr32.exe"" OR process_name=""replace.exe"" OR process_name=""rpcping.exe"" OR process_name=""rundll32.exe"" OR process_name=""runonce.exe"" OR process_name=""runscripthelper.exe"" OR process_name=""sc.exe"" OR process_name=""schtasks.exe"" OR process_name=""scriptrunner.exe"" OR process_name=""settingsynchost.exe"" OR process_name=""syncappvpublishingserver.exe"" OR process_name=""ttdinject.exe"" OR process_name=""tttracer.exe"" OR process_name=""vbc.exe"" OR process_name=""verclsid.exe"" OR process_name=""wab.exe"" OR process_name=""wlrmdr.exe"" OR process_name=""wmic.exe"" OR process_name=""workfolders.exe"" OR process_name=""wscript.exe"" OR process_name=""wsreset.exe"" OR process_name=""wuauclt.exe"" OR process_name=""xwizard.exe"";
| from $cond_1 | where match_regex(process_path, /(?i)\\windows\\system32/)=false AND match_regex(process_path, /(?i)\\windows\\syswow64/)=false AND match_regex(process_path, /(?i)\\windows\\adws/)=false AND match_regex(process_path, /(?i)\\windows\\networkcontroller/)=false AND match_regex(process_path, /(?i)\\windows\\systemapps/)=false AND match_regex(process_path, /(?i)\\winsxs/)=false AND match_regex(process_path, /(?i)\\microsoft.net/)=false | eval start_time=timestamp, end_time=timestamp, entities=mvappend(device, user), body=create_map([""event_id"", event_id, ""process_path"", process_path, ""process_name"", process_name]) | into write_ssa_detected_events();",70,"['T1036', 'T1036.003', 'T1218', 'T1218.004']","{'esentutl', 'netsh', 'schtasks', 'forfiles', 'bitsadmin', 'whispergate', 'certutil', 'lolbin', 'expand', 'rundll32', 'ftp'}",,"['binaries', 'othermsbinaries', 'dotnet', 'native', 'windows']"
s724,Windows MSHTA Child Process,"The following analytic identifies child processes spawning from  ""mshta.exe"". The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, parent process ""mshta.exe"" and its child process.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=lower(ucast(map_get(input_event, ""parent_process_name""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND parent_process_name IS NOT NULL | where like(parent_process_name, ""%\\\\mshta.exe"") AND (process_name=""powershell.exe"" OR process_name=""cmd.exe"" OR process_name=""scrcons.exe"" OR process_name=""colorcpl.exe"" OR process_name=""msbuild.exe"" OR process_name=""microsoft.workflow.compiler.exe"" OR process_name=""searchprotocolhost.exe"" OR process_name=""cscript.exe""  OR process_name=""wscript.exe"") | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1218.005', 'T1218']","{'msbuild', 'exe'}",139.0,"['processes', 'process', 'mshta', 'exe', 'command']"
s725,Windows MSHTA Command-Line URL,"This analytic identifies when Microsoft HTML Application Host (mshta.exe) utility is used to make remote http connections. Adversaries may use mshta.exe to proxy the download and execution of remote .hta files. The analytic identifies command line arguments of http and https being used. This technique is commonly used by malicious software to bypass preventative controls. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""rundll32.exe"" and its parent process.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL | where process_name=""mshta.exe"" AND (like (cmd_line, ""%http://%"") OR like (cmd_line, ""%https://%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1218.005', 'T1218']","{'dll', 'exe', 'rundll32'}",341.0,"['rundll32', 'mshta', 'execution', 'exe', 'http']"
s726,Windows MSHTA Inline HTA Execution,"The following analytic identifies ""mshta.exe"" execution with inline protocol handlers. ""JavaScript"", ""VBScript"", and ""About"" are the only supported options when invoking HTA content directly on the command-line. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""mshta.exe"" and its parent process.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL | where process_name=""mshta.exe"" AND (like (cmd_line, ""%vbscript%"") OR like (cmd_line, ""%javascript%"") OR like (cmd_line, ""%about%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1218.005', 'T1218']",{'exe'},58.0,"['mshta', 'hta', 'execution', 'exe', 'vbscript']"
s727,Windows Powershell Connect to Internet With Hidden Window,"The following hunting analytic identifies PowerShell commands utilizing the WindowStyle parameter to hide the window on the compromised endpoint. This combination of command-line options is suspicious because it is overriding the default PowerShell execution policy, attempts to hide its activity from the user, and connects to the Internet. Removed in this version of the query is New-Object. The analytic identifies all variations of WindowStyle, as PowerShell allows the ability to shorten the parameter. For example w, win, windowsty and so forth. In addition, through our research it was identified that PowerShell will interpret different command switch types beyond the hyphen. We have added endash, emdash, horizontal bar, and forward slash.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process IS NOT NULL AND process_name IS NOT NULL | where process_name=""pwsh.exe"" OR process_name=""pwsh.exe"" OR process_name=""sqlps.exe"" OR process_name=""sqltoolsps.exe"" OR process_name=""powershell.exe"" OR process_name=""powershell_ise.exe"" | where match_regex(process, /(?i)[\-|\/]w(in*d*o*w*s*t*y*l*e*)*\s+[^-]/)=true | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""process"", process, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1020'],"{'hafnium', 'cve-2021-44228', 'powershell', 'ps1', 'mudcarp'}",,"['powershell', 'windowstyle', 'windowsty', 'command', 'compromised']"
s728,Windows Powershell DownloadFile,"The following analytic identifies the use of PowerShell downloading a file using `DownloadFile` method. This particular method is utilized in many different PowerShell frameworks to download files and output to disk. Identify the source (IP/domain) and destination file and triage appropriately. If AMSI logging or PowerShell transaction logs are available, review for further details of the implant.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL | where process_name=""pwsh.exe"" OR process_name=""pwsh.exe"" OR process_name=""sqlps.exe"" OR process_name=""sqltoolsps.exe"" OR process_name=""powershell.exe"" OR process_name=""powershell_ise.exe"" | where (like (cmd_line, ""%downloadfile%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",50,['T1020'],"{'lazyscripter', 'powershell', 'cve-2021-44228', 'empire'}",,"['downloadfile', 'powershell', 'downloading', 'file', 'files']"
s729,Windows PowerShell Start-BitsTransfer,"Start-BitsTransfer is the PowerShell ""version"" of BitsAdmin.exe. Similar functionality is present. This technique variation is not as commonly used by adversaries, but has been abused in the past. Lesser known uses include the ability to set the `-TransferType` to `Upload` for exfiltration of files. In an instance where `Upload` is used, it is highly possible files will be archived. During triage, review parallel processes and process lineage. Capture any files on disk and review. For the remote domain or IP, what is the reputation?","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL | where process_name=""pwsh.exe"" OR process_name=""pwsh.exe"" OR process_name=""sqlps.exe"" OR process_name=""sqltoolsps.exe"" OR process_name=""powershell.exe"" OR process_name=""powershell_ise.exe"" | where (like (cmd_line, ""%start-bitstransfer%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1197', 'T1105']","{'powershell', 'bitsadmin'}",340.0,"['bitstransfer', 'bitsadmin', 'powershell', 'files', 'capture']"
s730,Windows Rasautou DLL Execution,"The following analytic identifies the Windows Windows Remote Auto Dialer, rasautou.exe executing an arbitrary DLL. This technique is used to execute arbitrary shellcode or DLLs via the rasautou.exe LOLBin capability. During triage, review parent and child process behavior including file and image loads.","| from read_ssa_enriched_events() | where ""Endpoint_Processes"" IN(_datamodels) | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=ucast(map_get(input_event, ""process""), ""string"", null), process_name=ucast(map_get(input_event, ""process_name""), ""string"", null), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND process_name=""rasautou.exe"" AND (like (cmd_line, ""%-d %"") AND like (cmd_line, ""%-p %"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)) | eval body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1055.001', 'T1218', 'T1055']","{'ps1', 'exe', 'dll', 'lolbin'}",57.0,"['dll', 'dlls', 'rasautou', 'dialer', 'exe']"
s731,Windows Rundll32 Comsvcs Memory Dump,The following analytic identifies memory dumping using comsvcs.dll with the minidump function with `rundll32.exe`. This technique is common with adversaries who would like to dump the memory of lsass.exe.,"| from read_ssa_enriched_events() | eval tenant=ucast(map_get(input_event, ""_tenant""), ""string"", null), machine=ucast(map_get(input_event, ""dest_device_id""), ""string"", null), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), process=lower(ucast(map_get(input_event, ""process""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where process IS NOT NULL AND process_name IS NOT NULL AND process_name LIKE ""%rundll32.exe%"" AND match_regex(process, /(?i)minidump\s+/)=true AND match_regex(process, /(?i)comsvcs.dll\s+/)=true | eval start_time = timestamp, end_time = timestamp, entities = mvappend(machine), body=create_map([""event_id"", event_id, ""process_name"", process_name, ""process"", process]) | into write_ssa_detected_events();",40,"['T1003.003', 'T1003']","{'dll', 'rundll32', 'lsass'}",42.0,"['rundll32', 'lsass', 'dll', 'dumping', 'dump']"
s732,Windows Rundll32 Inline HTA Execution,"The following analytic identifies ""rundll32.exe"" execution with inline protocol handlers. ""JavaScript"", ""VBScript"", and ""About"" are the only supported options when invoking HTA content directly on the command-line. This type of behavior is commonly observed with fileless malware or application whitelisting bypass techniques. The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, process ""rundll32.exe"" and its parent process.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL | where process_name=""rundll32.exe"" AND (like (cmd_line, ""%vbscript%"") OR like (cmd_line, ""%javascript%"") OR like (cmd_line, ""%about%"")) | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",70,"['T1218', 'T1218.005']","{'malware', 'dll', 'nobelium', 'rundll32'}",,"['rundll32', 'malware', 'execution', 'hta', 'handlers']"
s733,Windows Script Host Spawn MSBuild,"This analytic is to detect a suspicious child process of MSBuild spawned by Windows Script Host - cscript or wscript. This behavior or event are commonly seen and used by malware or adversaries to execute malicious msbuild process using malicious script in the compromised host. During triage, review parallel processes and identify any file modifications. MSBuild may load a script from the same path without having command-line arguments.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=ucast(map_get(input_event, ""parent_process_name""), ""string"", null), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND parent_process_name IS NOT NULL | where (parent_process_name LIKE ""%wscript.exe"" OR parent_process_name LIKE ""%cscript.exe%"") AND process_name=""msbuild.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1127.001', 'T1127']","{'ps1', 'msbuild', 'malware'}",101.0,"['msbuild', 'malware', 'wscript', 'cscript', 'malicious']"
s734,Windows WMIPrvse Spawn MSBuild,"The following analytic identifies wmiprvse.exe spawning msbuild.exe. This behavior is indicative of a COM object being utilized to spawn msbuild from wmiprvse.exe. It is common for MSBuild.exe to be spawned from devenv.exe while using Visual Studio. In this instance, there will be command line arguments and file paths. In a malicious instance, MSBuild.exe will spawn from non-standard processes and have no command line arguments. For example, MSBuild.exe spawning from explorer.exe, powershell.exe is far less common and should be investigated.","| from read_ssa_enriched_events() | eval timestamp=parse_long(ucast(map_get(input_event, ""_time""), ""string"", null)), cmd_line=lower(ucast(map_get(input_event, ""process""), ""string"", null)), process_name=lower(ucast(map_get(input_event, ""process_name""), ""string"", null)), process_path=ucast(map_get(input_event, ""process_path""), ""string"", null), parent_process_name=lower(ucast(map_get(input_event, ""parent_process_name""), ""string"", null)), event_id=ucast(map_get(input_event, ""event_id""), ""string"", null) | where cmd_line IS NOT NULL AND process_name IS NOT NULL AND parent_process_name IS NOT NULL | where parent_process_name LIKE ""%wmiprvse.exe%"" AND process_name=""msbuild.exe"" | eval start_time=timestamp, end_time=timestamp, entities=mvappend(ucast(map_get(input_event, ""dest_user_id""), ""string"", null), ucast(map_get(input_event, ""dest_device_id""), ""string"", null)), body=create_map([""event_id"", event_id, ""cmd_line"", cmd_line, ""process_name"", process_name, ""parent_process_name"", parent_process_name, ""process_path"", process_path]) | into write_ssa_detected_events();",80,"['T1127', 'T1127.001']","{'msbuild', 'exe', 'powershell'}",101.0,"['msbuild', 'wmiprvse', 'exe', 'powershell', 'malicious']"
s735,Suspicious Computer Account Name Change,"As part of the sAMAccountName Spoofing (CVE-2021-42278) and Domain Controller Impersonation (CVE-2021-42287) exploitation chain, adversaries need to create a new computer account name and rename it to match the name of a domain controller account without the ending '$'. In Windows Active Directory environments, computer account names always end with `$`. This analytic leverages Event Id 4781, `The name of an account was changed`, to identify a computer account rename event with a suspicious name that does not terminate with `$`. This behavior could represent an exploitation attempt of CVE-2021-42278 and CVE-2021-42287 for privilege escalation.","`wineventlog_security` EventCode=4781 Old_Account_Name=""*$"" New_Account_Name!=""*$"" | table _time, ComputerName, Account_Name, Old_Account_Name, New_Account_Name | `suspicious_computer_account_name_change_filter`",100,"['T1078', 'T1078.002']",{'cve-2021-42278'},,"['samaccountname', 'rename', 'impersonation', 'cve', 'account']"
s736,Suspicious Copy on System32,This analytic is to detect a suspicious copy of file from systemroot folder of the windows OS. This technique is commonly used by APT or other malware as part of execution (LOLBIN) to run its malicious code using the available legitimate tool in OS. this type of event may seen or may execute of normal user in some instance but this is really a anomaly that needs to be check within the network.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN(""cmd.exe"", ""powershell*"",""pwsh.exe"", ""sqlps.exe"", ""sqltoolsps.exe"", ""powershell_ise.exe"") AND `process_copy` AND Processes.process IN(""*\\Windows\\System32\*"", ""*\\Windows\\SysWow64\\*"") AND Processes.process = ""*copy*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `suspicious_copy_on_system32_filter`",70,"['T1036.003', 'T1036']","{'malware', 'lolbin'}",332.0,"['malware', 'systemroot', 'malicious', 'anomaly', 'file']"
s737,Suspicious DLLHost no Command Line Arguments,"The following analytic identifies DLLHost.exe with no command line arguments. It is unusual for DLLHost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. DLLHost.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_dllhost` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(dllhost\.exe.{0,4}$)"" | `suspicious_dllhost_no_command_line_arguments_filter`",70,['T1055'],"{'dll', 'exe', 'cobalt strike'}",,"['dllhost', 'exe', 'malicious', 'execute', 'system32']"
s738,Suspicious Driver Loaded Path,"This analytic will detect suspicious driver loaded paths. This technique is commonly used by malicious software like coin miners (xmrig) to register its malicious driver from notable directories where executable or drivers do not commonly exist. During triage, validate this driver is for legitimate business use. Review the metadata and certificate information. Unsigned drivers from non-standard paths is not normal, but occurs. In addition, review driver loads into `ntoskrnl.exe` for possible other drivers of interest. Long tail analyze drivers by path (outside of default, and in default) for further review.","`sysmon` EventCode=6 ImageLoaded = ""*.sys"" NOT (ImageLoaded IN(""*\\WINDOWS\\inf"",""*\\WINDOWS\\System32\\drivers\\*"", ""*\\WINDOWS\\System32\\DriverStore\\FileRepository\\*"")) |  stats  min(_time) as firstTime max(_time) as lastTime count by Computer ImageLoaded Hashes IMPHASH Signature Signed | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_driver_loaded_path_filter`",70,"['T1543.003', 'T1543']","{'ps1', 'driver'}",347.0,"['driver', 'drivers', 'detect', 'suspicious', 'executable']"
s739,Suspicious Event Log Service Behavior,"The following analytic utilizes Windows Event ID 1100 to identify when Windows event log service is shutdown. Note that this is a voluminous analytic that will require tuning or restricted to specific endpoints based on criticality. This event generates every time Windows Event Log service has shut down. It also generates during normal system shutdown. During triage, based on time of day and user, determine if this was planned. If not planned, follow through with reviewing parallel alerts and other data sources to determine what else may have occurred.",(`wineventlog_security` EventCode=1100) | stats count min(_time) as firstTime max(_time) as lastTime by dest Message EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_event_log_service_behavior_filter`,30,"['T1070', 'T1070.001']",{'clop'},,"['shutdown', 'event', 'log', 'alerts', 'triage']"
s740,Suspicious GPUpdate no Command Line Arguments,"The following analytic identifies gpupdate.exe with no command line arguments. It is unusual for gpupdate.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. gpupdate.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_gpupdate` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(gpupdate\.exe.{0,4}$)"" | `suspicious_gpupdate_no_command_line_arguments_filter`",70,['T1055'],"{'exe', 'cobalt strike'}",,"['gpupdate', 'exe', 'execute', 'command', 'system32']"
s741,Suspicious IcedID Rundll32 Cmdline,This search is to detect a suspicious rundll32.exe commandline to execute dll file. This technique was seen in IcedID malware to load its payload dll with the following parameter to load encrypted dll payload which is the license.dat.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*/i:* by  Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_icedid_rundll32_cmdline_filter`,70,"['T1218', 'T1218.011']","{'dll', 'exe', 'icedid', 'malware', 'emotet', 'rundll32'}",,"['rundll32', 'dll', 'malware', 'exe', 'suspicious']"
s742,Suspicious Image Creation In Appdata Folder,This search is to detect a suspicious creation of image in appdata folder made by process that also has a file reference in appdata folder. This technique was seen in remcos rat that capture screenshot of the compromised machine and place it in the appdata and will be send to its C2 server. This TTP is really a good indicator to check that process because it is in suspicious folder path and image files are not commonly created by user in this folder path.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=*.exe Processes.process_path=""*\\appdata\\Roaming\\*"" by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*.png"",""*.jpg"",""*.bmp"",""*.gif"",""*.tiff"") Filesystem.file_path= ""*\\appdata\\Roaming\\*"" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.process_guid | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid | fields _time dest file_create_time file_name file_path process_name process_path process proc_guid] | `suspicious_image_creation_in_appdata_folder_filter`",70,['T1113'],{'remcos'},,"['image', 'process', 'remcos', 'detect', 'file']"
s743,Suspicious Kerberos Service Ticket Request,"As part of the sAMAccountName Spoofing (CVE-2021-42278) and Domain Controller Impersonation (CVE-2021-42287) exploitation chain, adversaries will request and obtain a Kerberos Service Ticket (TGS) with a domain controller computer account as the Service Name. This Service Ticket can be then used to take control of the domain controller on the final part of the attack. This analytic leverages Event Id 4769, `A Kerberos service ticket was requested`, to identify an unusual TGS request where the Account_Name requesting the ticket matches the Service_Name field. This behavior could represent an exploitation attempt of CVE-2021-42278 and CVE-2021-42287 for privilege escalation."," `wineventlog_security` EventCode=4769 | eval isSuspicious = if(lower(Service_Name) = lower(mvindex(split(Account_Name,""@""),0)+""$""),1,0) | where isSuspicious = 1 | table _time, Client_Address, Account_Name, Service_Name, Failure_Code, isSuspicious | `suspicious_kerberos_service_ticket_request_filter`",100,"['T1078', 'T1078.002']","{'kerberos', 'cve-2021-42278'}",,"['kerberos', 'spoofing', 'samaccountname', 'attack', 'impersonation']"
s744,Suspicious Linux Discovery Commands,"This search, detects execution of suspicious bash commands from various commonly leveraged bash scripts like (AutoSUID, LinEnum, LinPeas) to perform discovery of possible paths of privilege execution, password files, vulnerable directories, executables and file permissions on a Linux host.\
The search logic specifically looks for high number of distinct commands run in a short period of time.",| tstats `security_content_summariesonly` count values(Processes.process) values(Processes.process_name) values(Processes.parent_process_name) dc(Processes.process) as distinct_commands dc(Processes.process_name) as distinct_process_names min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where [|inputlookup linux_tool_discovery_process.csv | rename process as Processes.process |table Processes.process] by _time span=5m Processes.user Processes.dest | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| where distinct_commands > 40 AND distinct_process_names > 3| `suspicious_linux_discovery_commands_filter`,90,['T1059.004'],,183.0,"['commands', 'bash', 'search', 'executables', 'execution']"
s745,Suspicious microsoft workflow compiler rename,"The following analytic identifies a renamed instance of microsoft.workflow.compiler.exe. Microsoft.workflow.compiler.exe is natively found in C:\Windows\Microsoft.NET\Framework64\v4.0.30319 and is rarely utilized. When investigating, identify the executed code on disk and review. A spawned child process from microsoft.workflow.compiler.exe is uncommon. In any instance, microsoft.workflow.compiler.exe spawning from an Office product or any living off the land binary is highly suspect.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name!=microsoft.workflow.compiler.exe AND Processes.original_file_name=Microsoft.Workflow.Compiler.exe by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_microsoft_workflow_compiler_rename_filter`,70,"['T1036', 'T1127', 'T1036.003']","{'exe', 'cobalt strike'}",,"['compiler', 'microsoft', 'exe', 'process', 'renamed']"
s746,Suspicious microsoft workflow compiler usage,"The following analytic identifies microsoft.workflow.compiler.exe usage. microsoft.workflow.compiler.exe is natively found in C:\Windows\Microsoft.NET\Framework64\v4.0.30319 and is rarely utilized. When investigating, identify the executed code on disk and review. It is not a commonly used process by many applications.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_microsoftworkflowcompiler` by Processes.dest Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_microsoft_workflow_compiler_usage_filter`,70,['T1127'],"{'msbuild', 'exe'}",80.0,"['compiler', 'exe', 'microsoft', 'process', 'workflow']"
s747,Suspicious msbuild path,"The following analytic identifies msbuild.exe executing from a non-standard path. Msbuild.exe is natively found in C:\Windows\Microsoft.NET\Framework\v4.0.30319 and C:\Windows\Microsoft.NET\Framework64\v4.0.30319. Instances of Visual Studio will run a copy of msbuild.exe. A moved instance of MSBuild is suspicious, however there are instances of build applications that will move or use a copy of MSBuild.",| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_msbuild` AND (Processes.process_path!=*\\framework*\\v*\\*) by Processes.dest Processes.original_file_name Processes.parent_process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `suspicious_msbuild_path_filter`,70,"['T1036', 'T1127', 'T1036.003', 'T1127.001']","{'msbuild', 'exe', 'cobalt strike'}",,"['msbuild', 'exe', 'microsoft', 'path', 'framework64']"
s748,Suspicious MSBuild Rename,"The following analytic identifies renamed instances of msbuild.exe executing. Msbuild.exe is natively found in C:\Windows\Microsoft.NET\Framework\v4.0.30319 and C:\Windows\Microsoft.NET\Framework64\v4.0.30319. During investigation, identify the code executed and what is executing a renamed instance of MSBuild.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name!=msbuild.exe AND Processes.original_file_name=MSBuild.exe by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_msbuild_rename_filter`,70,"['T1036', 'T1127', 'T1036.003', 'T1127.001']","{'msbuild', 'exe', 'cobalt strike'}",,"['msbuild', 'renamed', 'exe', 'microsoft', 'executing']"
s749,Suspicious MSBuild Spawn,"The following analytic identifies wmiprvse.exe spawning msbuild.exe. This behavior is indicative of a COM object being utilized to spawn msbuild from wmiprvse.exe. It is common for MSBuild.exe to be spawned from devenv.exe while using Visual Studio. In this instance, there will be command line arguments and file paths. In a malicious instance, MSBuild.exe will spawn from non-standard processes and have no command line arguments. For example, MSBuild.exe spawning from explorer.exe, powershell.exe is far less common and should be investigated.",| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=wmiprvse.exe AND `process_msbuild` by Processes.dest Processes.parent_process Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_msbuild_spawn_filter`,70,"['T1127', 'T1127.001']","{'msbuild', 'exe', 'powershell'}",101.0,"['msbuild', 'wmiprvse', 'exe', 'powershell', 'malicious']"
s750,Suspicious mshta child process,"The following analytic identifies child processes spawning from  ""mshta.exe"". The search will return the first time and last time these command-line arguments were used for these executions, as well as the target system, the user, parent process ""mshta.exe"" and its child process.",| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=mshta.exe AND (Processes.process_name=powershell.exe OR Processes.process_name=colorcpl.exe OR Processes.process_name=msbuild.exe OR Processes.process_name=microsoft.workflow.compiler.exe OR Processes.process_name=searchprotocolhost.exe OR Processes.process_name=scrcons.exe OR Processes.process_name=cscript.exe OR Processes.process_name=wscript.exe OR Processes.process_name=powershell.exe OR Processes.process_name=cmd.exe) by Processes.dest Processes.parent_process Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_mshta_child_process_filter`,50,"['T1218', 'T1218.005']","{'msbuild', 'exe'}",139.0,"['processes', 'process', 'mshta', 'exe', 'command']"
s751,Suspicious mshta spawn,"The following analytic identifies wmiprvse.exe spawning mshta.exe. This behavior is indicative of a DCOM object being utilized to spawn mshta from wmiprvse.exe or svchost.exe. In this instance, adversaries may use LethalHTA that will spawn mshta.exe from svchost.exe.",| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=svchost.exe OR Processes.parent_process_name=wmiprvse.exe) AND `process_mshta` by Processes.dest Processes.parent_process Processes.user Processes.original_file_name| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_mshta_spawn_filter`,70,"['T1218', 'T1218.005']",{'exe'},248.0,"['wmiprvse', 'exe', 'mshta', 'lethalhta', 'dcom']"
s752,Suspicious Process DNS Query Known Abuse Web Services,"This analytic detects a suspicious process making a DNS query via known, abused text-paste web services, VoIP, instant messaging, and digital distribution platforms used to download external files. This technique is abused by adversaries, malware actors, and red teams to download a malicious file on the target host. This is a good TTP indicator for possible initial access techniques. A user will experience false positives if the following instant messaging is allowed or common applications like telegram or discord are allowed in the corporate network.","`sysmon` EventCode=22 QueryName IN (""*pastebin*"", ""*discord*"", ""*telegram*"", ""*t.me*"") process_name IN (""cmd.exe"", ""*powershell*"", ""pwsh.exe"", ""wscript.exe"", ""cscript.exe"") | stats count min(_time) as firstTime max(_time) as lastTime by Image QueryName QueryStatus process_name QueryResults Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_process_dns_query_known_abuse_web_services_filter`",80,"['T1059.005', 'T1059']","{'malware', 'remcos', 'whispergate', 'dns'}",,"['malware', 'dns', 'malicious', 'ttp', 'voip']"
s753,Suspicious Process File Path,The following analytic will detect a suspicious process running in a file path where a process is not commonly seen and is most commonly used by malicious software. This behavior has been used by adversaries where they drop and run an exe in a path that is accessible without admin privileges.,"| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_path = ""*\\windows\\fonts\\*"" OR Processes.process_path = ""*\\windows\\temp\\*"" OR Processes.process_path = ""*\\users\\public\\*"" OR Processes.process_path = ""*\\windows\\debug\\*"" OR Processes.process_path.file_path = ""*\\Users\\Administrator\\Music\\*"" OR Processes.process_path.file_path = ""*\\Windows\\servicing\\*"" OR Processes.process_path.file_path = ""*\\Users\\Default\\*"" OR Processes.process_path.file_path = ""*Recycle.bin*"" OR Processes.process_path = ""*\\Windows\\Media\\*"" OR Processes.process_path = ""\\Windows\\repair\\*"" OR Processes.process_path = ""*\\temp\\*"" OR Processes.process_path = ""*\\PerfLogs\\*"" by Processes.parent_process_name Processes.parent_process Processes.process_path Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_process_file_path_filter`",70,['T1543'],"{'industroyer2', 'exe', 'whispergate', 'wiper', 'ps1', 'remcos'}",,"['exe', 'analytic', 'malicious', 'process', 'suspicious']"
s754,Suspicious Process With Discord DNS Query,"This analytic identifies a process making a DNS query to Discord, a well known instant messaging and digital distribution platform. Discord can be abused by adversaries, as seen in the WhisperGate campaign, to host and download malicious. external files. A process resolving a Discord DNS name could be an indicator of malware trying to download files from Discord for further execution.","`sysmon` EventCode=22 QueryName IN (""*discord*"") Image != ""*\\AppData\\Local\\Discord\\*"" AND Image != ""*\\Program Files*"" AND Image != ""discord.exe"" | stats count min(_time) as firstTime max(_time) as lastTime by Image QueryName QueryStatus process_name QueryResults Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_process_with_discord_dns_query_filter`",80,"['T1059.005', 'T1059']","{'malware', 'whispergate', 'dns'}",,"['malware', 'discord', 'dns', 'malicious', 'resolving']"
s755,Suspicious Regsvr32 Register Suspicious Path,"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code by using non-standard file extensions to load malciious DLLs. Upon investigating, look for network connections to remote destinations (internal or external). Review additional parrallel processes and child processes for additional activity.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_regsvr32` (Processes.process=*appdata* OR Processes.process=*programdata* OR Processes.process=*windows\temp*) (Processes.process!=*.dll Processes.process!=*.ax Processes.process!=*.ocx) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `suspicious_regsvr32_register_suspicious_path_filter`,70,"['T1218', 'T1218.010']","{'dll', 'exe'}",348.0,"['regsvr32', 'dlls', 'malicious', 'exe', 'adversaries']"
s756,Suspicious Reg exe Process,"This search looks for reg.exe being launched from a command prompt not started by the user. When a user launches cmd.exe, the parent process is usually explorer.exe. This search filters out those instances.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.parent_process_name != explorer.exe Processes.process_name =cmd.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest Processes.process_id Processes.parent_process_id | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | search [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.parent_process_name=cmd.exe Processes.process_name= reg.exe by Processes.parent_process_id Processes.dest Processes.process_name | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename parent_process_id as process_id |dedup process_id| table process_id dest] | `suspicious_reg_exe_process_filter` ",70,['T1112'],{'exe'},178.0,"['exe', 'cmd', 'explorer', 'search', 'launched']"
s757,Suspicious Rundll32 dllregisterserver,"The following analytic identifies rundll32.exe using dllregisterserver on the command line to load a DLL. When a DLL is registered, the DllRegisterServer method entry point in the DLL is invoked. This is typically seen when a DLL is being registered on the system. Not every instance is considered malicious, but it will capture malicious use of it. During investigation, review the parent process and parrellel processes executing. Capture the DLL being loaded and inspect further. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*dllregisterserver* by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_dllregisterserver_filter`,70,"['T1218', 'T1218.011']","{'dll', 'seedworm', 'qakbot', 'rundll32', 'ursnif'}",,"['rundll32', 'dll', 'dllregisterserver', 'system32', 'malicious']"
s758,Suspicious Rundll32 PluginInit,This search is to detect a suspicious rundll32.exe process with plugininit parameter. This technique is commonly seen in IceID malware to execute its initial dll stager to download another payload to the compromised machine.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*PluginInit* by  Processes.process_name Processes.process Processes.parent_process_name Processes.original_file_name Processes.parent_process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_plugininit_filter`,60,"['T1218', 'T1218.011']","{'dll', 'exe', 'icedid', 'malware', 'emotet', 'rundll32'}",,"['rundll32', 'dll', 'malware', 'exe', 'plugininit']"
s759,Suspicious Rundll32 StartW,"The following analytic identifies rundll32.exe executing a DLL function name, Start and StartW, on the command line that is commonly observed with Cobalt Strike x86 and x64 DLL payloads. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64. Typically, the DLL will be written and loaded from a world writeable path or user location. In most instances it will not have a valid certificate (Unsigned). During investigation, review the parent process and other parallel application execution. Capture and triage the DLL in question. In the instance of Cobalt Strike, rundll32.exe is the default process it opens and injects shellcode into. This default process can be changed, but typically is not.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_rundll32` Processes.process=*start* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `suspicious_rundll32_startw_filter`,70,"['T1218', 'T1218.011']","{'dll', 'trickbot', 'cobalt strike', 'rundll32'}",,"['rundll32', 'dll', 'system32', 'x86', 'cobalt']"
s760,Suspicious Rundll32 no Command Line Arguments,"The following analytic identifies rundll32.exe with no command line arguments. It is unusual for rundll32.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. Rundll32.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_rundll32` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(rundll32\.exe.{0,4}$)"" | `suspicious_rundll32_no_command_line_arguments_filter`",70,"['T1218', 'T1218.011']","{'dll', 'cobalt strike', 'exe', 'rundll32', 'cve-2021-34527'}",,"['rundll32', 'system32', 'exe', 'execute', 'command']"
s761,Suspicious Scheduled Task from Public Directory,"The following detection identifies Scheduled Tasks registering (creating a new task) a binary or script to run from a public directory which includes users\public, \programdata\ and \windows\temp. Upon triage, review the binary or script in the command line for legitimacy, whether an approved binary/script or not. In addition, capture the binary or script in question and analyze for further behaviors. Identify the source and contain the endpoint.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe (Processes.process=*\\users\\public\\* OR Processes.process=*\\programdata\\* OR Processes.process=*windows\\temp*)  Processes.process=*/create* by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `suspicious_scheduled_task_from_public_directory_filter`,70,"['T1053.005', 'T1053']","{'schtasks', 'azorult', 'ryuk'}",,"['task', 'script', 'tasks', 'detection', 'scheduled']"
s762,Suspicious SearchProtocolHost no Command Line Arguments,"The following analytic identifies searchprotocolhost.exe with no command line arguments. It is unusual for searchprotocolhost.exe to execute with no command line arguments present. This particular behavior is common with malicious software, including Cobalt Strike. During investigation, identify any network connections and parallel processes. Identify any suspicious module loads related to credential dumping or file writes. searchprotocolhost.exe is natively found in C:\Windows\system32 and C:\Windows\syswow64.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=searchprotocolhost.exe by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | regex process=""(?i)(searchprotocolhost\.exe.{0,4}$)"" | `suspicious_searchprotocolhost_no_command_line_arguments_filter`",70,['T1055'],"{'exe', 'cobalt strike'}",,"['searchprotocolhost', 'command', 'execute', 'exe', 'system32']"
s763,Suspicious Ticket Granting Ticket Request,"As part of the sAMAccountName Spoofing (CVE-2021-42278) and Domain Controller Impersonation (CVE-2021-42287) exploitation chain, adversaries will need to request a Kerberos Ticket Granting Ticket (TGT) on behalf of the newly created and renamed computer account. The TGT request will be preceded by a computer account name event. This analytic leverages Event Id 4781, `The name of an account was changed` and event Id 4768 `A Kerberos authentication ticket (TGT) was requested` to correlate a sequence of events where the new computer account on event id 4781 matches the request account on event id 4768. This behavior could represent an exploitation attempt of CVE-2021-42278 and CVE-2021-42287 for privilege escalation."," `wineventlog_security` (EventCode=4781 Old_Account_Name=""*$"" New_Account_Name!=""*$"") OR (EventCode=4768 Account_Name!=""*$"") | eval RenamedComputerAccount = coalesce(New_Account_Name, mvindex(Account_Name,0)) | transaction RenamedComputerAccount startswith=(EventCode=4781) endswith=(EventCode=4768) | eval short_lived=case((duration<2),""TRUE"") | search short_lived = TRUE | table _time, ComputerName, EventCode, Account_Name,RenamedComputerAccount, short_lived |`suspicious_ticket_granting_ticket_request_filter`",100,"['T1078', 'T1078.002']","{'kerberos', 'cve-2021-42278'}",,"['samaccountname', 'kerberos', 'spoofing', 'authentication', 'account']"
s764,Suspicious WAV file in Appdata Folder,This analytic is to detect a suspicious creation of .wav file in appdata folder. This behavior was seen in Remcos RAT malware where it put the audio recording in the appdata\audio folde as part of data collection. this recording can be send to its C2 server as part of its exfiltration to the compromised machine. creation of wav files in this folder path is not a ussual disk place used by user to save audio format file.,"| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name=*.exe Processes.process_path=""*\\appdata\\Roaming\\*"" by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | join proc_guid, _time [ | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name IN (""*.wav"") Filesystem.file_path = ""*\\appdata\\Roaming\\*"" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.process_guid | `drop_dm_object_name(Filesystem)` |rename process_guid as proc_guid | fields file_name file_path process_name process_path process dest file_create_time _time proc_guid] | `suspicious_wav_file_in_appdata_folder_filter`",70,['T1113'],"{'malware', 'remcos'}",,"['malware', 'wav', 'audio', 'file', 'files']"
s765,Suspicious wevtutil Usage,"The wevtutil.exe application is the windows event log utility. This searches for wevtutil.exe with parameters for clearing the application, security, setup, trace or system event logs.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wevtutil.exe Processes.process IN (""* cl *"", ""*clear-log*"") (Processes.process=""*System*"" OR Processes.process=""*Security*"" OR Processes.process=""*Setup*"" OR Processes.process=""*Application*"" OR Processes.process=""*trace*"") by Processes.process_name Processes.parent_process_name Processes.dest Processes.user| `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` |`security_content_ctime(lastTime)` | `suspicious_wevtutil_usage_filter`",40,"['T1070.001', 'T1070']","{'wevtutil', 'exe', 'clop'}",,"['wevtutil', 'logs', 'exe', 'log', 'application']"
s766,Suspicious writes to windows Recycle Bin,This search detects writes to the recycle bin by a process other than explorer.exe.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Filesystem.file_path) as file_path values(Filesystem.file_name) as file_name FROM datamodel=Endpoint.Filesystem where Filesystem.file_path = ""*$Recycle.Bin*"" by Filesystem.process_id Filesystem.dest | `drop_dm_object_name(""Filesystem"")`| search [| tstats `security_content_summariesonly` values(Processes.user) as user values(Processes.process_name) as process_name values(Processes.parent_process_name) as parent_process_name FROM datamodel=Endpoint.Processes where Processes.process_name != ""explorer.exe"" by Processes.process_id Processes.dest| `drop_dm_object_name(""Processes"")` | table process_id dest] | `suspicious_writes_to_windows_recycle_bin_filter`",40,['T1036'],{'exe'},151.0,"['recycle', 'explorer', 'bin', 'exe', 'search']"
s767,Svchost LOLBAS Execution Process Spawn,"The following analytic identifies `svchost.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the Task Scheduler and creating a malicious remote scheduled task, the executed command is spawned as a child process of `svchost.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of svchost.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=svchost.exe) (Processes.process_name IN (""Regsvcs.exe"", ""Ftp.exe"", ""OfflineScannerShell.exe"", ""Rasautou.exe"", ""Schtasks.exe"", ""Xwizard.exe"", ""Pnputil.exe"", ""Atbroker.exe"", ""Pcwrun.exe"", ""Ttdinject.exe"",""Mshta.exe"", ""Bitsadmin.exe"", ""Certoc.exe"", ""Ieexec.exe"", ""Microsoft.Workflow.Compiler.exe"", ""Runscripthelper.exe"", ""Forfiles.exe"", ""Msbuild.exe"", ""Register-cimprovider.exe"", ""Tttracer.exe"", ""Ie4uinit.exe"", ""Bash.exe"", ""Hh.exe"", ""SettingSyncHost.exe"", ""Cmstp.exe"", ""Stordiag.exe"", ""Scriptrunner.exe"", ""Odbcconf.exe"", ""Extexport.exe"", ""Msdt.exe"", ""WorkFolders.exe"", ""Diskshadow.exe"", ""Mavinject.exe"", ""Regasm.exe"", ""Gpscript.exe"", ""Regsvr32.exe"", ""Msiexec.exe"", ""Wuauclt.exe"", ""Presentationhost.exe"", ""Wmic.exe"", ""Runonce.exe"", ""Syncappvpublishingserver.exe"", ""Verclsid.exe"", ""Infdefaultinstall.exe"", ""Installutil.exe"", ""Netsh.exe"", ""Wab.exe"", ""Dnscmd.exe"", ""At.exe"", ""Pcalua.exe"", ""Msconfig.exe"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `svchost_lolbas_execution_process_spawn_filter`",90,"['T1053', 'T1053.005']","{'netsh', 'schtasks', 'forfiles', 'bitsadmin', 'msbuild', 'ftp'}",,"['processes', 'process', 'svchost', 'execution', 'executing']"
s768,System Information Discovery Detection,Detect system information discovery techniques used by attackers to understand configurations of the system to further exploit it.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=""*wmic* qfe*"" OR Processes.process=*systeminfo* OR Processes.process=*hostname*) by Processes.user Processes.process_name Processes.process Processes.dest Processes.parent_process_name | `drop_dm_object_name(Processes)` | eventstats dc(process) as dc_processes_by_dest by dest | where dc_processes_by_dest > 2 | stats values(process) as process min(firstTime) as firstTime max(lastTime) as lastTime by user, dest parent_process_name | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_information_discovery_detection_filter`",30,['T1082'],{'systeminfo'},349.0,"['discovery', 'detect', 'attackers', 'exploit', 'information']"
s769,System Info Gathering Using Dxdiag Application,"This analytic is to detect a suspicious dxdiag.exe process command-line execution. Dxdiag is used to collect the system info of the target host. This technique has been used by Remcos RATS, various actors, and other malware to collect information as part of the recon or collection phase of an attack. This behavior should rarely be seen in a corporate network, but this command line can be used by a network administrator to audit host machine specifications. Thus in some rare cases, this detection will contain false positives in its results. To triage further, analyze what commands were passed after it pipes out the result to a file for further processing.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_dxdiag` AND Processes.process = ""* /t *"" by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_info_gathering_using_dxdiag_application_filter`",50,['T1592'],"{'malware', 'exe', 'remcos'}",,"['dxdiag', 'malware', 'execution', 'process', 'exe']"
s770,System Processes Run From Unexpected Locations,"This search looks for system processes that typically execute from `C:\Windows\System32\` or `C:\Windows\SysWOW64`.  This may indicate a malicious process that is trying to hide as a legitimate process.\
This detection utilizes a lookup that is deduped `system32` and `syswow64` directories from Server 2016 and Windows 10.\
During triage, review the parallel processes - what process moved the native Windows binary? identify any artifacts on disk and review. If a remote destination is contacted, what is the reputation?","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where Processes.process_path !=""C:\\Windows\\System32*"" Processes.process_path !=""C:\\Windows\\SysWOW64*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_hash | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)`| `is_windows_system_file` | `system_processes_run_from_unexpected_locations_filter`",70,"['T1036', 'T1036.003']",,139.0,"['system32', 'syswow64', 'processes', 'process', 'malicious']"
s771,System User Discovery With Query,This analytic looks for the execution of `query.exe` with command-line arguments utilized to discover the logged user. Red Teams and adversaries alike may leverage `query.exe` to identify system users on a compromised endpoint for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""query.exe"") (Processes.process=*user*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_user_discovery_with_query_filter`",30,['T1033'],"{'leverage', 'exe'}",341.0,"['exe', 'compromised', 'execution', 'users', 'query']"
s772,System User Discovery With Whoami,This analytic looks for the execution of `whoami.exe` without any arguments. This windows native binary prints out the current logged user. Red Teams and adversaries alike may leverage `whoami.exe` to identify system users on a compromised endpoint for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""whoami.exe"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `system_user_discovery_with_whoami_filter`",30,['T1033'],"{'leverage', 'exe'}",341.0,"['exe', 'users', 'execution', 'whoami', 'compromised']"
s773,Time Provider Persistence Registry,This analytic is to detect a suspicious modification of time provider registry for persistence and autostart. This technique can allow the attacker to persist on the compromised host and autostart as soon as the machine boot up. This TTP can be a good indicator of suspicious behavior since this registry is not commonly modified by normal user or even an admin.,"| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path =""*\\CurrentControlSet\\Services\\W32Time\\TimeProviders*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `time_provider_persistence_registry_filter`",80,"['T1547.003', 'T1547']",{'wiper'},,"['ttp', 'autostart', 'attacker', 'compromised', 'persistence']"
s774,Trickbot Named Pipe,this search is to detect potential trickbot infection through the create/connected named pipe to the system. This technique is used by trickbot to communicate to its c2 to post or get command during infection.,"`sysmon` EventCode IN (17,18) PipeName=""\\pipe\\*lacesomepipe"" | stats  min(_time) as firstTime max(_time) as lastTime count by Computer user_id EventCode PipeName signature Image process_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `trickbot_named_pipe_filter`",70,['T1055'],"{'trickbot', 'ryuk'}",350.0,"['trickbot', 'detect', 'pipe', 'infection', 'search']"
s775,UAC Bypass MMC Load Unsigned Dll,This search is to detect a suspicious loaded unsigned dll by MMC.exe application. This technique is commonly seen in attacker that tries to bypassed UAC feature or gain privilege escalation. This is done by modifying some CLSID registry that will trigger the mmc.exe to load the dll path,"`sysmon` EventCode=7  ImageLoaded = ""*.dll"" Image = ""*\\mmc.exe"" Signed=false Company != ""Microsoft Corporation"" | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded Signed ProcessId OriginalFileName Computer EventCode Company | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `uac_bypass_mmc_load_unsigned_dll_filter`",70,"['T1548.002', 'T1548', 'T1218.014']","{'dll', 'uac', 'exe', 'registry modification'}",63.0,"['dll', 'mmc', 'uac', 'registry', 'exe']"
s776,UAC Bypass With Colorui COM Object,This search is to detect a possible uac bypass using the colorui.dll COM Object. this technique was seen in so many malware and ransomware like lockbit where it make use of the colorui.dll COM CLSID to bypass UAC.,"`sysmon` EventCode=7 ImageLoaded=""*\\colorui.dll"" process_name != ""colorcpl.exe"" NOT(Image IN(""*\\windows\\*"", ""*\\program files*"")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode Signed ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `uac_bypass_with_colorui_com_object_filter`",60,"['T1218', 'T1218.003']","{'dll', 'revil', 'maze', 'uac', 'lockbit', 'malware'}",328.0,"['uac', 'dll', 'colorui', 'malware', 'ransomware']"
s777,Unified Messaging Service Spawning a Process,"This detection identifies Microsoft Exchange Server's Unified Messaging services, umworkerprocess.exe and umservice.exe, spawning a child process, indicating possible exploitation of CVE-2021-26857 vulnerability. The query filters out werfault.exe and wermgr.exe mostly due to potential false positives, however, if there is an excessive amount of ""wermgr.exe"" or ""WerFault.exe"" failures, it may be due to the active exploitation. During triage, identify any additional suspicious parallel processes. Identify any recent out of place file modifications. Review Exchange logs following Microsofts guide. To contain, perform egress filtering or restrict public access to Exchange. In final, patch the vulnerablity and monitor.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=""umworkerprocess.exe"" OR Processes.parent_process_name=""UMService.exe"" (Processes.process_name!=""wermgr.exe"" OR Processes.process_name!=""werfault.exe"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `unified_messaging_service_spawning_a_process_filter`",70,['T1190'],"{'hafnium', 'exe', 'cve-2021-26857'}",,"['exe', 'cve', 'microsofts', 'microsoft', 'vulnerability']"
s778,Uninstall App Using MsiExec,This search is to detect a suspicious un-installation of application using msiexec. This technique was seen in conti leak tool and script where it tries to uninstall AV product using this commandline. This commandline to uninstall product is not a common practice in enterprise network.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=msiexec.exe Processes.process= ""* /qn *"" Processes.process= ""*/X*"" Processes.process= ""*REBOOT=*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `uninstall_app_using_msiexec_filter`",50,"['T1218.007', 'T1218']","{'conti', 'msiexec'}",45.0,"['uninstall', 'msiexec', 'application', 'av', 'search']"
s779,Unknown Process Using The Kerberos Protocol,"The following analytic identifies a process performing an outbound connection on port 88 used by default by the network authentication protocol Kerberos. Typically, on a regular Windows endpoint, only the lsass.exe process is the one tasked with connecting to the Kerberos Distribution Center to obtain Kerberos tickets. Identifying an unknown process using this protocol may be evidence of an adversary abusing the Kerberos protocol.",| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where Processes.process_name!=lsass.exe by _time Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port = 88 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` ] | table _time dest parent_process_name process_name process_path process process_id dest_port | `unknown_process_using_the_kerberos_protocol_filter`,60,['T1550'],"{'kerberos', 'exe', 'leverage', 'lsass'}",139.0,"['exe', 'kerberos', 'process', 'port', 'authentication']"
s780,Unloading AMSI via Reflection,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify suspicious PowerShell execution. Script Block Logging captures the command sent to PowerShell, the full command to be executed. Upon enabling, logs will output to Windows event logs. Dependent upon volume, enable on critical endpoints or all. \
This analytic identifies the behavior of AMSI being tampered with. Implemented natively in many frameworks, the command will look similar to `SEtValuE($Null,(New-OBJEct COLlECtionS.GenerIC.HAshSEt{[StrINg]))}$ReF=[ReF].AsSeMbLY.GeTTyPe(""System.Management.Automation.Amsi""+""Utils"")` taken from Powershell-Empire. \
During triage, review parallel processes using an EDR product or 4688 events. It will be important to understand the timeline of events around this activity. Review the entire logged PowerShell script block.",`powershell` EventCode=4104 ScriptBlockText = *system.management.automation.amsi* | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `unloading_amsi_via_reflection_filter`,70,"['T1562', 'T1059.001', 'T1059']","{'wiper', 'powershell', 'amsi', 'empire'}",,"['amsi', 'powershell', 'logging', 'logs', 'processes']"
s781,Unload Sysmon Filter Driver,Attackers often disable security tools to avoid detection. This search looks for the usage of process `fltMC.exe` to unload a Sysmon Driver that will stop sysmon from collecting the data.,"| tstats `security_content_summariesonly` count min(_time) as firstTime values(Processes.process) as process max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fltMC.exe AND Processes.process=*unload* AND Processes.process=*SysmonDrv*  by Processes.process_name Processes.process_id Processes.parent_process_name Processes.process Processes.dest Processes.user | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` |`unload_sysmon_filter_driver_filter`| table firstTime lastTime dest user count process_name process_id parent_process_name process",50,"['T1562.001', 'T1562']",{'stop'},249.0,"['fltmc', 'disable', 'sysmon', 'security', 'attackers']"
s782,Unusual Number of Kerberos Service Tickets Requested,"The following hunting analytic leverages Kerberos Event 4769, A Kerberos service ticket was requested, to identify a potential kerberoasting attack against Active Directory networks. Kerberoasting allows an adversary to request kerberos tickets for domain accounts typically used as service accounts and attempt to crack them offline allowing them to obtain privileged access to the domain.\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number service ticket requests. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field."," `wineventlog_security` EventCode=4769 Service_Name!=""*$"" Ticket_Encryption_Type=0x17 | bucket span=2m _time | stats dc(Service_Name) AS unique_services values(Service_Name) as requested_services by _time, Client_Address | eventstats avg(unique_services) as comp_avg , stdev(unique_services) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_services > 2 and unique_services >= upperBound, 1, 0) | search isOutlier=1 | `unusual_number_of_kerberos_service_tickets_requested_filter`",60,"['T1558', 'T1558.003']",{'kerberos'},44.0,"['kerberoasting', 'kerberos', 'ticket', 'statistical', 'detection']"
s783,User Discovery With Env Vars PowerShell,This analytic looks for the execution of `powershell.exe` with command-line arguments that leverage PowerShell environment variables to identify the current logged user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""powershell.exe"") (Processes.process=""*$env:UserName*"" OR Processes.process=""*[System.Environment]::UserName*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `user_discovery_with_env_vars_powershell_filter`",30,['T1033'],"{'leverage', 'exe', 'powershell'}",306.0,"['powershell', 'compromised', 'exe', 'logged', 'command']"
s784,User Discovery With Env Vars PowerShell Script Block,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the use of PowerShell environment variables to identify the current logged user. Red Teams and adversaries may leverage this method to identify the logged user on a compromised endpoint for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (ScriptBlockText = ""*$env:UserName*"" OR ScriptBlockText = ""*[System.Environment]::UserName*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `user_discovery_with_env_vars_powershell_script_block_filter`",30,['T1033'],"{'leverage', 'powershell'}",307.0,"['powershell', 'logging', 'logged', 'script', 'compromised']"
s785,USN Journal Deletion,The fsutil.exe application is a legitimate Windows utility used to perform tasks related to the file allocation table (FAT) and NTFS file systems. The update sequence number (USN) change journal provides a log of all changes made to the files on the disk. This search looks for fsutil.exe deleting the USN journal.,"| tstats `security_content_summariesonly` count values(Processes.process) as process values(Processes.parent_process) as parent_process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=fsutil.exe by Processes.user Processes.process_name Processes.parent_process_name Processes.dest  | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | search process=""*deletejournal*"" AND process=""*usn*"" | `usn_journal_deletion_filter`",50,['T1070'],{'ntfs'},18.0,"['fsutil', 'ntfs', 'journal', 'file', 'files']"
s786,Vbscript Execution Using Wscript App,This analytic is to detect a suspicious wscript commandline to execute vbscript. This technique was seen in several malware to execute malicious vbs file using wscript application. commonly vbs script is associated to cscript process and this can be a technique to evade process parent child detections or even some av script emulation system.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name = ""wscript.exe"" AND Processes.parent_process = ""*//e:vbscript*"") OR (Processes.process_name = ""wscript.exe"" AND Processes.process = ""*//e:vbscript*"") by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `vbscript_execution_using_wscript_app_filter`",70,"['T1059.005', 'T1059']","{'malware', 'fin7', 'remcos'}",,"['vbscript', 'vbs', 'wscript', 'cscript', 'malware']"
s787,Verclsid CLSID Execution,This analytic is to detect a possible abuse of verclsid to execute malicious file through generate CLSID. This process is a normal application of windows to verify the CLSID COM object before it is instantiated by Windows Explorer. This hunting query can be a good pivot point to analyze what is he CLSID or COM object pointing too to check if it is a valid application or not.,"| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.process_id) as process_id count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_verclsid` AND Processes.process=""*/S*"" Processes.process=""*/C*"" AND  Processes.process=""*{*"" AND Processes.process=""*}*"" by  Processes.process_name Processes.original_file_name Processes.dest Processes.user Processes.parent_process_name Processes.parent_process | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `verclsid_clsid_execution_filter`",50,"['T1218.012', 'T1218']",,151.0,"['clsid', 'verclsid', 'explorer', 'malicious', 'analyze']"
s788,W3WP Spawning Shell,"This query identifies a shell, PowerShell.exe or Cmd.exe, spawning from W3WP.exe, or IIS. In addition to IIS logs, this behavior with an EDR product will capture potential webshell activity, similar to the HAFNIUM Group abusing CVEs, on publicly available Exchange mail servers. During triage, review the parent process and child process of the shell being spawned. Review the command-line arguments and any file modifications that may occur. Identify additional parallel process, child processes, that may highlight further commands executed. After triaging, work to contain the threat and patch the system that is vulnerable.",| tstats `security_content_summariesonly` count values(Processes.process_name) as process_name values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=w3wp.exe AND `process_cmd` OR `process_powershell` by Processes.dest Processes.parent_process Processes.original_file_name Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `w3wp_spawning_shell_filter`,70,"['T1505', 'T1505.003']","{'hafnium', 'cve-2021-34473', 'exe', 'powershell', 'wiper', 'shell'}",,"['shell', 'powershell', 'webshell', 'iis', 'exe']"
s789,WBAdmin Delete System Backups,This search looks for flags passed to wbadmin.exe (Windows Backup Administrator Tool) that delete backup files. This is typically used by ransomware to prevent recovery.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wbadmin.exe Processes.process=""*delete*"" AND (Processes.process=""*catalog*"" OR Processes.process=""*systemstatebackup*"") by Processes.process_name Processes.process Processes.parent_process_name Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `wbadmin_delete_system_backups_filter`",30,['T1490'],"{'backup', 'ryuk'}",,"['ransomware', 'backup', 'wbadmin', 'delete', 'files']"
s790,Wbemprox COM Object Execution,"this search is designed to detect potential malicious process loading COM object to wbemprox.dll,","`sysmon` EventCode=7  ImageLoaded IN (""*\\fastprox.dll"", ""*\\wbemprox.dll"", ""*\\wbemcomn.dll"") NOT (process_name IN (""wmiprvse.exe"", ""WmiApSrv.exe"", ""unsecapp.exe"")) NOT(Image IN(""*\\windows\\*"",""*\\program files*"", ""*\\wbem\\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by Image ImageLoaded process_name Computer EventCode Signed ProcessId Hashes IMPHASH | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wbemprox_com_object_execution_filter`",70,"['T1218', 'T1218.003']","{'revil', 'sodinokibi', 'dll', 'darkside'}",57.0,"['wbemprox', 'dll', 'malicious', 'loading', 'detect']"
s791,Wermgr Process Connecting To IP Check Web Services,this search is designed to detect suspicious wermgr.exe process that tries to connect to known IP web services. This technique is know for trickbot and other trojan spy malware to recon the infected machine and look for its ip address without so much finger print on the commandline process. Since wermgr.exe is designed for error handling process of windows it is really suspicious that this process is trying to connect to this IP web services cause that maybe cause of some malicious code injection.,"`sysmon` EventCode =22 process_name = wermgr.exe QueryName IN (""*wtfismyip.com"", ""*checkip.amazonaws.com"", ""*ipecho.net"", ""*ipinfo.io"", ""*api.ipify.org"", ""*icanhazip.com"", ""*ip.anysrc.com"",""*api.ip.sb"", ""ident.me"", ""www.myexternalip.com"", ""*zen.spamhaus.org"", ""*cbl.abuseat.org"", ""*b.barracudacentral.org"",""*dnsbl-1.uceprotect.net"", ""*spam.dnsbl.sorbs.net"") |  stats  min(_time) as firstTime max(_time) as lastTime count by Image process_name ProcessId QueryName QueryStatus QueryResults Computer EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wermgr_process_connecting_to_ip_check_web_services_filter`",70,"['T1590', 'T1590.005']","{'malware', 'trickbot', 'zen', 'ryuk'}",54.0,"['malware', 'wermgr', 'ip', 'malicious', 'suspicious']"
s792,Wermgr Process Create Executable File,"this search is designed to detect potential malicious wermgr.exe process that drops or create executable file. Since wermgr.exe is an application trigger when error encountered in a process, it is really un ussual to this process to drop executable file. This technique is commonly seen in trickbot malware where it injects it code to this process to execute it malicious behavior like downloading other payload","`sysmon` EventCode=11 process_name = ""wermgr.exe"" TargetFilename = ""*.exe"" | stats  min(_time) as firstTime max(_time) as lastTime count by  Image TargetFilename process_name dest EventCode ProcessId | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wermgr_process_create_executable_file_filter`",70,['T1027'],"{'malware', 'exe', 'trickbot', 'ryuk'}",48.0,"['malware', 'wermgr', 'executable', 'exe', 'malicious']"
s793,Wermgr Process Spawned CMD Or Powershell Process,"This search is designed to detect suspicious cmd and powershell process spawned by wermgr.exe process. This suspicious behavior are commonly seen in code injection technique technique like trickbot to execute a shellcode, dll modules to run malicious behavior.","| tstats `security_content_summariesonly` values(Processes.process) as cmdline min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name = ""wermgr.exe"" `process_cmd` OR `process_powershell` by Processes.parent_process_name  Processes.original_file_name Processes.parent_process_id  Processes.process_name Processes.process Processes.process_id Processes.process_guid Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wermgr_process_spawned_cmd_or_powershell_process_filter`",70,['T1059'],"{'exe', 'trickbot', 'powershell', 'ryuk'}",46.0,"['powershell', 'malicious', 'suspicious', 'cmd', 'exe']"
s794,Wget Download and Bash Execution,"The following analytic identifies the use of wget on Linux or MacOS attempting to download a file from a remote source and pipe it to bash. This is typically found with coinminers and most recently with CVE-2021-44228, a vulnerability in Log4j.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wget (Processes.process=""*-q *"" OR Processes.process=""*--quiet*""  AND Processes.process=""*-O- *"") OR (Processes.process=""*|*"" AND Processes.process=""*bash*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wget_download_and_bash_execution_filter`",80,['T1105'],{'cve-2021-44228'},,"['wget', 'bash', 'log4j', 'pipe', 'file']"
s795,Windows AdFind Exe,"This search looks for the execution of `adfind.exe` with command-line arguments that it uses by default. Specifically the filter or search functions. It also considers the arguments necessary like objectcategory, see readme for more details: https://www.joeware.net/freetools/tools/adfind/usage.htm. This has been seen used before by Wizard Spider, FIN6 and actors whom also launched SUNBURST. AdFind.exe is usually used a recon tool to enumare a domain controller.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process=""* -f *"" OR Processes.process=""* -b *"") AND (Processes.process=*objectcategory* OR Processes.process=""* -gcb *"" OR Processes.process=""* -sc *"") by Processes.dest Processes.user Processes.process_name Processes.process Processes.parent_process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_adfind_exe_filter`",50,['T1018'],"{'fin6', 'dark', 'wizard spider', 'sunburst', 'exe', 'nobelium', 'adfind'}",,"['adfind', 'exe', 'search', 'execution', 'objectcategory']"
s796,Windows Application Layer Protocol RMS Radmin Tool Namedpipe,"The following analytic identifies the use of default or publicly known named pipes used by RMX remote admin tool. A named pipe is a named, one-way or duplex pipe for communication between the pipe server and one or more pipe clients. RMX Tool uses named pipes in many way as part of its communication for its server and client component. This tool was abuse by several adversaries and malware like Azorult to collect data to the targeted host. This TTP is a good indicator that this tool was install in production premise and need to check if the user has a valid reason why it need to install this legitimate application.","`sysmon` EventCode IN (17, 18) EventType IN ( ""CreatePipe"", ""ConnectPipe"") PipeName IN (""\\RManFUSServerNotify32"", ""\\RManFUSCallbackNotify32"", ""\\RMSPrint*"") | stats  min(_time) as firstTime max(_time) as lastTime count by Image EventType ProcessId PipeName Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_application_layer_protocol_rms_radmin_tool_namedpipe_filter`",90,['T1071'],"{'malware', 'rms', 'azorult'}",,"['rmx', 'pipe', 'pipes', 'tool', 'malware']"
s797,Windows Autostart Execution LSASS Driver Registry Modification,"The following analytic identifies the abuse of two undocumented registry keys that allow for a DLL to load into lsass.exe to potentially capture credentials. Upon successful modification of \CurrentControlSet\Services\NTDS\DirectoryServiceExtPt or \CurrentControlSet\Services\NTDS\LsaDbExtPt, a DLL either remote or local will be set as the value and load up into lsass.exe. Based on POC code a text file may be written to disk with credentials.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path IN (""*\\CurrentControlSet\\Services\\NTDS\\DirectoryServiceExtPt"",""*\\CurrentControlSet\\Services\\NTDS\\LsaDbExtPt"") by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest Registry.process_guid | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_autostart_execution_lsass_driver_registry_modification_filter`",70,['T1547.008'],"{'dll', 'registry modification', 'mimikatz', 'lsass'}",63.0,"['lsadbextpt', 'lsass', 'registry', 'dll', 'credentials']"
s798,Windows Binary Proxy Execution Mavinject DLL Injection,"Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. C:\Windows\system32\mavinject.exe PID /INJECTRUNNING PATH_DLL). In addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its /HMODULE command-line parameter (ex. mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER). This command would inject an import table entry consisting of the specified DLL into the module at the given base address. During triage, review file modifcations and parallel processes.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=mavinject.exe Processes.process IN (""*injectrunning*"", ""*hmodule=0x*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_binary_proxy_execution_mavinject_dll_injection_filter`",70,"['T1218.013', 'T1218']",{'dll'},57.0,"['path_dll', 'dll', 'dlls', 'mavinject', 'injectrunning']"
s799,Windows Command and Scripting Interpreter Hunting Path Traversal,The following analytic identifies path traversal command-line execution and should be used to tune and driver other more higher fidelity analytics. This technique was seen in malicious document that execute malicious code using msdt.exe and path traversal technique that serve as defense evasion. This Hunting query is a good pivot to look for possible suspicious process and command-line that runs execute path traversal technique to run malicious code. This may help you to find possible downloaded malware or other lolbin execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes  by Processes.original_file_name Processes.process_id Processes.parent_process_id Processes.process_hash Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | eval count_of_pattern1 = (mvcount(split(process,""/..""))-1) | eval count_of_pattern2 = (mvcount(split(process,""\..""))-1) | eval count_of_pattern3 = (mvcount(split(process,""\\..""))-1) | eval count_of_pattern4 = (mvcount(split(process,""//..""))-1) | search count_of_pattern1 > 1 OR count_of_pattern2 > 1 OR count_of_pattern3 > 1 OR count_of_pattern4 > 1 | `windows_command_and_scripting_interpreter_hunting_path_traversal_filter`",60,['T1059'],"{'malware', 'cve-2022-30190', 'lolbin'}",,"['malware', 'malicious', 'path', 'execution', 'traversal']"
s800,Windows Command and Scripting Interpreter Path Traversal Exec,The following analytic identifies path traversal command-line execution. This technique was seen in malicious document that execute malicious code using msdt.exe and path traversal technique that serve as defense evasion. This TTP is a good pivot to look for more suspicious process and command-line that runs before and after this execution. This may help you to find possible downloaded malware or other lolbin execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where  Processes.process=""*\/..\/..\/..\/*"" OR Processes.process=""*\\..\\..\\..\\*"" OR Processes.process=""*\/\/..\/\/..\/\/..\/\/*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id Processes.process_hash | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_command_and_scripting_interpreter_path_traversal_exec_filter`",90,['T1059'],"{'malware', 'cve-2022-30190', 'lolbin'}",,"['malware', 'malicious', 'path', 'execution', 'traversal']"
s801,Windows Command Shell DCRat ForkBomb Payload,"The following analytic identifies DCRat ""forkbomb"" payload feature. This technique was seen in dark crystal RAT backdoor capabilities where it will execute several cmd child process executing ""notepad.exe & pause"". This analytic detects the multiple cmd.exe and child process notepad.exe  execution using batch script in the targeted host within 30s timeframe. this TTP can be a good pivot to check DCRat infection.","| tstats `security_content_summariesonly` values(Processes.process) as process values(Processes.parent_process) as parent_process values(Processes.parent_process_id) as parent_process_id values(Processes.process_id) as process_id dc(Processes.parent_process_id) as parent_process_id_count dc(Processes.process_id) as process_id_count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name= ""cmd.exe"" (Processes.process_name = ""notepad.exe"" OR Processes.original_file_name= ""notepad.exe"") Processes.parent_process = ""*.bat*"" by  Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.parent_process Processes.dest Processes.user  _time span=30s | where parent_process_id_count>= 10 AND process_id_count >=10 | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_command_shell_dcrat_forkbomb_payload_filter`",90,"['T1059.003', 'T1059']","{'dark', 'exe', 'dcrat'}",,"['dcrat', 'cmd', 'forkbomb', 'exe', 'process']"
s802,Windows Computer Account Created by Computer Account,"The following analytic identifes a Computer Account creating a new Computer Account with specific a Service Principle Name - ""RestrictedKrbHost"". The RestrictedKrbHost service class allows client applications to use Kerberos authentication when they do not have the identity of the service but have the server name.","`wineventlog_security` EventCode=4741 user_type=computer Subject_Account_Domain!=""NT AUTHORITY""  Message=*RestrictedKrbHost* | stats  count min(_time) as firstTime max(_time) as lastTime by dest, subject, action ,src_user, user, Account_Name, Subject_Account_Name,Subject_Account_Domain | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_computer_account_created_by_computer_account_filter`",50,['T1558'],{'kerberos'},351.0,"['restrictedkrbhost', 'authentication', 'kerberos', 'account', 'service']"
s803,Windows Computer Account Requesting Kerberos Ticket,"The following analytic identifies a ComputerAccount requesting a Kerberos Ticket. typically, a user account requests a Kerberos ticket. This behavior was identified with KrbUpRelay, but additional Kerberos attacks have exhibited similar behavior.","`wineventlog_security`  EventCode=4768 Account_Name=""*$""  src_ip!=""::1"" | stats  count min(_time) as firstTime max(_time) as lastTime by dest, subject, action, Supplied_Realm_Name, user, Account_Name, src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_computer_account_requesting_kerberos_ticket_filter`",50,['T1558'],{'kerberos'},44.0,"['kerberos', 'krbuprelay', 'ticket', 'computeraccount', 'attacks']"
s804,Windows Computer Account With SPN,"The following analytic identifies two SPNs, HOST and RestrictedKrbHost, added using the KrbRelayUp behavior. This particular behavior has been found in other Kerberos based attacks.","`wineventlog_security` EventCode=4741 MSADChangedAttributes IN (""*HOST/*"",""*RestrictedKrbHost/*"") AND New_UAC_Value=0x80 | eval Effecting_Account=mvindex(Security_ID,1) | eval New_Computer_Account_Name=mvindex(Security_ID,0) | stats count min(_time) as firstTime max(_time) as lastTime values(EventCode),values(Account_Domain),values(Security_ID), values(Effecting_Account), values(New_Computer_Account_Name),values(SAM_Account_Name),values(DNS_Host_Name),values(MSADChangedAttributes) by dest Logon_ID subject | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_computer_account_with_spn_filter`",80,['T1558'],{'kerberos'},351.0,"['kerberos', 'restrictedkrbhost', 'spns', 'krbrelayup', 'attacks']"
s805,Windows Curl Download to Suspicious Path,"The following analytic identifies the use of Windows Curl.exe downloading a file to a suspicious location. \
-O or --output is used when a file is to be downloaded and placed in a specified location. \
During triage, review parallel processes for further behavior. In addition, identify if the download was successful. If a file was downloaded, capture and analyze.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_curl` Processes.process IN (""*-O *"",""*--output*"") Processes.process IN (""*\\appdata\\*"",""*\\programdata\\*"",""*\\public\\*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_curl_download_to_suspicious_path_filter`",80,['T1105'],"{'icedid', 'curl'}",260.0,"['curl', 'downloading', 'file', 'triage', 'processes']"
s806,Windows Curl Upload to Remote Destination,"The following analytic identifies the use of Windows Curl.exe uploading a file to a remote destination. \
`-T` or `--upload-file` is used when a file is to be uploaded to a remotge destination. \
`-d` or `--data` POST is the HTTP method that was invented to send data to a receiving web application, and it is, for example, how most common HTML forms on the web work. \
HTTP multipart formposts are done with `-F`, but this appears to not be compatible with the Windows version of Curl. Will update if identified adversary tradecraft. \
Adversaries may use one of the three methods based on the remote destination and what they are attempting to upload (zip vs txt). During triage, review parallel processes for further behavior. In addition, identify if the upload was successful in network logs. If a file was uploaded, isolate the endpoint and review.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_curl` Processes.process IN (""*-T *"",""*--upload-file *"", ""*-d *"", ""*--data *"", ""*-F *"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_curl_upload_to_remote_destination_filter`",80,['T1105'],{'curl'},142.0,"['curl', 'uploading', 'http', 'upload', 'file']"
s807,Windows Defender Exclusion Registry Entry,"This analytic will detect a suspicious process that modify a registry related to windows defender exclusion feature. This registry is abused by adversaries, malware author and red teams to bypassed Windows Defender Anti-Virus product by excluding folder path, file path, process, extensions and etc. from its real time or schedule scan to execute their malicious code. This is a good indicator for a defense evasion and to look further for events after this behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Exclusions\\*"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_defender_exclusion_registry_entry_filter`",80,"['T1562.001', 'T1562']","{'malware', 'remcos', 'azorult'}",,"['malware', 'virus', 'malicious', 'defender', 'anti']"
s808,Windows Deleted Registry By A Non Critical Process File Path,"This analytic is to detect deletion of registry with suspicious process file path. This technique was seen in Double Zero wiper malware where it will delete all the subkey in HKLM, HKCU and HKU registry hive as part of its destructive payload to the targeted hosts. This anomaly detections can catch possible malware or advesaries deleting registry as part of defense evasion or even payload impact but can also catch for third party application updates or installation. In this scenario false positive filter is needed.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.action=deleted by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data Registry.action | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where NOT (Processes.process_path IN (""*\\windows\\*"", ""*\\program files*"")) by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_path Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action] | table _time parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name action dest user | `windows_deleted_registry_by_a_non_critical_process_file_path_filter`",60,['T1112'],"{'hive', 'registry modification', 'doublezero', 'wiper', 'malware'}",161.0,"['registry', 'malware', 'hklm', 'hkcu', 'hku']"
s809,Windows DisableAntiSpyware Registry,"The search looks for the Registry Key DisableAntiSpyware set to disable. This is consistent with Ryuk infections across a fleet of endpoints. This particular behavior is typically executed when an ransomware actor gains access to an endpoint and beings to perform execution. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications. Endpoint should be isolated.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_value_name=""DisableAntiSpyware"" AND Registry.registry_value_data=""0x00000001"" by Registry.dest Registry.user Registry.registry_path Registry.registry_value_data | `drop_dm_object_name(Registry)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `windows_disableantispyware_registry_filter`",30,"['T1562.001', 'T1562']","{'lazyscripter', 'registry modification', 'empire', 'azorult', 'ryuk'}",,"['ransomware', 'disableantispyware', 'ryuk', 'disable', 'registry']"
s810,Windows Disabled Users Failing To Authenticate Kerberos,"The following analytic identifies one source endpoint failing to authenticate with multiple disabled domain users using the Kerberos protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using Kerberos to obtain initial access or elevate privileges. As attackers progress in a breach, mistakes will be made. In certain scenarios, adversaries may execute a password spraying attack against disabled users. Event 4768 is generated every time the Key Distribution Center issues a Kerberos Ticket Granting Ticket (TGT). Failure code `0x12` stands for `clients credentials have been revoked` (account disabled, expired or locked out).\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will only trigger on domain controllers, not on member servers or workstations.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source ip and attempted user accounts.","`wineventlog_security` EventCode=4768 Account_Name!=""*$"" Result_Code=0x12 | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `windows_disabled_users_failing_to_authenticate_kerberos_filter` ",70,"['T1110.003', 'T1110']","{'kerberos', 'authenticate'}",338.0,"['security', 'kerberos', 'authenticate', 'credentials', 'analytics']"
s811,Windows Disable Change Password Through Registry,"This analytic is to detect a suspicious registry modification to disable change password feature of the windows host. This registry modification may disables the Change Password button on the Windows Security dialog box (which appears when you press Ctrl+Alt+Del). As a result, users cannot change their Windows password on demand. This technique was seen in some malware family like ransomware to prevent the user to change the password after ownning the network or a system during attack. This windows feature may implemented by administrator to prevent normal user to change the password of a critical host or server, In this type of scenario filter is needed to minimized false positive.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableChangePassword"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_disable_change_password_through_registry_filter`",70,['T1112'],"{'malware', 'registry modification', 'password'}",87.0,"['password', 'malware', 'ransomware', 'security', 'registry']"
s812,Windows Disable Lock Workstation Feature Through Registry,This analytic is to detect a suspicious registry modification to disable Lock Computer windows features. This registry modification prevent the user from locking its screen or computer that are being abused by several malware for example ransomware. This technique was used by threat actor to make its payload more impactful to the compromised host.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableLockWorkstation"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_disable_lock_workstation_feature_through_registry_filter`",70,['T1112'],"{'malware', 'registry modification', 'fatalrat'}",161.0,"['registry', 'malware', 'locking', 'ransomware', 'disable']"
s813,Windows Disable LogOff Button Through Registry,"This analytic is to detect a suspicious registry modification to disable logoff feature in windows host. This registry when enable will prevent users to log off of the system by using any method, including programs run from the command line, such as scripts. It also disables or removes all menu items and buttons that log the user off of the system. This technique was seen abused by ransomware malware to make the compromised host un-useful and hard to remove other registry modification made on the machine that needs restart to take effect. This windows feature may implement by administrator in some server where shutdown is critical. In that scenario filter of machine and users that can modify this registry is needed.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\*"" Registry.registry_value_name IN (""NoLogOff"", ""StartMenuLogOff"") Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_disable_logoff_button_through_registry_filter`",70,['T1112'],"{'malware', 'registry modification'}",68.0,"['malware', 'disable', 'logoff', 'disables', 'ransomware']"
s814,Windows Disable Memory Crash Dump,"The following analytic identifies a process that is attempting to disable the ability on Windows to generate a memory crash dump. This was recently identified being utilized by HermeticWiper. To disable crash dumps, the value must be set to 0. This feature is typically modified to perform a memory crash dump when a computer stops unexpectedly because of a Stop error (also known as a blue screen, system crash, or bug check).","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Registry where (Registry.registry_path=""*\\CurrentControlSet\\Control\\CrashControl\\CrashDumpEnabled"") AND Registry.registry_value_data=""0x00000000"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.registry_key_name  | `drop_dm_object_name(Registry)` |join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)`  | fields _time dest user parent_process_name parent_process process_name process_path process process_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process process_guid registry_path registry_value_name registry_value_data registry_key_name | `windows_disable_memory_crash_dump_filter`",90,['T1485'],"{'wiper', 'hermeticwiper', 'stop'}",,"['crash', 'dump', 'dumps', 'memory', 'disable']"
s815,Windows Disable Notification Center,The following search identifies a modification of registry to disable the windows notification center feature in a windows host machine. This registry modification removes notification and action center from the notification area on the task bar. This modification are seen in RAT malware to cover their tracks upon downloading other of its component or other payload.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_value_name= ""DisableNotificationCenter"" Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.process_guid Registry.registry_value_data | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `windows_disable_notification_center_filter`",60,['T1112'],"{'malware', 'registry modification', 'remcos'}",161.0,"['registry', 'notification', 'disable', 'malware', 'center']"
s816,Windows Disable Shutdown Button Through Registry,This analytic is to detect a suspicious registry modification to disable shutdown button on the logon user. This technique was seen in several malware especially in ransomware family like killdisk malware variant to make the compromised host un-useful and hard to remove other registry modification made on the machine that needs restart to take effect. This windows feature may implement by administrator in some server where shutdown is critical. In that scenario filter of machine and users that can modify this registry is needed.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where (Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\shutdownwithoutlogon"" Registry.registry_value_data = ""0x00000000"") OR (Registry.registry_path=""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\NoClose"" Registry.registry_value_data = ""0x00000001"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_disable_shutdown_button_through_registry_filter`",70,['T1112'],"{'malware', 'registry modification', 'killdisk', 'screenlocker'}",161.0,"['shutdown', 'malware', 'registry', 'disable', 'ransomware']"
s817,Windows Disable Windows Group Policy Features Through Registry,This analytic is to detect a suspicious registry modification to disable windows features. These techniques are seen in several ransomware malware to impair the compromised host to make it hard for analyst to mitigate or response from the attack. Disabling these known features make the analysis and forensic response more hard. Disabling these feature is not so common but can still be implemented by the administrator for security purposes. In this scenario filters for users that are allowed doing this is needed.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\*"" OR Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\*"" Registry.registry_value_name IN (""NoDesktop"", ""NoFind"", ""NoControlPanel"", ""NoFileMenu"", ""NoSetTaskbar"", ""NoTrayContextMenu"", ""TaskbarLockAll"", ""NoThemesTab"",""NoPropertiesMyDocuments"",""NoVisualStyleChoice"",""NoColorChoice"",""NoPropertiesMyDocuments"") Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_disable_windows_group_policy_features_through_registry_filter`",70,['T1112'],"{'malware', 'registry modification'}",68.0,"['malware', 'disabling', 'ransomware', 'disable', 'registry']"
s818,Windows DiskCryptor Usage,"The following analytic identifies DiskCryptor  process name of dcrypt.exe or internal name dcinst.exe. This utility has been utilized by adversaries to encrypt disks manually during an operation. In addition, during install, a dcrypt.sys driver is installed and requires a reboot in order to take effect. There are no command-line arguments used.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""dcrypt.exe"" OR Processes.original_file_name=dcinst.exe) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_diskcryptor_usage_filter`",70,['T1486'],{'exe'},352.0,"['dcrypt', 'diskcryptor', 'dcinst', 'encrypt', 'exe']"
s819,Windows Diskshadow Proxy Execution,"DiskShadow.exe is a Microsoft Signed binary present on Windows Server. It has a scripting mode intended for complex scripted backup operations. This feature also allows for execution of arbitrary unsigned code. This analytic looks for the usage of the scripting mode flags in executions of DiskShadow. During triage, compare to known backup behavior in your environment and then review the scripts called by diskshadow.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_diskshadow` (Processes.process=*-s* OR Processes.process=*/s*) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_diskshadow_proxy_execution_filter`,70,['T1218'],"{'signed binary', 'exe', 'backup'}",80.0,"['diskshadow', 'microsoft', 'exe', 'backup', 'scripts']"
s820,Windows DISM Remove Defender,"The following analytic identifies the use of the Windows Disk Image Utility, `dism.exe`, to remove Windows Defender. Adversaries may use `dism.exe` to disable Defender before completing their objective.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=dism.exe (Processes.process=""*/online*"" AND Processes.process=""*/disable-feature*"" AND Processes.process=""*Windows-Defender*"" AND Processes.process=""*/remove*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_dism_remove_defender_filter`",80,"['T1562.001', 'T1562']","{'pysa', 'leverage', 'mespinoza'}",249.0,"['dism', 'defender', 'windows', 'disable', 'remove']"
s821,Windows DLL Search Order Hijacking Hunt,"The following hunting analytic is an experimental query built against a accidental feature using the latest Sysmon TA 3.0 (https://splunkbase.splunk.com/app/5709/) which maps the module load (ImageLoaded) to process_name. This analytic will deprecate once this is fixed. This hunting analytic identifies known libraries in Windows that may be used in a DLL search order hijack or DLL Sideloading setting. This may require recompiling the DLL, moving the DLL or moving the vulnerable process. The query looks for any running out of system32 or syswow64. Some libraries natively run out of other application paths and will need to be added to the exclusion as needed. The lookup is comprised of Microsoft native libraries identified within the Hijacklibs.net project.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process_name) as process_name from datamodel=Endpoint.Processes where Processes.dest!=unknown Processes.user!=unknown NOT (Processes.process_path IN (""*\\system32\\*"", ""*\\syswow64\\*"",""*\\winsxs\\*""))  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process_path | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | lookup hijacklibs library AS process_name OUTPUT islibrary | search islibrary = True | rename parent_process_name as ""Process Name"" process_name AS ImageLoaded process_path AS Module_Path | `windows_dll_search_order_hijacking_hunt_filter`",10,"['T1574.001', 'T1574']",{'dll'},296.0,"['splunkbase', 'dll', 'splunk', 'process_name', 'syswow64']"
s822,Windows DLL Search Order Hijacking Hunt with Sysmon,"The following hunting analytic is an experimental query built against a accidental feature using the latest Sysmon TA 3.0 (https://splunkbase.splunk.com/app/5709/) which maps the module load (ImageLoaded) to process_name. This analytic will deprecate once this is fixed. This hunting analytic identifies known libraries in Windows that may be used in a DLL search order hijack or DLL Sideloading setting. This may require recompiling the DLL, moving the DLL or moving the vulnerable process. The query looks for any running out of system32 or syswow64. Some libraries natively run out of other application paths and will need to be added to the exclusion as needed. The lookup is comprised of Microsoft native libraries identified within the Hijacklibs.net project.","`sysmon` EventCode=7 NOT (process_path IN (""*\\system32\\*"", ""*\\syswow64\\*"",""*\\winsxs\\*"")) | lookup hijacklibs library AS process_name OUTPUT islibrary | search islibrary = True | rename Computer as dest process_name AS ImageLoaded process_path AS Module_Path | stats values(parent_process_name) count by _time dest ImageLoaded Module_Path | `windows_dll_search_order_hijacking_hunt_with_sysmon_filter`",10,"['T1574.001', 'T1574']",{'dll'},296.0,"['splunkbase', 'dll', 'splunk', 'process_name', 'syswow64']"
s823,Windows DLL Search Order Hijacking with iscsicpl,"The following analytic identifies a recently disclosed search ordler DLL hijack in iscsicpl.exe. The malicious DLL must be in a new path and iscsicpl.exe, upon load, will execute the payload. The analytic is restricted to Windows shells. Two proof of concepts were identified and utilized to determine the behavior. The command-line is an option to go after, but most likely identifying a child process off iscsicpl.exe will be more effective. Monitoring for suspicious DLL loads is also an option.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=iscsicpl.exe `windows_shells` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `windows_dll_search_order_hijacking_with_iscsicpl_filter`,80,['T1574.001'],"{'dll', 'exe'}",57.0,"['dll', 'iscsicpl', 'malicious', 'hijack', 'exe']"
s824,Windows DotNet Binary in Non Standard Path,The following analytic identifies native .net binaries within the Windows operating system that may be abused by adversaries by moving it to a new directory. The analytic identifies the .net binary by using a lookup and compares the process name and original file name (internal name). The analytic utilizes a lookup with the is_net_windows_file macro to identify the binary process name and original file name. if one or the other matches an alert will be generated. Adversaries abuse these binaries as they are native to windows and native DotNet. Note that not all SDK (post install of Windows) are captured in the lookup.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where NOT (Processes.process_path IN (""*\\Windows\\ADWS\\*"",""*\\Windows\\SysWOW64*"", ""*\\Windows\\system32*"", ""*\\Windows\\NetworkController\\*"", ""*\\Windows\\SystemApps\\*"", ""*\\WinSxS\\*"", ""*\\Windows\\Microsoft.NET\\*"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_path Processes.process_id Processes.parent_process_id | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `is_net_windows_file` | `windows_dotnet_binary_in_non_standard_path_filter`",70,"['T1036', 'T1036.003', 'T1218', 'T1218.004']","{'signed binary', 'whispergate'}",,"['is_net_windows_file', 'binaries', 'dotnet', 'sdk', 'native']"
s825,Windows Drivers Loaded by Signature,"The following analytic assists with viewing all drivers being loaded by using Sysmon EventCode 6 (Driver Load). Sysmon provides some simple fields to assist with identifying suspicious drivers. Use this analytic to look at prevalence of driver (count), path of driver, signature status and hash. Review these fields with scrutiny until the ability to prove the driver is legitimate and has a purpose in the environment.",`sysmon` EventCode=6 | stats min(_time) as firstTime max(_time) as lastTime values(ImageLoaded) count by Computer Signed Signature service_signature_verified service_signature_exists Hashes | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_drivers_loaded_by_signature_filter`,60,"['T1014', 'T1068']",{'driver'},347.0,"['driver', 'drivers', 'sysmon', 'eventcode', 'legitimate']"
s826,Windows Driver Load Non-Standard Path,"The following analytic uses Windows EventCode 7045 to identify new Kernel Mode Drivers being loaded in Windows from a non-standard path. Note that, adversaries may move malicious or vulnerable drivers into these paths and load up. The idea is that this analytic provides visibility into drivers loading in non-standard file paths.","`wineventlog_system` EventCode=7045 Service_Type=""kernel mode driver"" NOT (Service_File_Name IN (""*\\Windows\\*"", ""*\\Program File*"", ""*\\systemroot\\*"",""%SystemRoot%*"", ""system32\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_driver_load_non_standard_path_filter`",60,['T1014'],{'driver'},347.0,"['drivers', 'eventcode', 'kernel', 'analytic', 'paths']"
s827,Windows Event For Service Disabled,"This analytic will identify suspicious system event of services that was modified from start to disabled. This technique is seen where the adversary attempts to disable security app services, other malware services to evade the defense systems on the compromised host","`wineventlog_system` EventCode=7040  Message = ""*service was changed from demand start to disabled."" | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Message User Sid service service_name | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_event_for_service_disabled_filter`",60,"['T1562.001', 'T1562']",{'malware'},87.0,"['malware', 'security', 'compromised', 'adversary', 'services']"
s828,Windows Event Log Cleared,"The following analytic utilizes Windows Security Event ID 1102 or System log event 104 to identify when a Windows event log is cleared. Note that this analytic will require tuning or restricted to specific endpoints based on criticality. During triage, based on time of day and user, determine if this was planned. If not planned, follow through with reviewing parallel alerts and other data sources to determine what else may have occurred.",(`wineventlog_security` EventCode=1102) OR (`wineventlog_system` EventCode=104) | stats count min(_time) as firstTime max(_time) as lastTime by dest Message EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_event_log_cleared_filter`,70,"['T1070', 'T1070.001']",{'clop'},,"['log', 'alerts', 'event', 'triage', 'analytic']"
s829,Windows Excessive Disabled Services Event,"This analytic will identify suspicious excessive number of system events of services that was modified from start to disabled. This technique is seen where the adversary attempts to disable security app services, other malware services oer serve as an destructive impact to complete the objective on the compromised system. One good example for this scenario is Olympic destroyer where it disable all active services in the compromised host as part of its destructive impact and defense evasion.","`wineventlog_system` EventCode=7040 Message = ""*service was changed from demand start to disabled."" | stats count values(Message) as MessageList dc(Message) as MessageCount min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode  User Sid | where MessageCount >=10 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_excessive_disabled_services_event_filter`",90,"['T1562.001', 'T1562']","{'malware', 'olympic destroyer'}",87.0,"['malware', 'security', 'disable', 'services', 'compromised']"
s830,Windows Execute Arbitrary Commands with MSDT,"The following analytic identifies a recently disclosed arbitraty command execution using Windows msdt.exe - a Diagnostics Troubleshooting Wizard. The sample identified will use the ms-msdt:/ protocol handler to load msdt.exe to retrieve a remote payload. During triage, review file modifications for html. Identify parallel process execution that may be related, including an Office Product.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=msdt.exe Processes.process IN (""*msdt*"",""*ms-msdt:*"",""*ms-msdt:/id*"",""*ms-msdt:-id*"",""*/id*"") AND (Processes.process=""*IT_BrowseForFile=*"" OR Processes.process=""*IT_RebrowseForFile=*"" OR Processes.process=""*.xml*"") AND Processes.process=""*PCWDiagnostic*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `windows_execute_arbitrary_commands_with_msdt_filter`",100,['T1218'],"{'cve-2022-30190', 'exe', 'doublepulsar'}",,"['msdt', 'exe', 'execution', 'ms', 'process']"
s831,Windows File Without Extension In Critical Folder,"This analytic is to look for suspicious file creation in the critical folder like ""System32\Drivers"" folder without file extension. This artifacts was seen in latest hermeticwiper where it drops its driver component in Driver Directory both the compressed(without file extension) and the actual driver component (with .sys file extension). This TTP is really a good indication that a host might be compromised by this destructive malware that wipes the boot sector of the system.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*\\System32\\drivers\\*"", ""*\\syswow64\\drivers\\*"") by _time span=5m Filesystem.dest Filesystem.user Filesystem.file_name Filesystem.file_path Filesystem.process_guid Filesystem.file_create_time | `drop_dm_object_name(Filesystem)` | rex field=""file_name"" ""\.(?<extension>[^\.]*$)"" | where isnull(extension) | join process_guid [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=5m Processes.process_name Processes.dest Processes.process_guid Processes.user | `drop_dm_object_name(Processes)`] | stats count min(_time) as firstTime max(_time) as lastTime by dest process_name process_guid file_name file_path file_create_time user | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_file_without_extension_in_critical_folder_filter`",90,['T1485'],"{'rex', 'driver', 'wiper', 'hermeticwiper', 'malware'}",,"['malware', 'system32', 'driver', 'ttp', 'drivers']"
s832,Windows Gather Victim Host Information Camera,"The following analytic detects a powershell script that enumerate camera mounted to the targeted host. This technique was seen in DCRat malware, where it runs a powershell command to look for camera information that will be pass on to its C2 server. This anomaly detection can be a good pivot to check who and why this enumeration is needed and what parent process execute this powershell script command.","`powershell` EventCode=4104 ScriptBlockText= ""* Win32_PnPEntity *"" ScriptBlockText= ""*SELECT*"" ScriptBlockText= ""*WHERE*"" ScriptBlockText = ""*PNPClass*"" ScriptBlockText IN (""*Image*"", ""*Camera*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_gather_victim_host_information_camera_filter`",60,"['T1592.001', 'T1592']","{'malware', 'dark', 'powershell', 'dcrat'}",,"['camera', 'detection', 'malware', 'detects', 'anomaly']"
s833,Windows Gather Victim Network Info Through Ip Check Web Services,The following analytic identifies process that attempts to connect to a known IP web services. This technique is commonly used by trickbot and other malware to perform reconnaissance against the infected machine and look for its IP address.,"`sysmon` EventCode=22  QueryName IN (""*wtfismyip.com"", ""*checkip.amazonaws.com"", ""*ipecho.net"", ""*ipinfo.io"", ""*api.ipify.org"", ""*icanhazip.com"", ""*ip.anysrc.com"",""*api.ip.sb"", ""ident.me"", ""www.myexternalip.com"", ""*zen.spamhaus.org"", ""*cbl.abuseat.org"", ""*b.barracudacentral.org"", ""*dnsbl-1.uceprotect.net"", ""*spam.dnsbl.sorbs.net"", ""*iplogger.org*"", ""*ip-api.com*"") |  stats  min(_time) as firstTime max(_time) as lastTime count by  Image ProcessId QueryName QueryStatus QueryResults Computer EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_gather_victim_network_info_through_ip_check_web_services_filter`",50,"['T1590.005', 'T1590']","{'malware', 'trickbot', 'zen', 'azorult'}",,"['ip', 'malware', 'process', 'web', 'attempts']"
s834,Windows Get-AdComputer Unconstrained Delegation Discovery,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the Get-ADComputer commandlet used with specific parameters to discover Windows endpoints with Kerberos Unconstrained Delegation. Red Teams and adversaries alike may leverage use this technique for situational awareness and Active Directory Discovery.," `powershell` EventCode=4104 (Message = ""*Get-ADComputer*"" AND Message = ""*TrustedForDelegation*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_get_adcomputer_unconstrained_delegation_discovery_filter`",50,['T1018'],"{'kerberos', 'powershell', 'leverage'}",307.0,"['powershell', 'kerberos', 'logging', 'adcomputer', 'delegation']"
s835,Windows Hidden Schedule Task Settings,"The following query utilizes Windows Security EventCode 4698, A scheduled task was created, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a hidden settings that are unique entry of malware like industroyer2 or attack that uses lolbin to download other file or payload to the infected machine.","`wineventlog_security` EventCode=4698 | xmlkv Message | search Hidden = true | stats count min(_time) as firstTime max(_time) as lastTime by  Task_Name, Command, Author, Hidden, dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_hidden_schedule_task_settings_filter`",80,['T1053'],"{'industroyer2', 'industroyer', 'schtasks', 'lolbin', 'malware'}",339.0,"['malware', 'schtasks', 'taskservice', 'eventcode', 'infected']"
s836,Windows Hide Notification Features Through Registry,"This analytic is to detect a suspicious registry modification to hide common windows notification feature from compromised host. This technique was seen in some ransomware family to add more impact to its payload that are visually seen by user aside from the encrypted files and ransomware notes. Even this a good anomaly detection, administrator may implement this changes for auditing or security reason. In this scenario filter is needed.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\*"" Registry.registry_value_name IN (""HideClock"", ""HideSCAHealth"", ""HideSCANetwork"", ""HideSCAPower"", ""HideSCAVolume"") Registry.registry_value_data = ""0x00000001"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_hide_notification_features_through_registry_filter`",70,['T1112'],{'registry modification'},6.0,"['ransomware', 'registry', 'detection', 'detect', 'security']"
s837,Windows High File Deletion Frequency,This search looks for high frequency of file deletion relative to process name and process id. These events usually happen when the ransomware tries to encrypt the files with the ransomware file extensions and sysmon treat the original files to be deleted as soon it was replace as encrypted data.,"`sysmon` EventCode=23 TargetFilename IN (""*.cmd"", ""*.ini"",""*.gif"", ""*.jpg"", ""*.jpeg"", ""*.db"", ""*.ps1"", ""*.doc*"", ""*.xls*"", ""*.ppt*"", ""*.bmp"",""*.zip"", ""*.rar"", ""*.7z"", ""*.chm"", ""*.png"", ""*.log"", ""*.vbs"", ""*.js"", ""*.vhd"", ""*.bak"", ""*.wbcat"", ""*.bkf"" , ""*.backup*"", ""*.dsk"", ""*.win"") | stats values(TargetFilename) as deleted_files min(_time) as firstTime max(_time) as lastTime count by Computer user EventCode Image ProcessID |where count >=100 | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_high_file_deletion_frequency_filter`",90,['T1485'],"{'ps1', 'whispergate', 'clop'}",,"['ransomware', 'deletion', 'files', 'process', 'file']"
s838,Windows Hunting System Account Targeting Lsass,"The following hunting analytic identifies all processes requesting access into Lsass.exe. his behavior may be related to credential dumping or applications requiring access to credentials. Triaging this event will require understanding the GrantedAccess from the SourceImage. In addition, whether the account is privileged or not. Review the process requesting permissions and review parallel processes.","`sysmon` EventCode=10 TargetImage=*lsass.exe | stats count min(_time) as firstTime max(_time) as lastTime by Computer, TargetImage, GrantedAccess, SourceImage, SourceProcessId, SourceUser, TargetUser | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_hunting_system_account_targeting_lsass_filter`",80,"['T1003.001', 'T1003']","{'permission', 'powersploit', 'mimikatz', 'ps1', 'lsass'}",,"['lsass', 'processes', 'permissions', 'access', 'process']"
s839,Windows Identify Protocol Handlers,"The following hunting analytic will identify any protocol handlers utilized on the command-line. A protocol handler is an application that knows how to handle particular types of links: for example, a mail client is a protocol handler for ""mailto:"" links. When the user clicks a ""mailto:"" link, the browser opens the application selected as the handler for the ""mailto:"" protocol (or offers them a choice of handlers, depending on their settings). To identify protocol handlers we can use NirSoft https://www.nirsoft.net/utils/url_protocol_view.html URLProtocolView or query the registry using PowerShell: get-Item Registry::HKEY_CLASSES_ROOT\* | Select-Object ""Property"",""PSChildName"" | Where-Object -Property Property -Match ""^URL*"" #|Export-Csv -path c:\temp\url_all.csv. Note my query is limited to URL in the property to limit the scope of this query to similar handlers as ms-msdt.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process values(Processes.parent_process) as parent_process from datamodel=Endpoint.Processes  by Processes.dest Processes.user Processes.process_name Processes.process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | lookup windows_protocol_handlers handler AS process OUTPUT handler ishandler | where ishandler=""TRUE"" | `windows_identify_protocol_handlers_filter`",30,['T1059'],"{'mailto', 'powershell'}",353.0,"['url_protocol_view', 'urlprotocolview', 'handler', 'clicks', 'protocol']"
s840,Windows Impair Defenses Disable Win Defender Auto Logging,"The search looks for the Registry Key DefenderApiLogger or DefenderAuditLogger set to disable. This is consistent with RAT malware across a fleet of endpoints. This particular behavior is typically executed when an adversary gains access to an endpoint and beings to perform execution. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where (Registry.registry_path = ""*WMI\\Autologger\\DefenderApiLogger\\Start"" OR Registry.registry_path = ""*WMI\\Autologger\\DefenderAuditLogger\\Start"")  Registry.registry_value_data =""0x00000000"" by  Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.action Registry.dest Registry.user | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_impair_defenses_disable_win_defender_auto_logging_filter`",30,"['T1562.001', 'T1562']","{'malware', 'lazyscripter', 'empire'}",354.0,"['defenderauditlogger', 'malware', 'defenderapilogger', 'disable', 'rat']"
s841,Windows Impair Defense Add Xml Applocker Rules,The following analytic is to identify a process that imports applocker xml policy using PowerShell commandlet. This technique was seen in Azorult malware where it drop an xml Applocker policy that will deny several AV products and further executed the PowerShell Applocker commandlet.,"| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_powershell` AND Processes.process=""*Import-Module Applocker*"" AND Processes.process=""*Set-AppLockerPolicy *""  AND Processes.process=""* -XMLPolicy *"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_impair_defense_add_xml_applocker_rules_filter`",50,"['T1562.001', 'T1562']","{'malware', 'powershell', 'azorult'}",,"['applocker', 'malware', 'powershell', 'commandlet', 'xml']"
s842,Windows Impair Defense Delete Win Defender Context Menu,"The search looks for the deletion of Windows Defender context menu within the registry. This is consistent behavior with RAT malware across a fleet of endpoints. This particular behavior is executed when an adversary gains access to an endpoint and begins to perform execution. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\shellex\\ContextMenuHandlers\\EPP"" Registry.action = deleted by  Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.action Registry.dest Registry.user | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_impair_defense_delete_win_defender_context_menu_filter`",50,"['T1562.001', 'T1562']","{'malware', 'lazyscripter', 'registry modification', 'empire'}",161.0,"['malware', 'registry', 'deletion', 'defender', 'execution']"
s843,Windows Impair Defense Delete Win Defender Profile Registry,"The search looks for the deletion of Windows Defender main profile within the registry. This was used by RAT malware across a fleet of endpoints. This particular behavior is typically executed when an adversary gains access to an endpoint and beings to perform execution. Usually, a batch (.bat) will be executed and multiple registry and scheduled task modifications will occur. During triage, review parallel processes and identify any further file modifications.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Policies\\Microsoft\\Windows Defender"" Registry.action = deleted by  Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.action  Registry.user Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_impair_defense_delete_win_defender_profile_registry_filter`",80,"['T1562.001', 'T1562']","{'malware', 'lazyscripter', 'registry modification', 'empire'}",161.0,"['malware', 'defender', 'registry', 'deletion', 'processes']"
s844,Windows Impair Defense Deny Security Software With Applocker,The following analytic identifies a modification in the Windows registry by the Applocker utility that contains details or registry data values related to denying the execution of several security products. This technique was seen in Azorult malware where it drops an xml Applocker policy that will deny several AV products and then loaded by using PowerShell Applocker commandlet.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where (Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy Objects\\*"" AND Registry.registry_path= ""*}Machine\\Software\\Policies\\Microsoft\\Windows\\SrpV2*"") OR Registry.registry_path=""*\\Software\\Policies\\Microsoft\\Windows\\SrpV2*"" AND Registry.registry_value_data = ""*Action\=\""Deny\""*"" AND Registry.registry_value_data IN(""*O=SYMANTEC*"",""*O=MCAFEE*"",""*O=KASPERSKY*"",""*O=BLEEPING COMPUTER*"", ""*O=PANDA SECURITY*"",""*O=SYSTWEAK SOFTWARE*"", ""*O=TREND MICRO*"", ""*O=AVAST*"", ""*O=GRIDINSOFT*"", ""*O=MICROSOFT*"", ""*O=NANO SECURITY*"", ""*O=SUPERANTISPYWARE.COM*"", ""*O=DOCTOR WEB*"", ""*O=MALWAREBYTES*"", ""*O=ESET*"", ""*O=AVIRA*"", ""*O=WEBROOT*"") by  Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.registry_key_name Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_impair_defense_deny_security_software_with_applocker_filter`",100,"['T1562.001', 'T1562']","{'malware', 'registry modification', 'powershell', 'azorult'}",,"['applocker', 'malware', 'registry', 'security', 'av']"
s845,Windows Indirect Command Execution Via forfiles,"The following analytic detects programs that have been started by forfiles.exe. According to Microsoft, the 'The forfiles command lets you run a command on or pass arguments to multiple files'. While this tool can be used to start legitimate programs, usually within the context of a batch script, it has been observed being used to evade protections on command line execution.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process=""*forfiles* /c *"" by Processes.dest Processes.user Processes.parent_process Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_path | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_indirect_command_execution_via_forfiles_filter`",50,['T1202'],"{'exe', 'forfiles'}",341.0,"['forfiles', 'exe', 'programs', 'files', 'execution']"
s846,Windows Indirect Command Execution Via pcalua,"The following analytic detects programs that have been started by pcalua.exe. pcalua.exe is the Microsoft Windows Program Compatability Assistant.  While this tool can be used to start legitimate programs, it has been observed being used to evade protections on command line execution.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process=""*pcalua* -a*"" by Processes.dest Processes.user Processes.parent_process Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.process_path | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_indirect_command_execution_via_pcalua_filter`",50,['T1202'],{'exe'},80.0,"['exe', 'microsoft', 'pcalua', 'programs', 'program']"
s847,Windows Ingress Tool Transfer Using Explorer,"The following analytic detects an explorer.exe with a possible url link process command line on it. Explorer.exe is known windows process that handle start menu, taskbar ,desktop and file manager. So many threat actor abuses this process like DCRat malware, where it tries to open the url link with the default process browser application in the target host by putting the url link as a parameter on explorer.exe process. This anomaly detection might be a good pivot to check which user and how this process was executed, what is the parent process and what is the url link. This technique is not so common way to open an url link.","| tstats `security_content_summariesonly` min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = explorer.exe OR Processes.original_file_name = explorer.exe) AND NOT (Processes.parent_process_name IN(""userinit.exe"", ""svchost.exe"")) Processes.process IN (""* http://*"", ""* https://*"") by  Processes.parent_process_name Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_ingress_tool_transfer_using_explorer_filter`",50,['T1105'],"{'dark', 'dcrat', 'exe', 'browser', 'malware'}",,"['malware', 'explorer', 'exe', 'url', 'browser']"
s848,Windows InstallUtil Credential Theft,"The following analytic identifies the Windows InstallUtil.exe binary loading `vaultcli.dll` and Samlib.dll`. This technique may be used to execute code to bypassing application control and capture credentials by utilizing a tool like MimiKatz. \
When `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \
If used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \
During triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.","`sysmon` EventCode=7  parent_process_name=installutil.exe ImageLoaded IN (""*\\samlib.dll"", ""*\\vaultcli.dll"") | stats count min(_time) as firstTime max(_time) as lastTime by Computer, parent_process_name, ImageLoaded, OriginalFileName, ProcessId | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_credential_theft_filter`",80,"['T1218.004', 'T1218']","{'dll', 'signed binary', 'exe', 'powershell', 'mimikatz'}",,"['installutil', 'executable', 'vaultcli', 'dll', 'exe']"
s849,Windows InstallUtil in Non Standard Path,The following analytic identifies the Windows binary InstallUtil.exe running from a non-standard location. The analytic utilizes a macro for InstallUtil and identifies both the process_name and original_file_name.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes where `process_installutil` NOT (Processes.process_path IN (""*\\Windows\\ADWS\\*"",""*\\Windows\\SysWOW64*"", ""*\\Windows\\system32*"", ""*\\Windows\\NetworkController\\*"", ""*\\Windows\\SystemApps\\*"", ""*\\WinSxS\\*"", ""*\\Windows\\Microsoft.NET\\*"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id Processes.process_hash | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_in_non_standard_path_filter`",70,"['T1036', 'T1036.003', 'T1218', 'T1218.004']","{'signed binary', 'exe', 'whispergate'}",,"['installutil', 'process_name', 'original_file_name', 'exe', 'binary']"
s850,Windows InstallUtil Remote Network Connection,"The following analytic identifies the Windows InstallUtil.exe binary making a remote network connection. This technique may be used to download and execute code while bypassing application control. \
When `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \
If used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \
During triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.",| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_installutil` by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time dest parent_process_name process_name process_path process process_id dest_port C2 | `windows_installutil_remote_network_connection_filter`,80,"['T1218.004', 'T1218']","{'signed binary', 'exe', 'powershell'}",114.0,"['installutil', 'executable', 'exe', 'powershell', 'process']"
s851,Windows InstallUtil Uninstall Option,"The following analytic identifies the Windows InstallUtil.exe binary. This will execute code while bypassing application control using the `/u` (uninstall) switch. \
InstallUtil uses the functions install and uninstall within the System.Configuration.Install namespace to process .net assembly. Install function requires admin privileges, however, uninstall function can be run as an unprivileged user.\
When `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \
If used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \
During triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_installutil` Processes.process IN (""*/u*"", ""*uninstall*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_uninstall_option_filter`",80,"['T1218.004', 'T1218']","{'signed binary', 'exe', 'powershell'}",114.0,"['executable', 'installutil', 'uninstall', 'powershell', 'exe']"
s852,Windows InstallUtil Uninstall Option with Network,"The following analytic identifies the Windows InstallUtil.exe binary making a remote network connection. This technique may be used to download and execute code while bypassing application control using the `/u` (uninstall) switch. \
InstallUtil uses the functions install and uninstall within the System.Configuration.Install namespace to process .net assembly. Install function requires admin privileges, however, uninstall function can be run as an unprivileged user.\
When `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \
If used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \
During triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_installutil` Processes.process IN (""*/u*"", ""*uninstall*"") by _time span=1h  Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port != 0 by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port | `drop_dm_object_name(All_Traffic)` | rename dest as C2 ] | table _time dest parent_process_name process_name process_path process process_id dest_port C2 | `windows_installutil_uninstall_option_with_network_filter`",80,"['T1218.004', 'T1218']","{'signed binary', 'exe', 'powershell'}",114.0,"['executable', 'installutil', 'uninstall', 'powershell', 'exe']"
s853,Windows InstallUtil URL in Command Line,"The following analytic identifies the Windows InstallUtil.exe binary passing a HTTP request on the command-line. This technique may be used to download and execute code while bypassing application control. \
When `InstallUtil.exe` is used in a malicous manner, the path to an executable on the filesystem is typically specified. Take note of the parent process. In a suspicious instance, this will be spawned from a non-standard process like `Cmd.exe`, `PowerShell.exe` or `Explorer.exe`. \
If used by a developer, typically this will be found with multiple command-line switches/arguments and spawn from Visual Studio. \
During triage review resulting network connections, file modifications, and parallel processes. Capture any artifacts and review further.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_installutil` Processes.process IN (""*http://*"",""*https://*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_installutil_url_in_command_line_filter`",80,"['T1218.004', 'T1218']","{'signed binary', 'exe', 'powershell'}",114.0,"['installutil', 'executable', 'exe', 'powershell', 'process']"
s854,Windows Invalid Users Failed Authentication via Kerberos,"The following analytic identifies one source endpoint failing to authenticate with multiple invalid domain users using the Kerberos protocol. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment using Kerberos to obtain initial access or elevate privileges. As attackers progress in a breach, mistakes will be made. In certain scenarios, adversaries may execute a password spraying attack using an invalid list of users. Event 4768 is generated every time the Key Distribution Center issues a Kerberos Ticket Granting Ticket (TGT). Failure code 0x6 stands for `client not found in Kerberos database` (the attempted user is not a valid domain user).\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will only trigger on domain controllers, not on member servers or workstations.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source ip and attempted user accounts.","`wineventlog_security` EventCode=4768 Result_Code=0x6 Account_Name!=""*$"" | bucket span=2m _time | stats dc(Account_Name) AS unique_accounts values(Account_Name) as tried_accounts by _time, Client_Address | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by Client_Address | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `windows_invalid_users_failed_authentication_via_kerberos_filter` ",70,"['T1110.003', 'T1110']","{'kerberos', 'authenticate'}",338.0,"['kerberos', 'security', 'authenticate', 'analytics', 'attackers']"
s855,Windows ISO LNK File Creation,"The following analytic identifies the use of a delivered ISO file that has been mounted and the afformention lnk or file opened within it. When the ISO file is opened, the files are saved in the %USER%\AppData\Local\Temp\<random folder name>\ path. The analytic identifies .iso.lnk written to the path. The name of the ISO file is prepended.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN (""*\\Microsoft\\Windows\\Recent\\*"") Filesystem.file_name IN (""*.iso.lnk"") by Filesystem.file_create_time Filesystem.process_id Filesystem.file_name Filesystem.file_path Filesystem.dest | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_iso_lnk_file_creation_filter`",80,"['T1566.001', 'T1566', 'T1204.001', 'T1204']","{'ps1', 'nobelium'}",18.0,"['iso', 'file', 'files', 'folder', 'analytic']"
s856,Windows Kerberos Local Successful Logon,"The following analytic identifies a local successful authentication event on a Windows endpoint using the Kerberos package. The target user security identified will be set to the built-in local Administrator account, along with the remote address as localhost - 127.0.0.1. This may be indicative of a kerberos relay attack. Upon triage, review for recently ran binaries on disk. In addition, look for new computer accounts added to Active Directory and other anomolous AD events.","`wineventlog_security`  EventCode=4624 Logon_Type=3 Authentication_Package=Kerberos action=success src_ip=127.0.0.1 | stats count min(_time) as firstTime max(_time) as lastTime by dest, subject, action, Security_ID, user, Account_Name, src_ip | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_kerberos_local_successful_logon_filter`",80,['T1558'],{'kerberos'},225.0,"['authentication', 'localhost', 'kerberos', 'administrator', 'local']"
s857,Windows KrbRelayUp Service Creation,The following analytic identifies the default service name created by KrbRelayUp. Defenders should be aware that attackers could change the hardcoded service name of the KrbRelayUp tool and bypass this detection.,"`wineventlog_system` EventCode=7045 Service_Name IN (""KrbSCM"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_krbrelayup_service_creation_filter`",80,['T1543.003'],,355.0,"['krbrelayup', 'service', 'attackers', 'defenders', 'default']"
s858,Windows Linked Policies In ADSI Discovery,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain groups. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate domain organizational unit for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText = ""*[adsisearcher]*"" ScriptBlockText = ""*objectcategory=organizationalunit*"" ScriptBlockText = ""*findAll()*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_linked_policies_in_adsi_discovery_filter`",50,"['T1087.002', 'T1087']","{'industroyer2', 'industroyer', 'powershell', 'leverage'}",307.0,"['powershell', 'adsisearcher', 'groups', 'script', 'logging']"
s859,Windows Modify Registry Disable Toast Notifications,The following analytic is to identify a modification in the Windows registry to disable toast notifications. This Windows Operating System feature is responsible for alerting or notifying user if application or OS need some updates. Adversaries and malwares like Azorult abuse this technique to disable important update notification in compromised host. This anomaly detection is a good pivot to look for further events related to defense evasion and execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications\\ToastEnabled*"" Registry.registry_value_data=""0x00000000"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_disable_toast_notifications_filter`",70,['T1112'],"{'malware', 'azorult'}",,"['notifications', 'alerting', 'notification', 'malwares', 'toast']"
s860,Windows Modify Registry Disable Windows Security Center Notif,The following analytic is to identify a modification in the Windows registry to disable windows center notifications. This Windows Operating System feature is responsible for alerting or notifying user if application or OS need some updates. Adversaries and malwares like Azorult abuse this technique to disable important update notification in compromised host. This anomaly detection is a good pivot to look for further events related to defense evasion and execution.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Windows\\CurrentVersion\\ImmersiveShell\\UseActionCenterExperience*"" Registry.registry_value_data=""0x00000000"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_disable_windows_security_center_notif_filter`",70,['T1112'],"{'malware', 'registry modification', 'azorult'}",,"['notifications', 'malwares', 'notification', 'alerting', 'registry']"
s861,Windows Modify Registry Disable Win Defender Raw Write Notif,The following analytic identifies a modification in the Windows registry to disable Windows Defender raw write notification feature. This policy controls whether raw volume write notifications are sent to behavior monitoring or not. This registry was recently identified in Azorult malware to bypass Windows Defender detections or behavior monitoring in terms of volume write.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Windows Defender\\Real-Time Protection\\DisableRawWriteNotification*"" Registry.registry_value_data=""0x00000001"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_disable_win_defender_raw_write_notif_filter`",70,['T1112'],"{'malware', 'registry modification', 'azorult'}",,"['malware', 'registry', 'disable', 'notifications', 'notification']"
s862,Windows Modify Registry Disabling WER Settings,"The following analytic identifies a modification in the Windows registry to disable Windows error reporting settings. This Windows feature allows the user to report bugs, errors, failure or problems encountered in specific application or processes. Adversaries use this technique to hide any error or failure that some of its malicious components trigger.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\disable*"" Registry.registry_value_data=""0x00000001"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_disabling_wer_settings_filter`",70,['T1112'],"{'registry modification', 'azorult'}",,"['registry', 'disable', 'windows', 'errors', 'reporting']"
s863,Windows Modify Registry DisAllow Windows App,The following analytic identifies modification in the Windows registry to prevent user running specific computer programs that could aid them in manually removing malware or detecting it using security products. This technique was recently identified in Azorult malware where it uses this registry value to prevent several AV products to execute on the compromised host machine.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun*"" Registry.registry_value_data=""0x00000001"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_disallow_windows_app_filter`",70,['T1112'],"{'malware', 'registry modification', 'azorult'}",,"['malware', 'registry', 'security', 'av', 'compromised']"
s864,Windows Modify Registry Regedit Silent Reg Import,The following analytic identifies modification of Windows registry using regedit.exe application with silent mode parameter. regedit.exe windows application is commonly used as GUI app to check or modify registry. This application is also has undocumented command-line parameter and one of those are silent mode parameter that performs action without stopping for confirmation with dialog box. Importing registry from .reg files need to monitor in a production environment since it can be used adversaries to import RMS registry in compromised host.,"| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""regedit.exe"" OR Processes.original_file_name=""regedit.exe"") AND Processes.process=""* /s *"" AND Processes.process=""*.reg*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_regedit_silent_reg_import_filter`",70,['T1112'],"{'registry modification', 'exe', 'rms', 'azorult'}",,"['registry', 'regedit', 'reg', 'exe', 'application']"
s865,Windows Modify Registry Suppress Win Defender Notif,The following analytic is to identify a modification in the Windows registry to suppress windows defender notification. This technique was abuse by adversaries and threat actor to bypassed windows defender on the targeted host. Azorult malware is one of the malware use this technique that also disable toast notification and other windows features as part of its malicious behavior.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Windows Defender\\UX Configuration\\Notification_Suppress*"" Registry.registry_value_data=""0x00000001"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_modify_registry_suppress_win_defender_notif_filter`",70,['T1112'],"{'malware', 'registry modification', 'azorult'}",,"['malware', 'malicious', 'registry', 'notification', 'disable']"
s866,Windows Modify Show Compress Color And Info Tip Registry,This analytic is to look for suspicious registry modification related to file compression color and information tips. This IOC was seen in hermetic wiper where it has a thread that will create this registry entry to change the color of compressed or encrypted files in NTFS file system as well as the pop up information tips. This is a good indicator that a process tries to modified one of the registry GlobalFolderOptions related to file compression attribution in terms of color in NTFS file system.,"| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path = ""*\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced*"" AND Registry.registry_value_name  IN(""ShowCompColor"", ""ShowInfoTip"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_modify_show_compress_color_and_info_tip_registry_filter`",50,['T1112'],"{'ntfs', 'hermeticwiper', 'registry modification', 'wiper'}",,"['ntfs', 'registry', 'color', 'files', 'file']"
s867,Windows MOF Event Triggered Execution via WMI,"The following anaytic identifies MOFComp.exe loading a MOF file. The Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. Typically, MOFComp.exe does not reach out to the public internet or load a MOF file from User Profile paths. A filter and consumer is typically registered in WMI. Review parallel processes and query WMI subscriptions to gather artifacts. The default path of mofcomp.exe is C:\Windows\System32\wbem.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name IN (""cmd.exe"", ""powershell.exe"") Processes.process_name=mofcomp.exe) OR (Processes.process_name=mofcomp.exe Processes.process IN (""*\\AppData\\Local\\*"",""*\\Users\\Public\\*"", ""*\\WINDOWS\\Temp\\*"")) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_mof_event_triggered_execution_via_wmi_filter`",80,['T1546.003'],"{'exe', 'wmi'}",356.0,"['mofcomp', 'mof', 'wmi', 'exe', 'processes']"
s868,Windows MSIExec DLLRegisterServer,"The following analytic identifies the usage of msiexec.exe using the /y switch parameter, which grants the ability for msiexec to load DLLRegisterServer. Upon triage, review parent process and capture any artifacts for further review.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_msiexec` Processes.process IN (""*/y*"", ""*-y*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_msiexec_dllregisterserver_filter`",70,['T1218.007'],"{'dll', 'exe', 'msiexec'}",357.0,"['msiexec', 'dllregisterserver', 'exe', 'parameter', 'process']"
s869,Windows MSIExec Remote Download,"The following analytic identifies msiexec.exe with http in the command-line. This procedure will utilize msiexec.exe to download a remote file and load it. During triage, review parallel processes and capture any artifacts on disk for review.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_msiexec` Processes.process IN (""*http://*"", ""*https://*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_msiexec_remote_download_filter`",70,['T1218.007'],"{'exe', 'msiexec'}",357.0,"['msiexec', 'exe', 'http', 'download', 'file']"
s870,Windows MSIExec Spawn Discovery Command,"The following analytic identifies MSIExec spawning multiple discovery commands, including spawning Cmd.exe or PowerShell.exe. Typically, child processes are not common from MSIExec other than MSIExec spawning itself.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=msiexec.exe Processes.process_name IN (""powershell.exe"",""cmd.exe"", ""nltest.exe"",""ipconfig.exe"",""systeminfo.exe"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_msiexec_spawn_discovery_command_filter`",70,['T1218.007'],"{'ipconfig', 'nltest', 'systeminfo', 'exe', 'powershell', 'msiexec'}",,"['msiexec', 'cmd', 'exe', 'powershell', 'processes']"
s871,Windows MSIExec Unregister DLLRegisterServer,"The following analytic identifies the usage of msiexec.exe using the /z switch parameter, which grants the ability for msiexec to unload DLLRegisterServer. Upon triage, review parent process and capture any artifacts for further review.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_msiexec` Processes.process IN (""*/z*"", ""*-z*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_msiexec_unregister_dllregisterserver_filter`",70,['T1218.007'],"{'dll', 'exe', 'msiexec'}",357.0,"['msiexec', 'dllregisterserver', 'exe', 'unload', 'parameter']"
s872,Windows MSIExec With Network Connections,"The following analytic identifies MSIExec with any network connection over port 443 or 80. Typically, MSIExec does not perform network communication to the internet.","| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes where `process_msiexec` by _time Processes.process_id Processes.process_name Processes.dest Processes.process_path Processes.process Processes.parent_process_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | join  process_id [| tstats `security_content_summariesonly` count FROM datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port IN (""80"",""443"") by All_Traffic.process_id All_Traffic.dest All_Traffic.dest_port All_Traffic.dest_ip | `drop_dm_object_name(All_Traffic)` ] | table _time dest parent_process_name process_name process_path process process_id dest_port dest_ip | `windows_msiexec_with_network_connections_filter`",70,['T1218.007'],"{'msiexec', 'network'}",357.0,"['msiexec', 'connection', 'port', 'network', '443']"
s873,Windows NirSoft AdvancedRun,The following analytic identifies the use of AdvancedRun.exe. AdvancedRun.exe has similar capabilities as other remote programs like psexec. AdvancedRun may also ingest a configuration file with all settings defined and perform its activity. The analytic is written in a way to identify a renamed binary and also the common command-line arguments.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=advancedrun.exe OR Processes.original_file_name=advancedrun.exe) Processes.process IN (""*EXEFilename*"",""*/cfg*"",""*RunAs*"", ""*WindowState*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_nirsoft_advancedrun_filter`",60,['T1588.002'],"{'psexec', 'exe', 'whispergate'}",,"['advancedrun', 'psexec', 'exe', 'programs', 'command']"
s874,Windows NirSoft Utilities,"The following hunting analytic assists with identifying the proces execution of commonly used utilities from NirSoft. Potentially not adversary behavior, but worth identifying to know if the software is present and being used.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_path Processes.process_id Processes.parent_process_id | `drop_dm_object_name(""Processes"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `is_nirsoft_software` | `windows_nirsoft_utilities_filter`",80,['T1588.002'],{'whispergate'},,"['nirsoft', 'utilities', 'execution', 'software', 'proces']"
s875,Windows Non-System Account Targeting Lsass,"The following analytic identifies non SYSTEM accounts requesting access to lsass.exe. This behavior may be related to credential dumping or applications requiring access to credentials. Triaging this event will require understanding the GrantedAccess from the SourceImage. In addition, whether the account is privileged or not. Review the process requesting permissions and review parallel processes.","`sysmon` EventCode=10 TargetImage=*lsass.exe NOT (SourceUser=""NT AUTHORITY\\*"") | stats count min(_time) as firstTime max(_time) as lastTime by Computer, TargetImage, GrantedAccess, SourceImage, SourceProcessId, SourceUser, TargetUser | rename Computer as dest | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_non_system_account_targeting_lsass_filter`",80,"['T1003.001', 'T1003']","{'permission', 'powersploit', 'mimikatz', 'ps1', 'lsass'}",,"['lsass', 'permissions', 'access', 'grantedaccess', 'credentials']"
s876,Windows Odbcconf Hunting,The following analytic identifies Odbcconf.exe running in the environment to assist with identifying tuning higher fidelity analytics related to Odbcconf.exe.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=odbcconf.exe by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_odbcconf_hunting_filter`,30,['T1218.008'],{'exe'},333.0,"['odbcconf', 'analytics', 'exe', 'fidelity', 'environment']"
s877,Windows Odbcconf Load DLL,"The following analytic identifies odbcconf.exe, Windows Open Database Connectivity utility, utilizing the action function of regsvr to load a DLL. An example will look like - odbcconf.exe /A { REGSVR T1218-2.dll }. During triage, review parent process, parallel procesess and file modifications.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=odbcconf.exe Processes.process IN (""*/a *"",  ""*-a*"") Processes.process=""*regsvr*""  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_odbcconf_load_dll_filter`",60,['T1218.008'],"{'dll', 'exe'}",358.0,"['odbcconf', 'dll', 'exe', 'database', 'file']"
s878,Windows Odbcconf Load Response File,"The following analytic identifies the odbcconf.exe, Windows Open Database Connectivity utility, loading up a resource file. The file extension is arbitrary and may be named anything. The resource file itself may have different commands supported by Odbcconf to load up a DLL (REGSVR) on disk or additional commands. During triage, review file modifications and parallel processes.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=odbcconf.exe Processes.process IN (""*-f *"",""*/f *"") Processes.process=""*.rsp*""  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_odbcconf_load_response_file_filter`",60,['T1218.008'],"{'dll', 'exe'}",358.0,"['odbcconf', 'dll', 'database', 'file', 'exe']"
s879,Windows Office Product Spawning MSDT,"The following analytic identifies a Microsoft Office product spawning the Windows msdt.exe process. MSDT is a Diagnostics Troubleshooting Wizard native to Windows. This behavior is related to a recently identified sample utilizing protocol handlers to evade preventative controls, including if macros are disabled in the document. During triage, review file modifications for html. In addition, parallel processes including PowerShell and CertUtil.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""winword.exe"",""excel.exe"",""powerpnt.exe"",""outlook.exe"",""mspub.exe"",""visio.exe"") Processes.process_name=msdt.exe by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_office_product_spawning_msdt_filter`",100,"['T1566', 'T1566.001']","{'cve-2022-30190', 'exe', 'powershell', 'certutil', 'doublepulsar'}",,"['msdt', 'microsoft', 'exe', 'processes', 'windows']"
s880,Windows Possible Credential Dumping,"The following analytic is an enhanced version of two previous analytics that identifies common GrantedAccess permission requests and CallTrace DLLs in order to detect credential dumping. \
GrantedAccess is the requested permissions by the SourceImage into the TargetImage. \
CallTrace Stack trace of where open process is called. Included is the DLL and the relative virtual address of the functions in the call stack right before the open process call. \
dbgcore.dll or dbghelp.dll  are two core Windows debug DLLs that have minidump functions which provide a way for applications to produce crashdump files that contain a useful subset of the entire process context. \
The idea behind using ntdll.dll is to blend in by using native api of ntdll.dll. For example in sekurlsa module there are many ntdll exported api, like RtlCopyMemory, used to execute this module which is related to lsass dumping.","`sysmon` EventCode=10 TargetImage=*\\lsass.exe GrantedAccess IN (""0x01000"", ""0x1010"", ""0x1038"", ""0x40"", ""0x1400"", ""0x1fffff"", ""0x1410"", ""0x143a"", ""0x1438"", ""0x1000"") CallTrace IN (""*dbgcore.dll*"", ""*dbghelp.dll*"", ""*ntdll.dll*"", ""*kernelbase.dll*"", ""*kernel32.dll*"") NOT SourceUser IN (""NT AUTHORITY\\SYSTEM"", ""NT AUTHORITY\\NETWORK SERVICE"")| stats count min(_time) as firstTime max(_time) as lastTime by, Computer, SourceImage, GrantedAccess, TargetImage, SourceProcessId, SourceUser, TargetUser | rename Computer as dest | `security_content_ctime(firstTime)`|`security_content_ctime(lastTime)` | `windows_possible_credential_dumping_filter`",80,"['T1003.001', 'T1003']","{'dll', 'cobalt strike', 'powersploit', 'mimikatz', 'ps1', 'lsass', 'darkside'}",,"['dlls', 'dll', 'crashdump', 'ntdll', 'calltrace']"
s881,Windows Powershell Import Applocker Policy,The following analytic is to identify the imports of Windows PowerShell Applocker commandlets. This technique was seen in Azorult malware where it drops an xml Applocker policy that will deny several AV product and then loaded using PowerShell Applocker commandlet.,"`powershell` EventCode=4104 ScriptBlockText=""*Import-Module Applocker*"" ScriptBlockText=""*Set-AppLockerPolicy *"" ScriptBlockText=""* -XMLPolicy *"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_powershell_import_applocker_policy_filter`",70,['T1059.001'],"{'malware', 'powershell', 'azorult'}",,"['applocker', 'malware', 'powershell', 'imports', 'commandlet']"
s882,Windows PowerView Constrained Delegation Discovery,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify commandlets used by the PowerView hacking tool leveraged to discover Windows endpoints with Kerberos Constrained Delegation. Red Teams and adversaries alike may leverage use this technique for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (Message = ""*Get-DomainComputer*"" OR Message = ""*Get-NetComputer*"") AND (Message = ""*-TrustedToAuth*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_powerview_constrained_delegation_discovery_filter`",50,['T1018'],"{'leverage', 'powershell'}",307.0,"['powershell', 'hacking', 'commandlets', 'logging', 'eventcode']"
s883,Windows PowerView Kerberos Service Ticket Request,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainSPNTicket` commandlets with specific parameters. This commandlet is a part of PowerView, a PowerShell tool used to perform enumeration and discovery on Windows Active Directory networks. As the name suggests, this commandlet is used to request the kerberos ticket for a specified service principal name (SPN). Once the ticket is received, it may be cracked using password cracking tools like hashcat to extract the password of the SPN account. Red Teams and adversaries alike may leverage PowerView and these commandlets to identify accounts that can be attacked with the Kerberoasting technique.",`powershell` EventCode=4104 ScriptBlockText=*Get-DomainSPNTicket* | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_powerview_kerberos_service_ticket_request_filter`,30,"['T1558', 'T1558.003']","{'powersploit', 'password', 'powershell', 'kerberos', 'ps1', 'leverage'}",,"['domainspnticket', 'kerberos', 'kerberoasting', 'powershell', 'password']"
s884,Windows PowerView SPN Discovery,"The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the execution of the `Get-DomainUser` or `Get-NetUSer` commandlets with specific parameters. These commandlets are part of PowerView, a PowerShell tool used to perform enumeration and discovery on Windows Active Directory networks. As the names suggest, these commandlets are used to identify domain users in a network and combining them with the `-SPN` parameter allows adversaries to discover domain accounts associated with a Service Principal Name (SPN). Red Teams and adversaries alike may leverage PowerView and these commandlets to identify accounts that can be attacked with the Kerberoasting technique.",`powershell` EventCode=4104 (ScriptBlockText =*Get-NetUser* OR ScriptBlockText=*Get-DomainUser*) ScriptBlockText= *-SPN* | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `windows_powerview_spn_discovery_filter`,30,"['T1558', 'T1558.003']","{'ps1', 'leverage', 'powershell', 'powersploit'}",,"['domainuser', 'netuser', 'powershell', 'commandlets', 'kerberoasting']"
s885,Windows PowerView Unconstrained Delegation Discovery,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify commandlets used by the PowerView hacking tool leveraged to discover Windows endpoints with Kerberos Unconstrained Delegation. Red Teams and adversaries alike may leverage use this technique for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 (Message = ""*Get-DomainComputer*"" OR Message = ""*Get-NetComputer*"") AND (Message = ""*-Unconstrained*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Message ComputerName User | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_powerview_unconstrained_delegation_discovery_filter`",50,['T1018'],"{'leverage', 'powershell'}",307.0,"['powershell', 'hacking', 'commandlets', 'eventcode', 'logging']"
s886,Windows Processes Killed By Industroyer2 Malware,The following analytic is to look for known processes killed by industroyer2 malware. This technique was seen in the industroyer2 malware attack that tries to kill several processes of windows host machines related to the energy facility network. This anomaly might be a good indicator to check which process kill these processes or why the process was killed.,"`sysmon` EventCode=5 process_name IN (""PServiceControl.exe"", ""PService_PPD.exe"") | stats min(_time) as firstTime max(_time) as lastTime count by process_name process process_path process_guid process_id EventCode dest user_id | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_processes_killed_by_industroyer2_malware_filter`",60,['T1489'],"{'malware', 'industroyer', 'industroyer2'}",232.0,"['malware', 'processes', 'industroyer2', 'process', 'anomaly']"
s887,Windows Process With NamedPipe CommandLine,"This analytic is to look for process commandline that contains named pipe. This technique was seen in some adversaries, threat actor and malware like olympic destroyer to communicate to its other child processes after process injection that serve as defense evasion and privilege escalation. On the other hand this analytic may catch some normal process that using this technique for example browser application. In that scenario we include common process path we've seen during testing that cause false positive which is the program files. False positive may still be arise if the normal application is in other folder path.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process = ""*\\\\.\\pipe\\*"" NOT (Processes.process_path IN (""*\\program files*"")) by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_path Processes.process_guid Processes.parent_process_id Processes.dest Processes.user Processes.process_path | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_process_with_namedpipe_commandline_filter`",70,['T1055'],"{'malware', 'olympic destroyer'}",139.0,"['processes', 'pipe', 'process', 'analytic', 'malware']"
s888,Windows Raccine Scheduled Task Deletion,"The following analytic identifies the Raccine Rules Updater scheduled task being deleted. Adversaries may attempt to remove this task in order to prevent the update of Raccine.  Raccine is a ""ransomware vaccine"" created by security researcher Florian Roth, designed to intercept and prevent precursors and active ransomware behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=schtasks.exe Processes.process=""*delete*"" AND Processes.process=""*Raccine*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_raccine_scheduled_task_deletion_filter`",80,['T1562.001'],"{'schtasks', 'blackbyte'}",359.0,"['raccine', 'ransomware', 'vaccine', 'updater', 'security']"
s889,Windows Rasautou DLL Execution,"The following analytic identifies the Windows Windows Remote Auto Dialer, rasautou.exe executing an arbitrary DLL. This technique is used to execute arbitrary shellcode or DLLs via the rasautou.exe LOLBin capability. During triage, review parent and child process behavior including file and image loads.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=rasautou.exe Processes.process=""* -d *""AND Processes.process=""* -p *"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id Processes.original_file_name | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_rasautou_dll_execution_filter`",80,"['T1055.001', 'T1218', 'T1055']","{'ps1', 'exe', 'dll', 'lolbin'}",57.0,"['dll', 'dlls', 'rasautou', 'dialer', 'exe']"
s890,Windows Raw Access To Disk Volume Partition,"This analytic is to look for suspicious raw access read to device disk partition of the host machine. This technique was seen in several attacks by adversaries or threat actor to wipe, encrypt or overwrite the boot sector of each partition as part of their impact payload for example the ""hermeticwiper"" malware. This detection is a good indicator that there is a process try to read or write on boot sector.","`sysmon` EventCode=9 Device = \\Device\\HarddiskVolume* NOT (Image IN(""*\\Windows\\System32\\*"", ""*\\Windows\\SysWOW64\\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by Image Device ProcessGuid ProcessId EventDescription EventCode Computer | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_raw_access_to_disk_volume_partition_filter`",90,"['T1561.002', 'T1561']","{'malware', 'hermeticwiper', 'wiper'}",,"['malware', 'disk', 'attacks', 'detection', 'device']"
s891,Windows Raw Access To Master Boot Record Drive,"This analytic is to look for suspicious raw access read to drive where the master boot record is placed. This technique was seen in several attacks by adversaries or threat actor to wipe, encrypt or overwrite the master boot record code as part of their impact payload. This detection is a good indicator that there is a process try to read or write on MBR sector.","`sysmon` EventCode=9 Device = \\Device\\Harddisk0\\DR0 NOT (Image IN(""*\\Windows\\System32\\*"", ""*\\Windows\\SysWOW64\\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by Computer Image Device ProcessGuid ProcessId EventDescription EventCode | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_raw_access_to_master_boot_record_drive_filter`",90,"['T1561.002', 'T1561']","{'wiper', 'whispergate'}",,"['mbr', 'boot', 'detection', 'sector', 'attacks']"
s892,Windows Registry Certificate Added,"The following analytic identifies installation of a root CA certificate by monitoring the registry. The base paths may be found [here](https://gist.github.com/mattifestation/75d6117707bcf8c26845b3cbb6ad2b6b/raw/ae65ef15c706140ffc2e165615204e20f2903028/RootCAInstallationDetection.xml). In short, there are specific certificate registry paths that will be written to (SetValue) when a new certificate is added. The high-fidelity events to pay attention to are SetValue events where the TargetObject property ends with ""<THUMBPRINT_VALUE>\Blob"" as this indicates the direct installation or modification of a root certificate binary blob. The other high fidelity reference will be which process is making the registry modifications. There are very few processes that modify these day to day, therefore monitoring for all to start (hunting) provides a great beginning.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path IN (""*\\certificates\\*"") AND Registry.registry_value_name=""Blob"" by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | join process_guid _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)`] | table _time dest user process_name process process_guid registry_path registry_value_name registry_value_data registry_key_name | `windows_registry_certificate_added_filter`",60,"['T1553.004', 'T1553']","{'root', 'registry modification'}",138.0,"['rootcainstallationdetection', 'certificate', 'registry', 'root', 'ca']"
s893,Windows Registry Delete Task SD,"The following analytic identifies a process attempting to delete a scheduled task SD (Security Descriptor) from within the registry path of that task. This may occur from a non-standard process running and may not come from reg.exe. This particular behavior will remove the actual Task Name from the Task Scheduler GUI and from the command-line query - schtasks.exe /query. In addition, in order to perform this action, the user context will need to be SYSTEM.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path IN (""*\\Schedule\\TaskCache\\Tree\\*"") Registry.user=""SYSTEM"" Registry.registry_value_name=""SD"" (Registry.action=Deleted OR Registry.action=modified) by _time  Registry.dest Registry.process_guid Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_key_name Registry.registry_value_data Registry.status Registry.action | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_registry_delete_task_sd_filter`",70,"['T1053.005', 'T1562']","{'schtasks', 'registry modification', 'tarrask'}",339.0,"['schtasks', 'task', 'registry', 'scheduler', 'delete']"
s894,Windows Registry Modification for Safe Mode Persistence,"The following analytic identifies a modification or registry add to the safeboot registry as an autostart mechanism. This technique is utilized by adversaries to persist a driver or service into Safe Mode. Two keys are monitored in this analytic,  Minimal and Network. adding values to Minimal will load into Safe Mode and by adding into Network it will provide the service or drive the ability to perform network connections in Safe Mode.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path IN (""*SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\*"",""*SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\*"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.process_guid Registry.registry_key_name Registry.registry_value_data | `drop_dm_object_name(Registry)` | join process_guid _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.process_guid | `drop_dm_object_name(Processes)`] | table _time dest user process_name process process_guid registry_path registry_value_name registry_value_data registry_key_name | `windows_registry_modification_for_safe_mode_persistence_filter`",60,"['T1547.001', 'T1547']","{'snatch', 'registry modification'}",29.0,"['safeboot', 'autostart', 'registry', 'safe', 'mode']"
s895,Windows Remote Access Software Hunt,"The following hunting analytic is meant to help organizations understand what remote access software is being used in the environment. When reviewing this hunt, confirm the software identified is authorized to be utilized. Based on fidelity, create a new analytic for specific utilities banned within the organization. Adversaries use these utilities to retain remote access capabilities to the environment. Utilities in the lookup include AnyDesk, GoToMyPC, LogMeIn, TeamViewer and much more. Review the lookup for the entire list and add any others.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime values(Processes.process) as process values(Processes.parent_process) as parent_process from datamodel=Endpoint.Processes where Processes.dest!=unknown Processes.user!=unknown by Processes.dest Processes.user Processes.process_name Processes.process | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `drop_dm_object_name(Processes)` | lookup remote_access_software remote_utility AS process_name OUTPUT isutility | search isutility = True | `windows_remote_access_software_hunt_filter`,10,['T1219'],{'bumblebee'},360.0,"['logmein', 'teamviewer', 'access', 'software', 'capabilities']"
s896,Windows Remote Access Software RMS Registry,The following analytic is to identify a modification or creation of Windows registry related to the Remote Manipulator System (RMS) Remote Admin tool. RMS is a legitimate tool developed by russian organization TektonIT and has been observed being abused by adversaries to gain remote access to the targeted host. Azorult malware utilized RMS to gain remote access.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\SYSTEM\\Remote Manipulator System*"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_remote_access_software_rms_registry_filter`",100,['T1219'],"{'malware', 'registry modification', 'rms', 'azorult'}",,"['registry', 'malware', 'tool', 'manipulator', 'admin']"
s897,Windows Remote Assistance Spawning Process,"The following analytic identifies the use of Microsoft Remote Assistance, msra.exe, spawning PowerShell.exe or cmd.exe as a child process. Msra.exe by default has no command-line arguments and typically spawns itself. It will generate a network connection to the remote system that is connected. This behavior is indicative of another process injected into msra.exe. Review the parent process or cross process events to identify source.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=msra.exe `windows_shells` by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_remote_assistance_spawning_process_filter`,80,['T1055'],"{'exe', 'powershell', 'qbot'}",80.0,"['msra', 'powershell', 'exe', 'microsoft', 'remote']"
s898,Windows Remote Services Allow Rdp In Firewall,"The following analytic is to identify a modification in the Windows firewall to enable remote desktop protocol on a targeted machine. This technique was seen in several adversaries, malware or red teamer to remotely access the compromised or targeted host by allowing this protocol in firewall. Even this protocol might be allowed in some production environment, This TTP behavior is a good pivot to check who and why the user want to enable this feature through firewall which is also common traits of attack to start lateral movement.","| tstats `security_content_summariesonly` values(Processes.process) as cmdline values(Processes.parent_process_name) as parent_process values(Processes.process_name) count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = ""netsh.exe"" OR Processes.original_file_name= ""netsh.exe"") AND Processes.process = ""*firewall*"" AND Processes.process = ""*add*"" AND Processes.process = ""*protocol=TCP*"" AND Processes.process = ""*localport=3389*"" AND Processes.process = ""*action=allow*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_remote_services_allow_rdp_in_firewall_filter`",70,"['T1021.001', 'T1021']","{'malware', 'netsh', 'azorult'}",,"['firewall', 'protocol', 'ttp', 'remotely', 'malware']"
s899,Windows Remote Services Allow Remote Assistance,"The following analytic is to identify a modification in the Windows registry to enable remote desktop assistance on a targeted machine. This technique was seen in several adversaries, malware or red teamer like azorult to remotely access the compromised or targeted host by enabling this protocol in registry. Even this protocol might be allowed in some production environment, This Anomaly behavior is a good pivot to check who and why the user want to enable this feature through registry which is un-common. And as per stated in microsoft documentation the default value of this registry is false that makes this a good indicator of suspicious behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Control\\Terminal Server\\fAllowToGetHelp*"" Registry.registry_value_data=""0x00000001"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_remote_services_allow_remote_assistance_filter`",70,"['T1021.001', 'T1021']","{'malware', 'registry modification', 'azorult'}",,"['malware', 'registry', 'anomaly', 'remotely', 'compromised']"
s900,Windows Remote Services Rdp Enable,"The following analytic is to identify a modification in the Windows registry to enable remote desktop protocol on a targeted machine. This technique was seen in several adversaries, malware or red teamer to remotely access the compromised or targeted host by enabling this protocol in registry. Even this protocol might be allowed in some production environment, This TTP behavior is a good pivot to check who and why the user want to enable this feature through registry which is un-common.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path= ""*\\Control\\Terminal Server\\fDenyTSConnections*"" Registry.registry_value_data=""0x00000000"" by Registry.registry_key_name Registry.user Registry.registry_path Registry.registry_value_data Registry.action Registry.dest | `drop_dm_object_name(Registry)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_remote_services_rdp_enable_filter`",70,"['T1021.001', 'T1021']","{'malware', 'registry modification', 'azorult'}",,"['registry', 'ttp', 'protocol', 'malware', 'remotely']"
s901,Windows Remote Service Rdpwinst Tool Execution,"The following analytic identifies RDPWInst.exe tool, which is a RDP wrapper library tool designed to enable remote desktop host support and concurrent RDP session on reduced functionality system. Unfortunately, this open project was abused by adversaries to enable RDP connection to the targeted host for remote access and potentially be for lateral movement.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=""RDPWInst.exe"" OR Processes.original_file_name=""RDPWInst.exe"") AND Processes.process IN (""* -i*"", ""* -s*"", ""* -o*"", ""* -w*"", ""* -r*"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_remote_service_rdpwinst_tool_execution_filter`",90,"['T1021.001', 'T1021']","{'exe', 'rdp', 'azorult'}",,"['rdpwinst', 'rdp', 'exe', 'session', 'desktop']"
s902,Windows Root Domain linked policies Discovery,The following analytic utilizes PowerShell Script Block Logging (EventCode=4104) to identify the `[Adsisearcher]` type accelerator being used to query Active Directory for domain groups. Red Teams and adversaries may leverage `[Adsisearcher]` to enumerate root domain linked policies for situational awareness and Active Directory Discovery.,"`powershell` EventCode=4104 ScriptBlockText = ""*[adsisearcher]*"" ScriptBlockText = ""*.SearchRooT*"" ScriptBlockText = ""*.gplink*"" | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer user_id | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_root_domain_linked_policies_discovery_filter`",50,"['T1087.002', 'T1087']","{'industroyer2', 'industroyer', 'powershell', 'leverage'}",307.0,"['powershell', 'adsisearcher', 'domain', 'groups', 'logging']"
s903,Windows Schtasks Create Run As System,The following analytic identifies Schtasks.exe creating a new task to start and run as an elevated user - SYSTEM. This is commonly used by adversaries to spawn a process in an elevated state.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_schtasks` Processes.process=""*/create *"" AND Processes.process=""*/ru *"" AND Processes.process=""*system*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_schtasks_create_run_as_system_filter`",80,"['T1053.005', 'T1053']","{'exe', 'schtasks', 'qbot'}",,"['schtasks', 'elevated', 'task', 'process', 'exe']"
s904,Windows Security Account Manager Stopped,The search looks for a Windows Security Account Manager (SAM) was stopped via command-line. This is consistent with Ryuk infections across a fleet of endpoints.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE (""Processes.process_name""=""net*.exe"" ""Processes.process""=""*stop \""samss\""*"") BY ""Processes.dest"", ""Processes.user"", ""Processes.process"" | `drop_dm_object_name(Processes)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `windows_security_account_manager_stopped_filter`",70,['T1489'],"{'stop', 'ryuk'}",,"['ryuk', 'search', 'sam', 'account', 'security']"
s905,Windows Service Created Within Public Path,"The following analytc uses Windows Event Id 7045, `New Service Was Installed`, to identify the creation of a Windows Service where the service binary path is located in public paths. This behavior could represent the installation of a malicious service. Red Teams and adversaries alike may create malicious Services for lateral movement or remote code execution","`wineventlog_system` EventCode=7045  Service_File_Name = ""*\.exe"" NOT (Service_File_Name IN (""C:\\Windows\\*"", ""C:\\Program File*"", ""C:\\Programdata\\*"", ""%systemroot%\\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by ComputerName EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_service_created_within_public_path_filter`",90,"['T1543', 'T1543.003']",,271.0,"['malicious', 'services', 'service', 'analytc', 'execution']"
s906,Windows Service Created With Suspicious Service Path,"The following analytc uses Windows Event Id 7045, `New Service Was Installed`, to identify the creation of a Windows Service where the service binary path path is located in a non-common Service folder in Windows. Red Teams and adversaries alike may create malicious Services for lateral movement or remote code execution as well as persistence and execution. The Clop ransomware has also been seen in the wild abusing Windows services."," `wineventlog_system` EventCode=7045  Service_File_Name = ""*\.exe"" NOT (Service_File_Name IN (""C:\\Windows\\*"", ""C:\\Program File*"", ""C:\\Programdata\\*"", ""%systemroot%\\*"")) | stats count min(_time) as firstTime max(_time) as lastTime by EventCode Service_File_Name Service_Name Service_Start_Type Service_Type | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_service_created_with_suspicious_service_path_filter`",70,"['T1569', 'T1569.002']",{'clop'},,"['ransomware', 'services', 'malicious', 'service', 'windows']"
s907,Windows Service Create Kernel Mode Driver,The following analytic identifes a new kernel driver being added to Windows using sc.exe. Adding a Kernel driver is not common day to day and should be investigated to further understand the source.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=sc.exe Processes.process=""*kernel*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_service_create_kernel_mode_driver_filter`",60,"['T1543.003', 'T1543', 'T1068']","{'exe', 'driver'}",347.0,"['driver', 'kernel', 'exe', 'windows', 'sc']"
s908,Windows Service Creation on Remote Endpoint,This analytic looks for the execution of `sc.exe` with command-line arguments utilized to create a Windows Service on a remote endpoint. Red Teams and adversaries alike may abuse the Service Control Manager for lateral movement and remote code execution.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=sc.exe OR Processes.original_file_name=sc.exe) (Processes.process=*\\\\* AND Processes.process=*create* AND Processes.process=*binpath*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_service_creation_on_remote_endpoint_filter`,90,"['T1543', 'T1543.003']",{'exe'},341.0,"['exe', 'endpoint', 'execution', 'sc', 'windows']"
s909,Windows Service Creation Using Registry Entry,"This analytic is to look for suspicious modification or creation of registry to have service entry. This technique is abused by adversaries or threat actor to persist, gain privileges in the machine or even lateral movement. This technique can be executed using reg.exe application or using windows API like for example the CrashOveride malware. This detection is a good indicator that a process is trying to create a service entry using registry ImagePath.","| tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Registry where Registry.registry_path=""*\\SYSTEM\\CurrentControlSet\\Services*"" Registry.registry_value_name = ImagePath by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data | `windows_service_creation_using_registry_entry_filter`",80,['T1574.011'],"{'malware', 'registry modification'}",161.0,"['registry', 'malware', 'application', 'service', 'process']"
s910,Windows Service Initiation on Remote Endpoint,This analytic looks for the execution of `sc.exe` with command-line arguments utilized to start a Windows Service on a remote endpoint. Red Teams and adversaries alike may abuse the Service Control Manager for lateral movement and remote code execution.,| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name=sc.exe OR Processes.original_file_name=sc.exe) (Processes.process=*\\\\* AND Processes.process=*start*) by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `windows_service_initiation_on_remote_endpoint_filter`,90,"['T1543', 'T1543.003']",{'exe'},341.0,"['exe', 'endpoint', 'execution', 'sc', 'service']"
s911,Windows Service Stop By Deletion,"The following analytic identifies Windows Service Control, `sc.exe`, attempting to delete a service. This is typically identified in parallel with other instances of service enumeration of attempts to stop a service and then delete it. Adversaries utilize this technique to terminate security services or other related services to continue there objective and evade detections.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = sc.exe OR Processes.original_file_name = sc.exe) Processes.process=""* delete *"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_service_stop_by_deletion_filter`",70,['T1489'],"{'exe', 'stop', 'azorult'}",,"['services', 'service', 'exe', 'terminate', 'security']"
s912,Windows System File on Disk,"The following hunting analytic will assist with identifying new .sys files introduced in the environment. This query is meant to identify sys file creates on disk. There will be noise, but reducing common process names or applications should help to limit any volume. The idea is to identify new sys files written to disk and identify them before they're added as a new kernel mode driver.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_name=""*.sys*"" by _time span=1h Filesystem.dest Filesystem.file_create_time Filesystem.file_name Filesystem.file_path Filesystem.file_hash | `drop_dm_object_name(Filesystem)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `windows_system_file_on_disk_filter`",20,['T1068'],,7.0,"['sys', 'kernel', 'disk', 'new', 'noise']"
s913,Windows System LogOff Commandline,"The following analytic identifies Windows commandline to logoff a windows host machine. This technique was seen in several APT, RAT like dcrat and other commodity malware to shutdown the machine to add more impact, interrupt access, aid destruction of the system like wiping disk or inhibit system recovery. This TTP is a good pivot to check why application trigger this commandline which is not so common way to logoff a machine.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = shutdown.exe OR Processes.original_file_name = shutdown.exe) Processes.process=""*shutdown*"" Processes.process=""* /l*"" Processes.process=""* /t*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_system_logoff_commandline_filter`",70,['T1529'],"{'malware', 'dark', 'dcrat'}",54.0,"['logoff', 'malware', 'commandline', 'windows', 'shutdown']"
s914,Windows System Reboot CommandLine,"The following analytic identifies Windows commandline to reboot a windows host machine. This technique was seen in several APT, RAT like dcrat and other commodity malware to shutdown the machine to add more impact, interrupt access, aid destruction of the system like wiping disk or inhibit system recovery. This TTP is a good pivot to check why application trigger this commandline which is not so common way to reboot a machine. Compare to shutdown and logoff shutdown.exe feature, reboot seen in some automation script like ansible to reboot the machine.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = shutdown.exe OR Processes.original_file_name = shutdown.exe) Processes.process=""*shutdown*"" Processes.process=""* /r*"" Processes.process=""* /t*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_system_reboot_commandline_filter`",60,['T1529'],"{'malware', 'dark', 'dcrat'}",54.0,"['shutdown', 'reboot', 'commandline', 'malware', 'windows']"
s915,Windows System Shutdown CommandLine,"The following analytic identifies Windows commandline to shutdown a windows host machine. This technique was seen in several APT, RAT like dcrat and other commodity malware to shutdown the machine to add more impact, interrupt access, aid destruction of the system like wiping disk or inhibit system recovery. This TTP is a good pivot to check why application trigger this commandline which is not so common way to shutdown a machine.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.process_name = shutdown.exe OR Processes.original_file_name = shutdown.exe) Processes.process=""*shutdown*"" Processes.process=""* /s*"" Processes.process=""* /t*"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_system_shutdown_commandline_filter`",70,['T1529'],"{'malware', 'dark', 'dcrat'}",54.0,"['shutdown', 'commandline', 'malware', 'windows', 'destruction']"
s916,Windows System Time Discovery W32tm Delay,"The following analytic identifies DCRat delay time tactics using w32tm. This technique was seen in DCRAT malware where it uses stripchart function of w32tm.exe application to delay the execution of its payload like c2 communication , beaconing and execution. This anomaly detection may help the analyst to check other possible event like the process who execute this command that may lead to DCRat attack.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name = w32tm.exe Processes.process= ""* /stripchart *"" Processes.process= ""* /computer:localhost *"" Processes.process= ""* /period:*"" Processes.process= ""* /dataonly *"" Processes.process= ""* /samples:*"" by  Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_system_time_discovery_w32tm_delay_filter`",60,['T1124'],"{'malware', 'dark', 'dcrat'}",,"['w32tm', 'dcrat', 'malware', 'delay', 'anomaly']"
s917,Windows Terminating Lsass Process,This analytic is to detect a suspicious process terminating Lsass process. Lsass process is known to be a critical process that is responsible for enforcing security policy system. This process was commonly targetted by threat actor or red teamer to gain privilege escalation or persistence in the targeted machine because it handles credentials of the logon users. In this analytic we tried to detect a suspicious process having a granted access PROCESS_TERMINATE to lsass process to modify or delete protected registrys. This technique was seen in doublezero malware that tries to wipe files and registry in compromised hosts. This anomaly detection can be a good pivot of incident response for possible credential dumping or evading security policy in a host or network environment.,"`sysmon` EventCode=10 TargetImage=*lsass.exe GrantedAccess = 0x1 | stats count min(_time) as firstTime max(_time) as lastTime by SourceImage, TargetImage, TargetProcessId, SourceProcessId, GrantedAccess CallTrace, Computer | rename Computer as dest | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_terminating_lsass_process_filter`",80,"['T1562.001', 'T1562']","{'malware', 'doublezero', 'lsass'}",87.0,"['malware', 'lsass', 'security', 'compromised', 'anomaly']"
s918,Windows Users Authenticate Using Explicit Credentials,"The following analytic identifies a source user failing to authenticate with multiple users using explicit credentials on a host. This behavior could represent an adversary performing a Password Spraying attack against an Active Directory environment to obtain initial access or elevate privileges. Event 4648 is generated when a process attempts an account logon by explicitly specifying that accounts credentials. This event generates on domain controllers, member servers, and workstations.\
The detection calculates the standard deviation for each host and leverages the 3-sigma statistical rule to identify an unusual number of users. To customize this analytic, users can try different combinations of the `bucket` span time and the calculation of the `upperBound` field. This logic can be used for real time security monitoring as well as threat hunting exercises.\
This detection will trigger on the potenfially malicious host, perhaps controlled via a trojan or operated by an insider threat, from where a password spraying attack is being executed.\
The analytics returned fields allow analysts to investigate the event further by providing fields like source account, attempted user accounts and the endpoint were the behavior was identified."," `wineventlog_security` EventCode=4648 | bucket span=2m _time | eval Source_Account = mvindex(Account_Name, 0) | eval Destination_Account = mvindex(Account_Name, 1) | search Source_Account != ""*$"" Source_Account !=""-"" Destination_Account !=""*$"" | stats dc(Destination_Account) AS unique_accounts values(Destination_Account) as tried_account by _time, ComputerName, Source_Account | eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts) as comp_std by ComputerName | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts > 10 and unique_accounts >= upperBound, 1, 0) | search isOutlier=1 | `windows_users_authenticate_using_explicit_credentials_filter` ",70,"['T1110.003', 'T1110']",,338.0,"['analytics', 'security', 'monitoring', 'statistical', 'credentials']"
s919,Windows Valid Account With Never Expires Password,"The following analytic identifies net.exe updating user account policies for password requirement with non-expiring password. This technique was seen in several adversaries and malware like Azorult to maintain the foothold (persistence), gaining privilege escalation, defense evasion and possible for lateral movement for specific users or created user account on the targeted host. This TTP detections is a good pivot to see further what other events that users executes on the machines.","| tstats `security_content_summariesonly` values(Processes.process) as process min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_net` AND Processes.process=""* accounts *"" AND Processes.process=""* /maxpwage:unlimited"" by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_valid_account_with_never_expires_password_filter`",100,['T1489'],"{'password', 'net.exe', 'exe', 'azorult', 'malware'}",,"['malware', 'password', 'exe', 'expiring', 'ttp']"
s920,Windows WMI Process Call Create,This analytic is to look for wmi commandlines to execute or create process. This technique was used by adversaries or threat actor to execute their malicious payload in local or remote host. This hunting query is a good pivot to start to look further which process trigger the wmi or what process it execute locally or remotely.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process = ""* process *"" Processes.process = ""* call *"" Processes.process = ""* create *"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_path Processes.process_guid Processes.parent_process_id Processes.dest Processes.user Processes.process_path | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_wmi_process_call_create_filter`",50,['T1047'],{'wmi'},23.0,"['wmi', 'process', 'malicious', 'commandlines', 'execute']"
s921,WinEvent Scheduled Task Created to Spawn Shell,"The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a command to be executed with a native Windows shell (PowerShell, Cmd, Wscript, Cscript).\
The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not.\
schtasks.exe is natively found in `C:\Windows\system32` and `C:\Windows\syswow64`.\
The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory.\
Upon triage, identify the task scheduled source. Was it schtasks.exe or via TaskService? Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.","`wineventlog_security` EventCode=4698 | xmlkv Message | search Command IN (""*powershell.exe*"", ""*wscript.exe*"", ""*cscript.exe*"", ""*cmd.exe*"", ""*sh.exe*"", ""*ksh.exe*"", ""*zsh.exe*"", ""*bash.exe*"", ""*scrcons.exe*"", ""*pwsh.exe*"") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winevent_scheduled_task_created_to_spawn_shell_filter`",70,"['T1053.005', 'T1053']","{'schtasks', 'apt34', 'powershell', 'ryuk'}",,"['schtasks', 'taskservice', 'taskschd', 'tasks', 'task']"
s922,WinEvent Scheduled Task Created Within Public Path,"The following query utilizes Windows Security EventCode 4698, `A scheduled task was created`, to identify suspicious tasks registered on Windows either via schtasks.exe OR TaskService with a command to be executed from a user writeable file path.\
The search will return the first time and last time the task was registered, as well as the `Command` to be executed, `Task Name`, `Author`, `Enabled`, and whether it is `Hidden` or not.\
schtasks.exe is natively found in `C:\Windows\system32` and `C:\Windows\syswow64`.\
The following DLL(s) are loaded when schtasks.exe or TaskService is launched -`taskschd.dll`. If found loaded by another process, it is possible a scheduled task is being registered within that process context in memory.\
Upon triage, identify the task scheduled source. Was it schtasks.exe or was it via TaskService. Review the job created and the Command to be executed. Capture any artifacts on disk and review. Identify any parallel processes within the same timeframe to identify source.","`wineventlog_security` EventCode=4698 | xmlkv Message | search Command IN (""*\\users\\public\\*"", ""*\\programdata\\*"", ""*\\temp\\*"", ""*\\Windows\\Tasks\\*"", ""*\\appdata\\*"", ""*\\perflogs\\*"") | stats count min(_time) as firstTime max(_time) as lastTime by dest, Task_Name, Command, Author, Enabled, Hidden | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winevent_scheduled_task_created_within_public_path_filter`",70,"['T1053.005', 'T1053']","{'industroyer2', 'schtasks', 'icedid', 'apt34', 'ryuk'}",,"['schtasks', 'taskservice', 'taskschd', 'tasks', 'task']"
s923,WinEvent Windows Task Scheduler Event Action Started,"The following hunting analytic assists with identifying suspicious tasks that have been registered and ran in Windows using EventID 200 (action run) and 201 (action completed). It is recommended to filter based on ActionName by specifying specific paths not used in your environment. After some basic tuning, this may be effective in capturing evasive ways to register tasks on Windows. Review parallel events related to tasks being scheduled. EventID 106 will generate when a new task is generated, however, that does not mean it ran. Capture any files on disk and analyze.","`wineventlog_task_scheduler` EventCode IN (""200"",""201"") | rename ComputerName as dest | stats count min(_time) as firstTime max(_time) as lastTime by Message dest EventCode category | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winevent_windows_task_scheduler_event_action_started_filter`",80,['T1053.005'],"{'industroyer2', 'icedid'}",,"['eventid', 'tasks', 'task', 'events', 'action']"
s924,Winhlp32 Spawning a Process,"The following analytic identifies winhlp32.exe, found natively in `c:\windows\`, spawning a child process that loads a file out of appdata, programdata, or temp. Winhlp32.exe has a rocky past in that multiple vulnerabilities were found and added to MetaSploit. WinHlp32.exe is required to display 32-bit Help files that have the "".hlp"" file name extension. This particular instance is related to a Remcos sample where dynwrapx.dll is added to the registry under inprocserver32, and later module loaded by winhlp32.exe to spawn wscript.exe and load a vbs or file from disk. During triage, review parallel processes to identify further suspicious behavior. Review module loads for unsuspecting unsigned modules. Capture any file modifications and analyze.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=winhlp32.exe Processes.process IN (""*\\appdata\\*"",""*\\programdata\\*"", ""*\\temp\\*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winhlp32_spawning_a_process_filter`",80,['T1055'],"{'dll', 'exe', 'remcos'}",,"['winhlp32', 'inprocserver32', 'dll', 'exe', 'windows']"
s925,Winword Spawning Cmd,"The following detection identifies Microsoft Word spawning `cmd.exe`. Typically, this is not common behavior and not default with winword.exe. Winword.exe will generally be found in the following path `C:\Program Files\Microsoft Office\root\Office16` (version will vary). Cmd.exe spawning from winword.exe is common for a spearphishing attachment and is actively used. Albeit, the command-line will indicate what is being executed. During triage, review parallel processes and identify any files that may have been written. It is possible that COM is utilized to trampoline the child process to `explorer.exe` or `wmiprvse.exe`.",| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=winword.exe `process_cmd` by Processes.dest Processes.user Processes.parent_process Processes.original_file_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winword_spawning_cmd_filter`,70,"['T1566', 'T1566.001']",{'exe'},80.0,"['winword', 'exe', 'processes', 'microsoft', 'cmd']"
s926,Winword Spawning PowerShell,"The following detection identifies Microsoft Word spawning PowerShell. Typically, this is not common behavior and not default with winword.exe. Winword.exe will generally be found in the following path `C:\Program Files\Microsoft Office\root\Office16` (version will vary). PowerShell spawning from winword.exe is common for a spearphishing attachment and is actively used. Albeit, the command executed will most likely be encoded and captured via another detection. During triage, review parallel processes and identify any files that may have been written.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=""winword.exe"" `process_powershell` by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.original_file_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `winword_spawning_powershell_filter`",70,"['T1566', 'T1566.001']","{'microsoft office', 'exe', 'powershell'}",5.0,"['powershell', 'winword', 'office16', 'exe', 'microsoft']"
s927,Winword Spawning Windows Script Host,"The following detection identifies Microsoft Winword.exe spawning Windows Script Host - `cscript.exe` or `wscript.exe`. Typically, this is not common behavior and not default with Winword.exe. Winword.exe will generally be found in the following path `C:\Program Files\Microsoft Office\root\Office16` (version will vary). `cscript.exe` or `wscript.exe` default location is `c:\windows\system32\` or c:windows\syswow64\`. `cscript.exe` or `wscript.exe` spawning from Winword.exe is common for a spearphishing attachment and is actively used. Albeit, the command-line executed will most likely be obfuscated and captured via another detection. During triage, review parallel processes and identify any files that may have been written. Review the reputation of the remote destination and block accordingly.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name=""winword.exe"" Processes.process_name IN (""cscript.exe"", ""wscript.exe"") by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `winword_spawning_windows_script_host_filter`",70,"['T1566', 'T1566.001']",{'exe'},34.0,"['winword', 'wscript', 'cscript', 'exe', 'script']"
s928,Wmic Group Discovery,"The following hunting analytic identifies the use of `wmic.exe` enumerating local groups on the endpoint. \
Typically, by itself, is not malicious but may raise suspicion based on time of day, endpoint and username. \
During triage, review parallel processes and identify any further suspicious behavior.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wmic.exe (Processes.process=""*group get name*"") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` | `wmic_group_discovery_filter`",30,"['T1069', 'T1069.001']","{'exe', 'wmi'}",248.0,"['wmic', 'exe', 'malicious', 'processes', 'endpoint']"
s929,Wmic NonInteractive App Uninstallation,This analytic indentifies WMIC command-line attempting to uninstall application non-interactively. This technique was seen in IceID to uninstall AV products on the compromised host to evade detection. This Hunting query maybe a good indicator that some process tries to uninstall application using wmic which is not a common behavior. This approach may seen in some script or third part appication to uninstall their application but it is a good thing to check what it uninstall and why.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name=wmic.exe Processes.process=""* product *"" Processes.process=""*where name*"" Processes.process=""*call uninstall*"" Processes.process=""*/nointeractive*"" by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.original_file_name Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmic_noninteractive_app_uninstallation_filter`",50,"['T1562.001', 'T1562']","{'icedid', 'azorult', 'wmi'}",,"['uninstall', 'wmic', 'application', 'process', 'av']"
s930,WMIC XSL Execution via URL,"The following analytic identifies `wmic.exe` loading a remote XSL (eXtensible Stylesheet Language) script. This originally was identified by Casey Smith, dubbed Squiblytwo, as an application control bypass. Many adversaries will utilize this technique to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32 ""Squiblydoo"" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch. Upon identifying a suspicious execution, review for confirmed network connnection and script download.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process IN (""*http://*"", ""*https://*"") Processes.process=""*/format:*"" by Processes.parent_process_name Processes.original_file_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmic_xsl_execution_via_url_filter`",80,['T1220'],"{'exe', 'wmi'}",348.0,"['wmic', 'exe', 'vbscript', 'scripts', 'regsvr32']"
s931,Wmiprsve LOLBAS Execution Process Spawn,"The following analytic identifies `wmiprsve.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing Windows Management Instrumentation (WMI), the executed command is spawned as a child process of `wmiprvse.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of wmiprvse.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=wmiprvse.exe) (Processes.process_name IN (""Regsvcs.exe"", ""Ftp.exe"", ""OfflineScannerShell.exe"", ""Rasautou.exe"", ""Schtasks.exe"", ""Xwizard.exe"", ""Dllhost.exe"", ""Pnputil.exe"", ""Atbroker.exe"", ""Pcwrun.exe"", ""Ttdinject.exe"",""Mshta.exe"", ""Bitsadmin.exe"", ""Certoc.exe"", ""Ieexec.exe"", ""Microsoft.Workflow.Compiler.exe"", ""Runscripthelper.exe"", ""Forfiles.exe"", ""Msbuild.exe"", ""Register-cimprovider.exe"", ""Tttracer.exe"", ""Ie4uinit.exe"", ""Bash.exe"", ""Hh.exe"", ""SettingSyncHost.exe"", ""Cmstp.exe"", ""Mmc.exe"", ""Stordiag.exe"", ""Scriptrunner.exe"", ""Odbcconf.exe"", ""Extexport.exe"", ""Msdt.exe"", ""WorkFolders.exe"", ""Diskshadow.exe"", ""Mavinject.exe"", ""Regasm.exe"", ""Gpscript.exe"", ""Rundll32.exe"", ""Regsvr32.exe"", ""Msiexec.exe"", ""Wuauclt.exe"", ""Presentationhost.exe"", ""Wmic.exe"", ""Runonce.exe"", ""Syncappvpublishingserver.exe"", ""Verclsid.exe"", ""Infdefaultinstall.exe"", ""Explorer.exe"", ""Installutil.exe"", ""Netsh.exe"", ""Wab.exe"", ""Dnscmd.exe"", ""At.exe"", ""Pcalua.exe"", ""Msconfig.exe"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmiprsve_lolbas_execution_process_spawn_filter`",90,['T1047'],"{'netsh', 'schtasks', 'forfiles', 'bitsadmin', 'msbuild', 'rundll32', 'ftp', 'wmi'}",,"['wmiprvse', 'wmi', 'wmiprsve', 'processes', 'process']"
s932,WMI Permanent Event Subscription - Sysmon,"This analytic looks for the creation of WMI permanent event subscriptions. The following analytic identifies the use of WMI Event Subscription to establish persistence or perform privilege escalation.  WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges. This analytic is restricted by commonly added process execution and a path. If the volume is low enough, remove the values and flag on any new subscriptions.\
All event subscriptions have three components \
1. Filter - WQL Query for the events we want. EventID = 19 \
1. Consumer - An action to take upon triggering the filter. EventID = 20 \
1. Binding - Registers a filter to a consumer. EventID = 21 \
Monitor for the creation of new WMI EventFilter, EventConsumer, and FilterToConsumerBinding. It may be pertinent to review all 3 to identify the flow of execution. In addition, EventCode 4104 may assist with any other PowerShell script usage that registered the subscription.","`sysmon` EventCode=21 | rename host as dest | table _time, dest, user, Operation, EventType, Query, Consumer, Filter | `wmi_permanent_event_subscription___sysmon_filter`",30,"['T1546.003', 'T1546']","{'powershell', 'wmi'}",23.0,"['wmi', 'eventconsumer', 'eventfilter', 'wmiprvse', 'eventid']"
s933,WMI Recon Running Process Or Services,"The following analytic identifies suspicious PowerShell script execution via EventCode 4104, where WMI is performing an event query looking for running processes or running services. This technique is commonly found in malware and APT events where the adversary will map all running security applications or services on the compromised machine. During triage, review parallel processes within the same timeframe. Review the full script block to identify other related artifacts.","`powershell` EventCode=4104 ScriptBlockText= ""*SELECT*"" AND (ScriptBlockText=""*Win32_Process*"" OR ScriptBlockText=""*Win32_Service*"") | stats count min(_time) as firstTime max(_time) as lastTime by EventCode ScriptBlockText Computer UserID | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wmi_recon_running_process_or_services_filter`",30,['T1592'],"{'maze', 'powershell', 'wiper', 'malware', 'wmi'}",,"['malware', 'wmi', 'powershell', 'processes', 'execution']"
s934,Wscript Or Cscript Suspicious Child Process,"This analytic identifies a suspicious spawned process by WScript or CScript process. This technique was a common technique used by adversaries and malware to execute different LOLBIN, other scripts like PowerShell or spawn a suspended process to inject its code as a defense evasion. This TTP may detect some normal script that using several application tool that are in the list of the child process it detects but a good pivot and indicator that a script is may execute suspicious code.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_name IN (""cscript.exe"", ""wscript.exe"") Processes.process_name IN (""regsvr32.exe"", ""rundll32.exe"",""winhlp32.exe"",""certutil.exe"",""msbuild.exe"",""cmd.exe"",""powershell*"",""wmic.exe"",""mshta.exe"") by Processes.dest Processes.user Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `wscript_or_cscript_suspicious_child_process_filter`",70,"['T1055', 'T1543', 'T1134.004', 'T1134']","{'fin7', 'powershell', 'whispergate', 'certutil', 'remcos', 'lolbin', 'malware', 'msbuild', 'rundll32'}",,"['malware', 'wscript', 'process', 'cscript', 'scripts']"
s935,Wsmprovhost LOLBAS Execution Process Spawn,"The following analytic identifies `Wsmprovhost.exe` spawning a LOLBAS execution process. When adversaries execute code on remote endpoints abusing the Windows Remote Management (WinRm) protocol, the executed command is spawned as a child processs of `Wsmprovhost.exe`. The LOLBAS project documents Windows native binaries that can be abused by threat actors to perform tasks like executing malicious code. Looking for child processes of Wsmprovhost.exe that are part of the LOLBAS project can help defenders identify lateral movement activity.","| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where (Processes.parent_process_name=wsmprovhost.exe) (Processes.process_name IN (""Regsvcs.exe"", ""Ftp.exe"", ""OfflineScannerShell.exe"", ""Rasautou.exe"", ""Schtasks.exe"", ""Xwizard.exe"", ""Dllhost.exe"", ""Pnputil.exe"", ""Atbroker.exe"", ""Pcwrun.exe"", ""Ttdinject.exe"",""Mshta.exe"", ""Bitsadmin.exe"", ""Certoc.exe"", ""Ieexec.exe"", ""Microsoft.Workflow.Compiler.exe"", ""Runscripthelper.exe"", ""Forfiles.exe"", ""Msbuild.exe"", ""Register-cimprovider.exe"", ""Tttracer.exe"", ""Ie4uinit.exe"", ""Bash.exe"", ""Hh.exe"", ""SettingSyncHost.exe"", ""Cmstp.exe"", ""Mmc.exe"", ""Stordiag.exe"", ""Scriptrunner.exe"", ""Odbcconf.exe"", ""Extexport.exe"", ""Msdt.exe"", ""WorkFolders.exe"", ""Diskshadow.exe"", ""Mavinject.exe"", ""Regasm.exe"", ""Gpscript.exe"", ""Rundll32.exe"", ""Regsvr32.exe"", ""Msiexec.exe"", ""Wuauclt.exe"", ""Presentationhost.exe"", ""Wmic.exe"", ""Runonce.exe"", ""Syncappvpublishingserver.exe"", ""Verclsid.exe"", ""Infdefaultinstall.exe"", ""Explorer.exe"", ""Installutil.exe"", ""Netsh.exe"", ""Wab.exe"", ""Dnscmd.exe"", ""At.exe"", ""Pcalua.exe"", ""Msconfig.exe"")) by Processes.dest Processes.user Processes.parent_process Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)`| `wsmprovhost_lolbas_execution_process_spawn_filter`",90,"['T1021', 'T1021.006']","{'netsh', 'schtasks', 'forfiles', 'bitsadmin', 'msbuild', 'rundll32', 'ftp'}",,"['wsmprovhost', 'processes', 'processs', 'process', 'winrm']"
s936,WSReset UAC Bypass,"This search is to detect a suspicious modification of registry related to UAC bypass. This technique is to modify the registry in this detection, create a registry value with the path of the payload and run WSreset.exe to bypass User account Control.","| tstats `security_content_summariesonly` count from datamodel=Endpoint.Registry where Registry.registry_path= ""*\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command*"" AND (Registry.registry_value_name = ""(Default)"" OR Registry.registry_value_name = ""DelegateExecute"") by _time span=1h Registry.dest Registry.user Registry.registry_path Registry.registry_value_name Registry.registry_value_data Registry.process_guid Registry.registry_key_name | `drop_dm_object_name(Registry)` |rename process_guid as proc_guid |join proc_guid, _time [| tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Processes by _time span=1h Processes.process_id Processes.process_name Processes.process Processes.dest Processes.parent_process_name Processes.parent_process Processes.process_guid | `drop_dm_object_name(Processes)` |rename process_guid as proc_guid | fields _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name] | table _time dest user parent_process_name parent_process process_name process_path process proc_guid registry_path registry_value_name registry_value_data registry_key_name | `wsreset_uac_bypass_filter`",70,"['T1548.002', 'T1548']","{'registry modification', 'uacme', 'exe', 'uac', 'trickbot'}",276.0,"['registry', 'uac', 'wsreset', 'exe', 'bypass']"
s937,XMRIG Driver Loaded,This analytic identifies XMRIG coinminer driver installation on the system. The XMRIG driver name by default is `WinRing0x64.sys`. This cpu miner is an open source project that is commonly abused by adversaries to infect and mine bitcoin.,"`sysmon` EventCode=6 Signature=""Noriyuki MIYAZAKI"" OR ImageLoaded= ""*\\WinRing0x64.sys"" |  stats  min(_time) as firstTime max(_time) as lastTime count by  Computer ImageLoaded Hashes IMPHASH Signature Signed | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `xmrig_driver_loaded_filter`",80,"['T1543.003', 'T1543']","{'ps1', 'coinminer', 'driver'}",361.0,"['xmrig', 'coinminer', 'miner', 'winring0x64', 'driver']"
s938,XSL Script Execution With WMIC,This search is to detect a suspicious wmic.exe process or renamed wmic process to execute malicious xsl file. This technique was seen in FIN7 to execute its malicous jscript using the .xsl as the loader with the help of wmic.exe process. This TTP is really a good indicator for you to hunt further for FIN7 or other attacker that known to used this technique.,"| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where `process_wmic` Processes.process = ""*os get*"" Processes.process=""*/format:*"" Processes.process = ""*.xsl*"" by Processes.parent_process_name Processes.parent_process Processes.process_name Processes.process_id Processes.process Processes.dest Processes.user | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `xsl_script_execution_with_wmic_filter`",70,['T1220'],"{'fin7', 'exe', 'wmi'}",,"['wmic', 'xsl', 'exe', 'detect', 'malicious']"
s939,Detect hosts connecting to dynamic domain providers,"Malicious actors often abuse legitimate Dynamic DNS services to host malicious payloads or interactive command and control nodes. Attackers will automate domain resolution changes by routing dynamic domains to countless IP addresses to circumvent firewall blocks, block lists as well as frustrate a network defenders analytic and investigative processes. This search will look for DNS queries made from within your infrastructure to suspicious dynamic domains.","| tstats `security_content_summariesonly` count values(DNS.answer) as answer min(_time) as firstTime from datamodel=Network_Resolution by DNS.query host | `drop_dm_object_name(""DNS"")` | `security_content_ctime(firstTime)` | `dynamic_dns_providers` | `detect_hosts_connecting_to_dynamic_domain_providers_filter`",70,['T1189'],"{'leverage', 'dns'}",223.0,"['dns', 'malicious', 'domains', 'attackers', 'domain']"
s940,Detect Outbound LDAP Traffic,Malicious actors often abuse misconfigured LDAP servers or applications that use the LDAP servers in organizations. Outbound LDAP traffic should not be allowed outbound through your perimeter firewall.  This search will help determine if you have any LDAP connections to IP addresses outside of private (RFC1918) address space.,"| tstats earliest(_time) as earliest_time latest(_time) as latest_time values(All_Traffic.dest_ip) as dest_ip from datamodel=Network_Traffic.All_Traffic where All_Traffic.dest_port = 389 OR All_Traffic.dest_port = 636 AND NOT (All_Traffic.dest_ip = 10.0.0.0/8 OR All_Traffic.dest_ip=192.168.0.0/16 OR All_Traffic.dest_ip = 172.16.0.0/12) by All_Traffic.src_ip All_Traffic.dest_ip |`drop_dm_object_name(""All_Traffic"")` | where src_ip != dest_ip | `security_content_ctime(latest_time)`  | `security_content_ctime(earliest_time)` |`detect_outbound_ldap_traffic_filter`",70,"['T1190', 'T1059']",{'cve-2021-44228'},,"['ldap', 'outbound', 'firewall', 'ip', 'addresses']"
s941,DNS Query Length With High Standard Deviation,"This search allows you to identify DNS requests and compute the standard deviation on the length of the names being resolved, then filter on two times the standard deviation to show you those queries that are unusually large for your environment.","| tstats `security_content_summariesonly` count from datamodel=Network_Resolution where NOT DNS.message_type IN(""Pointer"",""PTR"") by DNS.query | `drop_dm_object_name(""DNS"")` | eval tlds=split(query,""."") | eval tld=mvindex(tlds,-1) | eval tld_len=len(tld) | search tld_len<=24 | eval query_length = len(query) | table query query_length record_type count | eventstats stdev(query_length) AS stdev avg(query_length) AS avg p50(query_length) AS p50| where query_length>(avg+stdev*2) | eval z_score=(query_length-avg)/stdev | `dns_query_length_with_high_standard_deviation_filter`",70,"['T1048.003', 'T1048']","{'hidden cobra', 'dns'}",162.0,"['dns', 'queries', 'search', 'names', 'requests']"
s942,F5 BIG-IP iControl REST Vulnerability CVE-2022-1388,"The following analytic identifies a recent unauthenticated remote code execution vulnerablity against the F5 BIG-IP iControl REST API. The analytic identifies the URI path found in the POCs and the HTTP Method of POST. In addition, the request header will have the commands that may be executed in fields utilcmdargs and the auth field of X-F5-Auth-Token, which may have a random base64 encoded value.","| tstats count from datamodel=Web where Web.url=""*/mgmt/tm/util/bash*"" Web.http_method=""POST"" by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `f5_big_ip_icontrol_rest_vulnerability_cve_2022_1388_filter`",100,['T1190'],"{'authenticate', 'cve-2022-1388'}",,"['api', 'auth', 'http', 'icontrol', 'unauthenticated']"
s943,Multiple Archive Files Http Post Traffic,"This search is designed to detect high frequency of archive files data exfiltration through HTTP POST method protocol. This are one of the common techniques used by APT or trojan spy after doing the data collection like screenshot, recording, sensitive data to the infected machines. The attacker may execute archiving command to the collected data, save it a temp folder with a hidden attribute then send it to its C2 through HTTP POST. Sometimes adversaries will rename the archive files or encode/encrypt to cover their tracks. This detection can detect a renamed archive files transfer to HTTP POST since it checks the request body header. Unfortunately this detection cannot support archive that was encrypted or encoded before doing the exfiltration.","`stream_http` http_method=POST |eval archive_hdr1=substr(form_data,1,2) | eval archive_hdr2 = substr(form_data,1,4) |stats values(form_data) as http_request_body min(_time) as firstTime max(_time) as lastTime count by http_method http_user_agent uri_path url bytes_in bytes_out archive_hdr1 archive_hdr2 |where count >20 AND (archive_hdr1 = ""7z"" OR archive_hdr1 = ""PK"" OR archive_hdr2=""Rar!"") | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `multiple_archive_files_http_post_traffic_filter`",50,"['T1048.003', 'T1048']","{'teardrop', 'apt39', 'sunburst', 'raindrop', 'solorigate'}",362.0,"['archive', 'archiving', 'search', 'http', 'detection']"
s944,Plain HTTP POST Exfiltrated Data,"This search is to detect potential plain HTTP POST method data exfiltration. This network traffic is commonly used by trickbot, trojanspy, keylogger or APT adversary where arguments or commands are sent in plain text to the remote C2 server using HTTP POST method as part of data exfiltration.","`stream_http` http_method=POST form_data IN (""*wermgr.exe*"",""*svchost.exe*"", ""*name=\""proclist\""*"",""*ipconfig*"", ""*name=\""sysinfo\""*"", ""*net view*"") |stats values(form_data) as http_request_body min(_time) as firstTime max(_time) as lastTime count by http_method http_user_agent uri_path url bytes_in bytes_out | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `plain_http_post_exfiltrated_data_filter`",70,"['T1048.003', 'T1048']","{'trickbot', 'ipconfig'}",,"['http', 'search', 'exfiltration', 'detect', 'keylogger']"
s945,Splunk Identified SSL TLS Certificates,"The following analytic uses tags of SSL, TLS and certificate to identify the usage of the Splunk default certificates being utilized in the environment. Recommended guidance is to utilize valid TLS certificates which documentation may be found in Splunk Docs - https://docs.splunk.com/Documentation/Splunk/8.2.6/Security/AboutsecuringyourSplunkconfigurationwithSSL.","tag IN (ssl, tls, certificate) ssl_issuer_common_name=*splunk* | stats values(src) AS ""Host(s) with Default Cert"" count by ssl_issuer ssl_subject_common_name ssl_subject_organization ssl_subject host sourcetype | `splunk_identified_ssl_tls_certificates_filter`",60,['T1040'],"{'tls', 'cve-2022-32151'}",,"['splunk', 'ssl', 'certificates', 'tls', 'certificate']"
s946,Confluence Unauthenticated Remote Code Execution CVE-2022-26134,"The following analytic assists with identifying CVE-2022-26134 based exploitation utilizing the Web datamodel to cover network and CIM compliant web logs. The parameters were captured from live scanning and the POC provided by Rapid7. This analytic is written against multiple proof of concept codes released and seen in the wild (scanning). During triage, review any endpoint based logs for further activity including writing a jsp file to disk and commands/processes spawning running as root from the Confluence process.","| tstats count min(_time) as firstTime max(_time) as lastTime from datamodel=Web where Web.url IN (""*${*"", ""*%2F%7B*"") (Web.url=""*org.apache.commons.io.IOUtils*"" Web.url=""*java.lang.Runtime@getRuntime().exec*"") OR (Web.url=""*java.lang.Runtime%40getRuntime%28%29.exec*"") OR (Web.url=""*getEngineByName*"" AND Web.url=""*nashorn*"" AND Web.url=""*ProcessBuilder*"") by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest sourcetype | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `confluence_unauthenticated_remote_code_execution_cve_2022_26134_filter`",100,"['T1505', 'T1190']",{'cve-2022-26134'},,"['cve', 'logs', 'confluence', 'jsp', 'web']"
s947,Log4Shell JNDI Payload Injection Attempt,"CVE-2021-44228 Log4Shell payloads can be injected via various methods, but on of the most common vectors injection is via Web calls. Many of the vulnerable java web applications that are using log4j have a web component to them are specially targets of this injection, specifically projects like Apache Struts, Flink, Druid, and Solr. The exploit is triggered by a LDAP lookup function in the log4j package, its invocation is similar to `${jndi:ldap://PAYLOAD_INJECTED}`, when executed against vulnerable web applications the invocation can be seen in various part of web logs. Specifically it has been successfully exploited via headers like X-Forwarded-For, User-Agent, Referer, and X-Api-Version. In this detection we first limit the scope of our search to the Web Datamodel and use the `| from datamodel` function to benefit from schema accelerated searching capabilities, mainly because the second part of the detection is pretty heavy, it runs a regex across all _raw events that looks for `${jndi:ldap://` pattern across all potential web fields available to the raw data, like http headers for example. If you see results for this detection, it means that there was a attempt at a injection, which could be a reconnaissance activity or a valid expliotation attempt, but this does not exactly mean that the host was indeed successfully exploited.","| from datamodel Web.Web | regex _raw=""[jJnNdDiI]{4}(\:|\%3A|\/|\%2F)\w+(\:\/\/|\%3A\%2F\%2F)(\$\{.*?\}(\.)?)?"" | fillnull | stats count by action, category, dest, dest_port, http_content_type, http_method, http_referrer, http_user_agent, site, src, url, url_domain, user | `log4shell_jndi_payload_injection_attempt_filter`",50,['T1190'],{'cve-2021-44228'},,"['log4j', 'log4shell', 'logs', 'payload_injected', 'exploit']"
s948,Log4Shell JNDI Payload Injection with Outbound Connection,"CVE-2021-44228 Log4Shell payloads can be injected via various methods, but on of the most common vectors injection is via Web calls. Many of the vulnerable java web applications that are using log4j have a web component to them are specially targets of this injection, specifically projects like Apache Struts, Flink, Druid, and Solr. The exploit is triggered by a LDAP lookup function in the log4j package, its invocation is similar to `${jndi:ldap://PAYLOAD_INJECTED}`, when executed against vulnerable web applications the invocation can be seen in various part of web logs. Specifically it has been successfully exploited via headers like X-Forwarded-For, User-Agent, Referer, and X-Api-Version. In this detection we match the invocation function with a network connection to a malicious ip address.","| from datamodel Web.Web | rex field=_raw max_match=0 ""[jJnNdDiI]{4}(\:|\%3A|\/|\%2F)(?<proto>\w+)(\:\/\/|\%3A\%2F\%2F)(\$\{.*?\}(\.)?)?(?<affected_host>[a-zA-Z0-9\.\-\_\$]+)"" | join affected_host type=inner [| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic.All_Traffic by All_Traffic.dest | `drop_dm_object_name(All_Traffic)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | rename dest AS affected_host] | fillnull | stats count by action, category, dest, dest_port, http_content_type, http_method, http_referrer, http_user_agent, site, src, url, url_domain, user | `log4shell_jndi_payload_injection_with_outbound_connection_filter`",50,['T1190'],"{'rex', 'cve-2021-44228'}",,"['log4j', 'log4shell', 'payload_injected', 'exploit', 'jndi']"
s949,Spring4Shell Payload URL Request,"The following analytic is static indicators related to CVE-2022-22963, Spring4Shell. The 3 indicators provide an amount of fidelity that source IP is attemping to exploit a web shell on the destination. The filename and cmd are arbitrary in this exploitation. Java will write a JSP to disk and a process will spawn from Java based on the cmd passed. This is indicative of typical web shell activity.","| tstats count from datamodel=Web where Web.http_method IN (""GET"") Web.url IN (""*tomcatwar.jsp*"",""*poc.jsp*"",""*shell.jsp*"") by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest sourcetype | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `spring4shell_payload_url_request_filter`",60,"['T1505.003', 'T1505', 'T1190']",{'cve-2022-22963'},,"['jsp', 'cve', 'java', 'process', 'spring4shell']"
s950,VMware Server Side Template Injection Hunt,"The following hunting analytic identifies the server side template injection related to CVE-2022-22954, however is a variation found within the same endpoint of the URL scheme.","| tstats count from datamodel=Web where Web.http_method IN (""GET"") Web.url=""*deviceudid=*"" AND Web.url IN (""*java.lang.ProcessBuilder*"",""*freemarker.template.utility.ObjectConstructor*"") by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest sourcetype | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `vmware_server_side_template_injection_hunt_filter`",70,['T1190'],{'cve-2022-22954'},,"['cve', 'template', 'url', 'injection', 'endpoint']"
s951,VMware Workspace ONE Freemarker Server-side Template Injection,"The following analytic identifies the server side template injection related to CVE-2022-22954. Based on the scanning activity across the internet and proof of concept code available the template injection occurs at catalog-portal/ui/oauth/verify?error=&deviceudid=. Upon triage, review parallel processes and VMware logs. Following the deviceudid= may be a command to be executed. Capture any file creates and review modified files on disk.","| tstats count from datamodel=Web where Web.http_method IN (""GET"") Web.url=""*/catalog-portal/ui/oauth/verify?error=&deviceudid=*"" AND Web.url=""*freemarker.template.utility.Execute*"" by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest sourcetype | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `vmware_workspace_one_freemarker_server_side_template_injection_filter`",70,['T1190'],{'cve-2022-22954'},,"['cve', 'vmware', 'template', 'injection', 'scanning']"
s952,Web JSP Request via URL,"The following analytic identifies the common URL requests used by a recent CVE - CVE-2022-22965, or Spring4Shell, to access a webshell on the remote webserver. The filename and cmd are arbitrary in this exploitation. Java will write a JSP to disk and a process will spawn from Java based on the cmd passed. This is indicative of typical web shell activity.","| tstats count from datamodel=Web where Web.http_method IN (""GET"") Web.url IN (""*.jsp?cmd=*"",""*j&cmd=*"") by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest sourcetype | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `web_jsp_request_via_url_filter`",90,"['T1505.003', 'T1505', 'T1190']",{'cve-2022-22965'},,"['jsp', 'webshell', 'spring4shell', 'webserver', 'java']"
s953,Web Spring4Shell HTTP Request Class Module,"The following analytic identifies the payload related to Spring4Shell, CVE-2022-22965. This analytic uses Splunk Stream HTTP to view the http request body, form data. STRT reviewed all the current proof of concept code and determined the commonality with the payloads being passed used the same fields ""class.module.classLoader.resources.context.parent.pipeline.first"".","`stream_http` http_method IN (""POST"") | stats values(form_data) as http_request_body min(_time) as firstTime max(_time) as lastTime count by http_method http_user_agent uri_path url bytes_in bytes_out | search http_request_body IN (""*class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_*"", ""*class.module.classLoader.resources.context.parent.pipeline.first.pattern*"",""*suffix=.jsp*"") | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `web_spring4shell_http_request_class_module_filter`",90,['T1190'],{'cve-2022-22965'},,"['payloads', 'payload', 'spring4shell', 'splunk', 'http']"
s954,Web Spring Cloud Function FunctionRouter,"The following analytic identifies activity related to the web application Spring Cloud Function that was recently idenfied as vulnerable. This is CVE-2022-22963. Multiple proof of concept code was released. The URI that is hit includes `functionrouter`. The specifics of the exploit include a status of 500. In this query we did not include it, but for filtering you can add Web.status=500. The exploit data itself (based on all the POCs) is located in the form_data field. This field will include all class.modules being called.","| tstats count from datamodel=Web where Web.http_method IN (""POST"") Web.url=""*/functionRouter*"" by Web.http_user_agent Web.http_method, Web.url,Web.url_length Web.src, Web.dest Web.status sourcetype | `drop_dm_object_name(""Web"")` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `web_spring_cloud_function_functionrouter_filter`",70,['T1190'],"{'cloud computing', 'cve-2022-22963'}",,"['exploit', 'vulnerable', 'spring', 'functionrouter', 'cloud']"
